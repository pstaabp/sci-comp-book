<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-adv-lin-alg">
  <title>Advanced Topics in Linear Algebra</title>

  <section xml:id="sect-sparse-matrices">
    <title>Sparse Matrices</title>

    <p>
      We saw in the previous chapter, some of the matrices contained many zeros.  As matrices get larger, the structure of them (like banded matrices), results in a matrix that is almost all zeros.
    </p>

    <p>
      Consider the matrix:
    </p>

    <p>
      <cd>
      <cline>A = [</cline>
      <cline>  0   1    0    0    0    0   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0    0    0    2   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0   -1    0    0    0   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0    0    0    0   0   0   0   1   0   0   0 ;</cline>
      <cline>  0   0    0    0   -2    0   0   0   0   0   0   0   0 ;</cline>
      <cline>  1   0    0    0    0    0   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0    0    0    0   0   0   0   0   0   0  -1 ;</cline>
      <cline>  0   0    0    0    0    0   2   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0   -1    0    0   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0    0    0   -2   0   0   0   0   0   0   0 ;</cline>
      <cline>  0   0    0    0    0    0   0   0   0   0   0   1   0 ;</cline>
      <cline>  0   0    0    0    0    0   0   0   0   0   2   0   0 ;</cline>
      <cline>  0   0    0    0    0    0   0   0   1   0   0   0   0 ]</cline>
      </cd>
    </p>

    <p>
      and there is no apparent structure to the nonzero elements.  Although this isn't that large, imagine a 1000 by 1000 version of this array with 1% of the elements nonzero.  If we used a regular matrix, then such a matrix would take <m>1000^2 \cdot 8</m> bytes, which is quite large. We can see this with <c>sizeof(A)</c> which returns <c>1352</c>, which is <m>13^2 \cdot 8</m>.
    </p>

    <p>
      Instead, we will use a <c>SparseMatrixCSC</c> in the <c>SparseArrays</c> package to store these.  There are a couple of ways to create the matrix.  If it is stored as a regular (dense) matrix, then it can be converted easily.
    </p>

    <p>
      <cd>
      <cline>using SparseArrays</cline>
      <cline>SA = SparseMatrixCSC(A)</cline>
      </cd>
    </p>

    <p>
      which returns
    </p>

    <p>
      <cd>
      <cline>13×13 SparseMatrixCSC{Int64, Int64} with 13 stored entries:</cline>
      <cline>  ⋅  1   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   2  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅  -1   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅  -2   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  1  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  -1</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  2  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅  -1   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅  -2  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  ⋅  ⋅  2  ⋅   ⋅</cline>
      <cline>  ⋅  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅   ⋅</cline>
      </cd>
    </p>

    <p>
      Notice that it only stores the nonzero elements.  To determine that the storage amount is indeed small, entering <c> sizeof(SA) </c> which returns <c>40</c>.
    </p>

    <p>
      Let's create a sparse vector with the following command: \begin{jlblock}[la2] R = sparsevec([1,5,7,12,13],[-1,5,10,3,0]) \end{jlblock} which returns \jlc[la2]{display(R)}\printpythontex[verbatim] and notice that lists the elements of the vector that are nonzero (except that we included
    </p>
  </section>
</chapter>
