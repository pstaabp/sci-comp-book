<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="ch-adv-functions">
	<title>Advanced Function Features of Julia</title>
	<introduction>
		<p>
			This chapter covers a bit more on functions in julia.  These feature allow the ability to
			write code that easier to use, read and debug.  We will perform error checking for arguments
			to ensure that only valid arguments are considered.  Additionally, to make functions more robust,
			we'll use option arguments and keyword arguments.
		</p>
	</introduction>

	<section>
		<title>Testing Arguments</title>
		<p>
			Let's return to the factorial function that we saw in <xref ref="sect-factorial"/>:
		</p>

		<p>
			<cd>
			<cline>fact(n::Integer) = n==0 ? 1 : n*fact(n-1)</cline>
			</cd>
		</p>

		<p>
			We saw before that if we call this with a non-integer number like 3.2 that we will
			get an error, but what if we include a negative number?
			If you run <c>fact(-5)</c> you will see ??????.
		</p>

		<p>
			<cd>
			<cline>StackOverflowError:</cline>
			<cline>	</cline>
			<cline>  Stacktrace:</cline>
			<cline>   [1] fact(n::Int64) (repeats 2 times)</cline>
			<cline>   @ Main ~/code/sci-comp-book/julia-output/adv-functions.ipynb:1</cline>
			</cd>
		</p>

		<p>
			This occurs because when a negative number is put into the <c>fact</c> function that
			since <m>n</m> is not 0, it computes <c>n*fact(n-1)</c> which will evaluate <c>fact</c> again at a more negative number.
			Subsequent calls to <c>fact</c> with more negative numbers would never end except that
			recursive functions are evaluated on what is called the stack and there is a maximum number
			of items that can be put on the stack and thus this error occurs.  We can alert the user to an
			invalid argument with the following:
		</p>


		<program language="julia" line-numbers="yes">
			<input>
function fact(n::Integer)
	n&gt;=0 || throw(ArgumentError("The argument must be a nonnegative integer."))
	n==0 ? 1 : n*fact(n-1)
end
			</input>
		</program>

		<p>
			The first line of this evaluates <c>n &gt;= 0</c>.  If that is false, the statement after
			the <c>||</c> is evaluated and an error is thrown.  Alternatively, if you enter a
			positive number for <c>n</c>, then the first line <c>n&gt;=0</c> evaluates as <c>true</c> and then
			shortcircuits, which means as soon as the first part of the compound or statement hits true,
			it stops evaluating.
		</p>

		<p>
			Using this newer version of <c>fact</c>, if we call <c>fact(-5)</c>,  we get
		</p>

		<p>
			<cd>
			<cline>ArgumentError: The argument must be a nonnegative integer.</cline>
			</cd>
		</p>

		<p>
			which is a more helpful error.
		</p>

		<exercise>
			<p>
				In <xref ref="ch-number-theory"/>, the <c>findAllFactors</c> function doesn't make any
				sense if the number is less than 1.  Add a line to the function that throws an
				appropriate error.
			</p>
		</exercise>
	</section>

	<section>
		<title>Optional arguments</title>
		<p>
			Let's return to Newton's method, which we wrote<fn>for this section, we will consider the
			code from <xref ref="ch-rootfinding"/>, not that from <xref ref="ch-comp-types"/>, which introduces
			the <c>Root</c> struct.  We will comment on this later this chapter. </fn> before as
		</p>


		<program language="julia" line-numbers="yes">
			<input>
using ForwardDiff
function newton(f::Function, x0::Number)
	local x1 = x0
	local dx = f(x1)/ForwardDiff.derivative(f, x1)
	local steps = 0
	while abs(dx) &gt; 1e-6 &amp;&amp; steps &lt; 10
		x1 -= dx
		dx = f(x1)/ForwardDiff.derivative(f, x1)
		steps += 1
	end
	x1
end
			</input>
		</program>

		<p>
			Notice that we hard-coded the stopping criteria and the max number of
			steps.  This is not good practice and will use a default value as an <em>optional argument</em>.
		</p>

		<p>
			Let's define the tolerance (<c>tol</c>) and the maximum number of
			steps (<c>max_steps</c>) in the following way:
		</p>


		<program language="julia" line-numbers="yes">
			<input>
function newton(f::Function, x0::Number, tol = 1e-6, max_steps = 10)
  local x1 = x0
  local dx = f(x1)/ForwardDiff.derivative(f, x1)
  local steps = 0
  while abs(dx) &gt; tol &amp;&amp; steps &lt; max_steps
    x1 -= dx
    dx = f(x1)/ForwardDiff.derivative(f, x1)
    steps += 1
  end
  x1
end
			</input>
		</program>

		<p>
			You may notice that we didn't give the new arguments types.  This wasn't an error, but julia
			will interpret the type from the default value.  In this case, <c>tol</c> will be a <c>Float64</c>
			and <c>max_steps</c> will be an <c>Int64</c>.
		</p>

		<p>
			Note that when entering this, it says there are 3 methods with the name <c>newton</c>.  This is
			because julia will build three different function signatures.  One with 2 arguments (and both <c>tol</c>
			and <c>max_steps</c> use the default values), one with 3 arguments (and <c>max_steps</c> using it's
			default value) and one with all 4 arguments. Also remember that <c>1e-6</c> means <m>10^{-6}</m>, which
			is the default tolerance.
		</p>

		<p>
			This seems more robust in that we can now call Newton's method with
			different values of tolerance and steps. So:
		</p>

		<p>
			<cd>
			<cline>newton(x -&gt; x^2-5,2) </cline>
			</cd>
		</p>

		<p>
			returns <c>2.236067977915804</c>. But if we use a lower tolerance:
		</p>

		<p>
			<cd>
			<cline>newton(x -&gt; x^2-5,2,1e-3)</cline>
			</cd>
		</p>

		<p>
			returns <c>2.236111111111111</c>, which is slightly different
			than before.  Probably the number of steps of Newton was a bit different.
		</p>

		<p>
			If we want to change the number of steps, however, we need to include the
			tolerance as well like:
		</p>

		<p>
			<cd>
			<cline>newton(x -&gt; x^2-5,2,1e-6,5)</cline>
			</cd>
		</p>

		<p>
			which results in <c>2.236111111111111</c>.  We will see
			later an alternative way to handle these parameters, called <em>keyword parameters</em>
			which requires names of parameters, not the order, which is helpful as the
			number of arguments/parameters for a function gets large.
		</p>

		<p>
			This is quite an improvement, however, the arguments <c>tol</c> and <c>max_steps</c> optional
			parameters should both be positive, so we will add checks on these as
		</p>


		<program language="julia" line-numbers="yes">
			<input>
  function newton(f::Function, x0::Number,tol=1e-6,max_steps=10)
    tol &gt; 0 || throw(ArgumentError("The parameter tol must be positive"))
    max_steps &gt; 0 || throw(ArgumentError("The parameter max_steps must be positive"))
    local dx = f(x0)/ForwardDiff.derivative(f,x0)
    local steps = 0
    while abs(dx) &gt; tol &amp;&amp; steps &lt; max_steps
      x0 -= dx
      dx = f(x0)/ForwardDiff.derivative(f,x0)
      steps += 1
    end
    x0
  end
			</input>
		</program>

		<p>
			and including negative numbers for either of these two now throws an error.
		</p>

		<exercise>
			<introduction>
				<p>
					Complete the following:
				</p>
			</introduction>


			<task>
				<statement>
					<p>
						Recall that a root of <m>f(x)=x^2-10</m> is the square root of 10.  Use the function above
						to find <m>\sqrt{10}</m> with a tolerance of <m>10^{-10}</m>.
					</p>
				</statement>
			</task>


			<task>
				<statement>
					<p>
						Find the absolute and relative error.  Use <c>sqrt(10)</c> as the actual value and
						the result from the <c>newton</c> function as the Hint: recall this from <xref ref="ch-rootfinding"/>.
					</p>
				</statement>
			</task>


			<task>
				<statement>
					<p>
						Put in arguments for the tolerance and maximum number of steps that will throw an error.
						Check that this actually occurs.
					</p>
				</statement>
			</task>
		</exercise>
	</section>

	<section>
		<title>Handling Special Cases</title>
		<p>
			As we saw in <xref ref="ch-rootfinding"/>,
		</p>

		<p>
			<cd>
			<cline>f(x)=x^2+1</cline>
			<cline>root=newton(f,2)</cline>
			</cd>
		</p>

		<p>
			returns <c>2.4008803928468465</c>, but if we evaluate the function at the root,
			with <c>f(root)</c> the result is <c>6.764226660756428</c>, which is definitely
			not 0 (or very close), so this doesn't appear to be a root.  Recall this occurred because the
			function <m>f(x)=x^2+1</m> doesn't have a root.  If we temporarily print out the values of <c>x1</c>
			within the loop, we'll see that the x values bounce all around and then just stops.<fn>In the Newton method,
			add the line <c>@show x1</c> just after the line with the <c>while</c> statement.  Rerun the function
			then and try <c>root=newton(f,2)</c> again.</fn>  It's not clear, but what happens
			here is that the max number of steps is reached, but you are not alerted.
		</p>

		<p>
			So to make this more clear, before the last line of the function, let's include
		</p>

		<p>
			<cd>
			<cline>steps &lt; max_steps || throw(ErrorException("The maximum number of steps: $max_steps was reached without convergence"))</cline>
			</cd>
		</p>

		<p>
			and then rerunning  <c>newton(x -&gt; x^2+1,2)</c> gives the error
			<c>The maximum number of steps: 10 was reached without convergence</c>
			which explains to the user that a root was not reached.
		</p>

		<p>
			You, the astute reader, probably noticed that we had an alternative way to handle this case in
			<xref ref="ch-comp-types"/>, in which we created a struct called <c>Root</c> to handle all of the
			information from Newton's method.  Either using the <c>Root</c> structure of the method of
			throwing an exception like above is fine as you may need to know how you will use this code.
		</p>
	</section>

	<section>
		<title>Keyword Arguments</title>
		<introduction>
			<p>
				Although optional arguments are quite helpful, there are two situations that they can be annoying.
			</p>

			<p>
				<ol>
					<li>
						<p>
							If you want to change one optional argument without the others, we may not be able to.  In the Newton's
							method example, if we want to change <c>max_steps</c>, which is the 4th argument without changing the 3rd
							argument, we can't just put in the value of <c>max_step</c>.
						</p>
					</li>

					<li>
						<p>
							For more complex functions, there may be a lot of possible parameters, most of which could be optional.
							The order of the arguments are important, and if you mix them up, you may either get an error or get
							unexpected results.
						</p>
					</li>
				</ol>
			</p>

			<p>
				Using keyword arguments can solving both of these problems and
				We can rewrite newton's method as
			</p>


			<program language="julia" line-numbers="yes">
				<input>
  function newton(f::Function, x0::Number; tol=1e-6, max_steps=10)
    tol &gt; 0 || throw(ArgumentError("The parameter tol much be positive"))
    max_steps &gt; 0 || throw(ArgumentError("The parameter max_steps much be positive"))
    local x1 = x0
    local xstep = f(x0)/ForwardDiff.derivative(f,x0)
    local steps = 0
    while abs(xstep)&gt;tol &amp;&amp; steps&lt;max_steps
      x0 = x0 - xstep
      xstep = f(x0)/ForwardDiff.derivative(f,x0)
      steps += 1
    end
    local error = "The maximum number of steps: $max_steps was reached without convergence"
    steps &lt; max_steps || throw(ErrorException(error))
    x0
  end
				</input>
			</program>

			<p>
				and it is important to note that there is a semicolon separating the arguments from
				the keyword arguments.
			</p>

			<p>
				Now we can use this more easily.  The function call
			</p>

			<p>
				<cd>
				<cline>newton(x -&gt; x^2-2,1,tol=1e-3)</cline>
				</cd>
			</p>

			<p>
				results in <c>1.4142156862745099</c> and
				if we only want to change the number of <c>max_steps</c> is
			</p>

			<p>
				<cd>
				<cline>newton(x -&gt; x^2-2,100,max_steps=20)</cline>
				</cd>
			</p>

			<p>
				results in <c>1.41421356237384</c>.
			</p>
		</introduction>

		<subsection>
			<title>Keyword Arguments for complex functions</title>
			<p>
				The main place that we have used keywords in this text is in the <c>Plots</c> package.
				All of the ways to adjust a plot is with keywords.  There are perhaps about 100 keyword arguments
				to adjust for a plot and since each one of them has a default value, you only need to enter the
				ones that you want to change.
			</p>

			<p>
				This was just a quick introduction to this and for further information, look at the
				<url href="https://docs.julialang.org/en/v1/manual/functions/#Keyword-Arguments-1" visual="">
				julia documentation on keyword arguments</url>.
			</p>

			<exercise>
				<introduction>
					<p>
						In <xref ref="ch-num-int"/>, we'll see the <url href="https://en.wikipedia.org/wiki/Trapezoidal_rule" visual="">
						trapezoid rule</url>, which is used for numerical integration or area under a curve.
						The technique subdivides the interval <m>[a,b]</m> into <m>n</m> equal pieces and approximates
						the area under the curve with the area of a trapezoid.  In julia this is
					</p>


					<program language="julia" line-numbers="yes">
						<input>
function trapRule(f::Function,a::Number,b::Number)
  local h = (b-a)/10
  0.5*h*sum(map(f,a:h:b-h)+map(f,a+h:h:b))
end
						</input>
					</program>

					<p>
						where <m>n=10</m>. We can estimate the area under the curve <m>y=x^3</m> on the interval <m>[0,4]</m> by entering
					</p>

					<p>
						<cd>
						<cline>trapRule(x -&gt; x^3,0,4)</cline>
						</cd>
					</p>

					<p>
						and the result is <c>64.64000000000001</c>.
					</p>
				</introduction>


				<task>
					<statement>
						<p>
							Change the arguments <c>a</c> and <c>b</c> to be optional arguments with the default values of 0 and 1 respectively.
						</p>
					</statement>
				</task>


				<task>
					<statement>
						<p>
							Rewrite the code above to make a keyword argument of the number of subdivisions (10) and set the initial value to 10.
						</p>
					</statement>
				</task>


				<task>
					<statement>
						<p>
							Check that the argument <c>a</c> is less than <c>b</c> and that <c>n</c> is greater than 1.
						</p>
					</statement>
				</task>


				<task>
					<statement>
						<p>
							Find a better estimate for the area under <m>y=x^3</m> on <m>[0,4]</m> using 100 and 1000 subdivisions.
						</p>
					</statement>
				</task>
			</exercise>
		</subsection>
	</section>

	<section xml:id="sect-parametric-methods"><title>Parametric Methods</title>
		<p>
			Let's look at writing a function that finds the maximum of some number of real values.
			There is a built-in function for this, but going through this will illustrate a point.
		</p>

		<p>
			If we want to find the maximum of two reals, then
		</p>

		<p>
			<cd>
			<cline>findMax(x::Real,y::Real) = x &gt; y ? x : y</cline>
			</cd>
		</p>

		<p>
			and if we want any number of reals then as we saw in <xref ref="sect-varargs"/>,
			we can use variable arguments (varargs) like:
		</p>


		<program language="julia" line-numbers="yes">
			<input>
function findMax(nums::Real...)
	local max = -Inf
	for num in nums
		if num &gt; max
			max = num
		end
	end
	max
end
			</input>
		</program>

		<p>
			Another <c>findMax</c> function that would be helpful is in an array of  <c>Real</c>s
			(mainly because we will need to do something different for <c>Complex</c> arrays).
			This will look a lot like the one above:
		</p>


		<program language="julia" line-numbers="yes">
			<input>
function findMax(arr::Vector{Real})
	local max = -Inf
	for num in arr
		if num &gt; max
			max = num
		end
	end
	max
end
			</input>
		</program>

		<p>
			Testing it with the array <c>x=collect(1:10)</c> using <c>findMax(x)</c>
			we get the error:
		</p>

		<p>
			<cd>
				<cline>MethodError: no method matching findMax(::Vector{Int64})</cline>
				<cline>The function `findMax` exists, but no method is defined for this combination of argument types.</cline>
			</cd>
		</p>

		<p>
			and this is because even though <c>x</c> is of type <c>Vector{Int64}</c> that doesn't
			fit the signature <c>Vector{Real}</c>.
		</p>

		<p>
			One way to get around this is to write a function for each number type
			we may want to find the max of (<c>Int128</c>, <c>Int64</c>, ...,
			<c>BigInt</c>, <c>Float64</c>, <c>Float32</c>, <c>Float16</c>) and all of the
			flavors of <c>Rational</c> but if you notice every function will be nearly
			identical and this would be painful
			and a lot of code copying.  Also, this is a nightmare for maintenance, in that
			if there was a bug in one it would need to be tracked down in each one.
		</p>

		<p>
			Instead, we will use something in julia called a
			<url href="https://docs.julialang.org/en/latest/manual/methods/\#Parametric-Methods-1" visual="julialang.org">parametric
			function</url> which allows us to write a single function that works on a set of
			different types. To do this with the <c>findMax</c> function, we will write:
		</p>


		<program language="julia" line-numbers="yes">
			<input>
function findMax(arr::Vector{T}) where T &lt;: Real
	local max = -Inf
	for num in arr
		if num &gt; max
			max = num
		end
	end
	max
end
			</input>
		</program>

		<p>
			and the expression <c>where T &lt;: Real</c> is used as any
			type <c>T</c> that is a subset of the <c>Real</c> numbers (including
			integers, floats and rational) and then <c>findMax(x)</c> returns <c>10</c>. Also if we have
		</p>

		<p>
			<cd>
			findMax(collect(1.0:10.0))
			</cd>
		</p>

		<p>
			returns <c>10.0</c> and
		</p>

		<p>
			<cd>
			findMax(collect(big(1):big(10)))
			</cd>
		</p>

		<p>
			returns <c>10</c> (as a <c>BigInt</c>).
		</p>

		<exercise>
			<introduction>
				<p>
					Create a <c>findProduct</c> method that is parametric.
					The template (signature) for this function should be
				</p>

				<p>
					<cd>
					<cline>function findProduct(arr::Vector{T}) where T &lt;: Real</cline>
					<cline></cline>
					<cline>end</cline>
					</cd>
				</p>

				<p>
					by using a <c>for</c> loop.  Start with the line:
				</p>

				<p>
					<cd>
					<cline>local sum = one(T)</cline>
					</cd>
				</p>

				<p>
					which creates the <c>sum</c> variable as the number 1 with type <c>T</c>, so depending on the
					data type the array is, it will have the appropriate product data type.
				</p>

				<p>
					Try the function with each of the following
				</p>
			</introduction>


			<task>
				<statement>
					<p>
						<c>arr1=collect(1:10)</c>
					</p>
				</statement>
			</task>


			<task>
				<statement>
					<p>
						<c>arr2=collect(big(1):big(10))</c>
					</p>
				</statement>
			</task>


			<task>
				<statement>
					<p>
						<c>arr3=collect(3.0:4.0:56.0)</c>
					</p>
				</statement>
			</task>


			<task>
				<statement>
					<p>
						<c>arr4=collect(1:1//3:7//3)</c>
					</p>
				</statement>
			</task>
		</exercise>
	</section>

	<section>
		<title>Updating Function arguments</title>

		<p>It is important to handle arguments with care.  The scope of the arguments is where the function is called (often in the global space). For example  </p>

		<p>
			<cd>
				<cline>function g(x)</cline>
				<cline>	2*x</cline>
				<cline>end</cline>
			</cd>
		</p>
		<p>and if we make a function call like <c>g(4)</c>, then the result is <c>8</c>. </p>
	</section>
</chapter>
