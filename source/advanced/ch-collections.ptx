<?xml version="1.0" encoding="UTF-8" ?>

<chapter xml:id="ch-collections">
  <title>Collections, Sets and Dictionaries</title>

  <objectives>
    <ul>
      <li>
        <p>
          Learn that many previously-learned data structures like arrays, can be thought of more abstractly.
        </p>
      </li>

      <li>
        <p>
          Create and use a Set, a Julia type that is similar to a mathematical set, which is a collection of things without an order to them.
        </p>
      </li>

      <li>
        <p>
          Create and use a Dictionary, which is a collection of key/value pairs and tasks to perform on them.
        </p>
      </li>

      <li>
        <p>
          Create a user-defined collection by specifying an iterator, which explains how to construct the collection.
        </p>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      In <xref ref="ch-arrays"/>, we introduced an array, which is a set of things (integers, floats, strings or other) with an order to it.  We will examine many common features that together make these as an abstract notion of a collection.  Since Julia does not have classes, there isn't a formal abstract class like other languagues.  Instead, there are common methods associated with collections like an array that we will also see in the Sets and Dictionaries an important collection types.  Lastly, we will create our own abstract collection.
    </p>
  </introduction>

  <section>
    <title>Abstract Collection and Iteration</title>

    <p>
      A collection is a set of items that have a few common properties including determining how many things are in the collection, whether or not the collection is empty and a way to iterate through all of the items. The concrete objects we have seen so far in this text include arrays, tuples and ranges.  Any collection has the following functions applied to it
    </p>

    <p>
      <dl>
      <li>
        <title><c>isempty</c></title>

        <p>
          A boolean function that determines if a collection is empty.  <c>isempty([1,2,3])</c> returns <c>false</c> and <c>isempty(3:2)</c> returns true because <c>3:2</c> is a range and since the second number is smaller than the first, there are no elements in it.
        </p>
      </li>

      <li>
        <title><c>empty!</c></title>

        <p>
          This function takes a collection and removes all elements of the collection.  If <c>A=[1,2,3,4]</c> then applying <c>empty!(A)</c> results in <c>A</c> being the empty array <c>[]</c>.
        </p>
      </li>

      <li>
        <title><c>length</c></title>

        <p>
          A function that returns the number of elements in the collection.  As we've seen before <c>length([1,2,3])</c> returns 3, but note also <c>(1,2,3,4)</c> returns <c>4</c>.   <c>length(1:2:11)</c> returns 6.
        </p>

        <p>
          Note that a 2D array (Matrix) is also a collection and if <c>C=[1,2; 3, 4; 5, 6]</c> is the 3 by 2 matrix, then <c>length(C)</c> returns <c>6</c>, the total number of elements in the Matrix.  This applies also to higher dimensional arrays.
        </p>
      </li>

      <li>
        <title><c>in</c> or <c>∈</c> and the negations</title>

        <p>
          These function are boolean and determine if a single item is in or not in the collection.  For example <c>1 ∈ [1,2,3,4]</c> or <c>1 in [1,2,3,4]</c> returns <c>true</c> and <c>3 ∈ 1:3:11</c> returns false.
        </p>

        <p>
          The functions <c>notin</c> or the single character <c>∉</c> is the negation of the previous one.  The expression <c>1 ∉ [1,2,3,4]</c> returns <c>false</c>.
        </p>
      </li>
      </dl>
    </p>

    <p>
      One can access all of the elements of a collection by iterating over the elements. One simple way of doing this is with a for loop and we have seen this in <xref ref="ch-boolean-loops"/>.  For example
    </p>

    <p>
      <cd>
      <cline>for i=1:4</cline>
      <cline>  @show i</cline>
      <cline>end</cline>
      </cd>
    </p>

    <p>
      will print out (show) all of the elements in the range <c>1:4</c>. Recall also, we can use a for loop over an array like
    </p>

    <p>
      <cd>
      <cline>for i in [5, 9, 10, 2]</cline>
      <cline>  @show i</cline>
      <cline>end</cline>
      </cd>
    </p>

    <p>
      and finally, the other abstract collection we have see so far is a tuple (either named or unnamed).  We can iterate over those like
    </p>

    <p>
      <cd>
      <cline>for i in (x=3, y=4.5, z=7)</cline>
      <cline>  @show i</cline>
      <cline>end</cline>
      </cd>
    </p>

    <p>
      which results in
    </p>

    <p>
      <cd>
      <cline>i = 3</cline>
      <cline>i = 4.5</cline>
      <cline>i = 7</cline>
      </cd>
    </p>

    <p>
      Although this seems quite simple, we will see that what is going on under the hood is that anything that is a collection has a method to go through the elements one at a time in order.  This is called an <em>iterator</em>.  In fact the for loop with the range (first example above), can be translated to
    </p>


    <program language="julia" line-numbers="yes">
      <code>
range = 1:4
next = iterate(range)
while next !== nothing
    (i, state) = next
    @show i
    next = iterate(range, state)
end
      </code>
    </program>

    <p>
      and as we disccused in <xref ref="ch-boolean-loops"/> a for loop can be written as a while loop.   The important part of this is the <c>iterate</c> method that is called before the loop and within the loop.  The <c>iterate</c> function takes an iterable collection (range, array, tuple) and a state variable that in this case is just the value in the range until the iteration is finished when it returns <c>nothing</c>.
    </p>

    <p>
      All collections need to define the function <c>iterate</c> and in <xref ref="sect-user-defined-collection"/> we show an example of a user-defined collection that defines <c>iterate</c>.
    </p>
  </section>

  <section>
    <title>Sets</title>

    <p>
      A mathematical <em>set</em> is a collect of things without an order.    For example, mathematically, a set is generally written as <m>\{1,2,3\}</m> and there are important functions like union and intersection that is used.  If <m>A=\{1,2,3\}</m> and <m>B=\{3,4,5\}</m>, then <m>A \cup B = \{1,2,3,4,5\}</m> and <m>A \cap B = \{3\}</m>.  Also the sets <m>\{1,2,3\}</m> and <m>\{3,2,1\}</m> are the same in that order of the elements is not important.
    </p>

    <p>
      Julia has a <c>Set</c> is a collection that behaves the same way. If
    </p>

    <p>
      <cd>
      <cline>A=Set([1,2,3])</cline>
      <cline>B=Set([3,2,1])</cline>
      </cd>
    </p>

    <p>
      then first notice that the order of the element may be switched around on output, but if we check for equality with <c>A==B</c>, then the result is <c>true</c><fn>If we did <c>[1,2,3]==[3,2,1]</c> on arrays, the result is <c>false</c></fn>
    </p>

    <p>
      Julia also has the functions <c>union</c> and <c>intersection</c> that work on <c>Sets</c>, but also any iterators. <c>union(Set([1,2,3]),Set([3,4,5]))</c> returns <c>Set([1,2,3,4,5])</c>, but <c>union([3,4,8],3:7)</c> returns <c>[3,4,8,5,6,7]</c> and notice that in this case the order is kept.
    </p>

    <p>
      <c>Sets</c> don't need to be sets of integers.  A set of a string produces the characters.  For example, <c>Set("hello")</c> returns
    </p>

    <p>
      <cd>
      <cline>Set{Char} with 4 elements:</cline>
      <cline>  'h'</cline>
      <cline>  'l'</cline>
      <cline>  'e'</cline>
      <cline>  'o'</cline>
      </cd>
    </p>

    <p>
      and notice that is it the set of characters in the work "hello" and "l" is not repeated.
    </p>

    <p>
      Another function is the boolean version of <c>in</c> or <c>ϵ</c> that will return <c>true</c> if a element is in the set, <c>false</c> otherwise. For example if <c>A=Set([1,3,5,7,9])</c>, then <c>7 ϵ A</c> returns <c>true</c>.  There is also a not-in operator, <c>∉</c> which can be enters as <c>\notin</c> TAB and if we do <c> 4 ∉ A</c>, the result is <c>true</c>.
    </p>

    <p>
      There are other functions that can be used with sets include set difference and testing for subsets.  See <url href="https://docs.julialang.org/en/v1/base/collections/#Set-Like-Collections">the Julia documentation on sets</url> for more information.
    </p>
  </section>

  <section xml:id="sect-dictionaries">
    <title>Dictionaries</title>

    <p>
      In Julia, a <c>Dictionary</c> is more general version of a named tuple and are sets of key/value pairs.  The main difference is that a <c>Dict</c> is mutable and there are many methods that update a <c>Dict</c>.  To create a <c>Dict</c>, pass key/value pairs using "fat arrow" notation like:
    </p>

    <p>
      <cd>
      <cline>d = Dict("a"=&gt;1, "b"=&gt;2, "c" =&gt; 3)</cline>
      </cd>
    </p>

    <p>
      or alternatively, an array of tuples as key/value pairs:
    </p>

    <p>
      <cd>
      <cline>s = Dict([("bart", 10), ("lisa", 8), ("maggie", 1)])</cline>
      </cd>
    </p>

    <p>
      The getter/accessor is similar to that of an array.  <c>d["a"]</c> will return <c>1</c>, the value of the key corresponding to <c>"a"</c>. And one can set a value in the same way.  <c>d["a"] = 10</c> will update the value associated with the key "a" to be 10.  Note that this is one way that a Dictionary differs from a named tuple.  The Dictionary can be updated/mutated and a named tuple cannot.
    </p>

    <p>
      <c>push!</c> and <c>pop!</c> work with <c>Dict</c>s in a similar manner to those as arrays.  For example,
    </p>

    <p>
      <cd>
      <cline>push!(s, "homer" =&gt; 45)</cline>
      </cd>
    </p>

    <p>
      now returns the Dictionary with this entry added.  Unlike an array, <c>pop!</c> requires both the <c>Dict</c> and a key which will be returns and removed.
    </p>

    <p>
      <cd>
      <cline>pop!(s, "maggie")</cline>
      </cd>
    </p>

    <p>
      returns <c>1</c> the value that corresponds to the <c>"maggie"</c> entry and if <c>s</c> is entered, then it no longer contains this entry.
    </p>

    <p>
      The method <c>keys</c> returns an array of the keys in the Dictionary.  Since <c>"maggie"</c> is no longer there <c>keys(s)</c> returns <c>["lisa", "homer", "bart"]</c>.  The order of the keys may differ from what you see here.  It returns an iterator, but probably better thought of as a set.
    </p>

    <p>
      The method <c>values</c> returns an array of the values in the Dictionary in the same order as that of the keys.  When running <c>values(s)</c>, we get <c>[8,45,10]</c>.
    </p>

    <p>
      As mentioned above, a dictionary is a more flexible version of a named tuple.  Another example is that Dictionaries can be nested.  Consider creating a dictionary which stores contact information for a person.
    </p>


    <program language="julia" line-numbers="yes">
      <code>
homer = Dict(
  "first_name" =&gt; "Homer",
  "last_name" =&gt; "Simpson",
  "phones" =&gt; [
    "home" =&gt; "987-555-1234",
    "cell" =&gt; "987-555-1212"
  ],
  "home_address" =&gt; Dict(
    "street" =&gt; "742 Evergreen Terrace",
    "city" =&gt; "Springfield"
  ),
  "work_address" =&gt; Dict(
    "street" =&gt; "10 Power Plant Lane",
    "city" =&gt; "Springfield"
  )
)
      </code>
    </program>

    <p>
      and as you can see, the keys are all strings, but the corresponding values differ.  There are two strings, an array (of strings) and two <c>Dict</c>s.   Although this is more complex, we can still access things in a similar way.  For example <c>homer["work_address"]["street"]</c> will return <c>"10 Power Plant Lane"</c>.
    </p>

    <p>
      There are other methods that we can use with Dictionaries and <url href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries">the Julia documentation on dictionaries</url> is a good source.  Additionally in <xref ref="ch-api"/>, we will examine how to interact with a webserver that returns JSON strings which are parsed as dictionaries.  This is a common format on the internet and we will see how to handle such things in Julia.
    </p>
  </section>

  <section xml:id="sect-user-defined-collection">
    <title>User-created collections</title>

    <p>
      Although we have seen many built-in collections and there are plenty of other examples in Julia packages, it should be no surprise to note that we can create a collection.  Mainly, there are some key functions that need to be implemented on the collection.  Let's just show this with an example.
    </p>

    <p>
      In <xref ref="ch-functional-programming"/>, we looked at Fibonacci numbers as examples of recursive functions and how to implement them efficiently.  We will create a type <c>Fibonacci</c> using a <c>struct</c> like in <xref ref="ch-comp-types"/> in the following manner:
    </p>


    <program language="julia" line-numbers="yes">
      <code>
struct Fibonacci
  n::Integer
  function Fibonacci(n)
    n &gt;= 0 || throw(ArgumentError("This must be called with a nonnegative integer"))
    new(n)
  end
end
      </code>
    </program>

    <p>
      where a constructor has been used to check that only nonnegative integers are used.  As is, this is just a struct with a single field called <c>n</c>. To make this an iterator we need to implement some of the functions associated with an iterator.  We will first implement the functions <c>isempty</c> and <c>length</c> and define them as
    </p>

    <p>
      <cd>
      <cline>Base.isempty(f::Fibonacci) = f.n == 0</cline>
      <cline>Base.length(f::Fibonacci) = f.n</cline>
      </cd>
    </p>

    <p>
      and as can be seen that if we create a Fibonacci with 0 elements that it is empty and has length 0. It can be tested with <c>isempty(Fibonacci(0))</c> which returns <c>true</c> and <c>length(Fibonacci(10))</c> returns 10.
    </p>

    <p>
      So far this doesn't see to do anything related to the fibonacci numbers, but by defining the <c>iterator</c> function we can get the functionality that we desire.  If
    </p>


    <program language="julia" line-numbers="yes">
      <code>
      function Base.iterate(f::Fibonacci, state = 1)
        if state &gt; f.n
         return nothing
        end
        local (x,y) = (1,1)
        for i = 1:state-1
          x,y = (y, x+y)
        end
        (x, state + 1)
     end
      </code>
    </program>

    <p>
      where the arguments of the <c>iterate</c> function is a object of the type in question and a variable <c>state</c> which acts like an index.  The function should return <c>nothing</c> if the iteration is done and otherwise, return a tuple with the next value and increment the index/state.  Note in our case above, we have used the faster (non recursive) version of fibonacci in <xref ref="sect-fast-fibonacci"/>.
    </p>

    <p>
      There are many ways that <c>iterate</c> can be used.  For example in a for loop like
    </p>

    <p>
      <cd>
      <cline>for i in Fibonacci(10)</cline>
      <cline>  @show i</cline>
      <cline>end</cline>
      </cd>
    </p>

    <p>
      will produce the first 10 fibonacci numbers.  Also, <c>collect(Fibonacci(10))</c> will create an array of length 10 with the Fibonacci numbers or <c>[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</c>.
    </p>
  </section>

  <section>
    <title>Iterable Collection</title>

    <p>
      There are a few different types of collections in Julia.  As we discussed above, a collection can be thought of as a bunch of things.  The most general type of this is a <term>iterable collection</term>, which can be iterated over (or you can think that you can run a for loop over these).  All of the collections in this chapter (arrays, tuples, ranges, sets, dictionaries) all have this property and the Fibonacci collection is as well.
    </p>
  </section>

  <section>
    <title>Indexable Collection</title>

    <introduction>
      <p>
        Many collections are also indexable and in general if a collection is ordered, then the collection is iterable.  Vectors (and arrays in general) are indexable as are tuples, ranges and strings.  However Sets, Dicts and named tuples are not.
      </p>

      <p>
        If you have a indexable collection then <c>getindex</c> is the way to access it.  For example, if <c>A=[1,3,5,7,9]</c>, then <c>getindex(A,3)</c> returns the third element or <c>5</c>.  This is generally done with the notation <c>A[3]</c>.
      </p>

      <p>
        Related, is the <c>setindex!</c> function that assigns a value to a index.  For example, <c>setindex!(A,11,3)</c> will update the array <c>A</c> so the 3rd element has the value 11. Note: the order of the elements is that the element is the 2nd argument and the index is the 3rd one.  This is the formal method of the shorthand <c>A[3]=11</c>.
      </p>

      <note>
        <p>
          Although as discussed, strings are indexable collections, the <c>setindex!</c> method does not apply to them, since strings are immutable.
        </p>
      </note>
    </introduction>


    <subsection>
      <title>Listing of Methods for Indexable Collection</title>

      <p>
        We just saw that <c>getindex</c> and <c>setindex!</c> are applicable (and probably one of the most important methods) to such collections.  Here's some other helpful methods. For examples below, consider <c>A=[5,7,9,11,13,15]</c>.
      </p>

      <p>
        <dl>
        <li>
          <title>first</title>

          <p>
            return the first element of a collection.   <c>first(A)</c> returns <c>5</c>.
          </p>
        </li>

        <li>
          <title>last</title>

          <p>
            returns the last element of a collection.  <c>last(A)</c> returns <c>15</c>.
          </p>
        </li>

        <li>
          <title>firstindex</title>

          <p>
            returns the first index of the collection. <c>firstindex(A)</c> returns 1.  In general this is 1, but some collections may start at other indices.
          </p>
        </li>

        <li>
          <title>lastindex</title>

          <p>
            returns the last index of the collection.  <c>lastindex(A)</c> returns <c>6</c>.
          </p>
        </li>
        </dl>
      </p>
    </subsection>


    <subsection>
      <title>Indexing on other collections</title>

      <p>
        We mentioned that Sets and Dicts are not indexable.  Let's take a look at what happens if we treat it as such.  Let <c>S = Set([1,2,3,4,5])</c>.  If you run this, you will probably get the elements returned in a different order.  If you run any of the above methods on this set, you will get an error.  For example, <c>last(S)</c> returns
      </p>

      <p>
        <cd>
        <cline>MethodError: no method matching lastindex(::Set{Int64})</cline>
        <cline>The function `lastindex` exists, but no method is defined for this combination of argument types.</cline>
        </cd>
      </p>

      <p>
        This is as expected in that there are not indices associated with sets.  It's odd that if your run <c>first(S)</c> you will get an answer in that <c>firstindex(S)</c> returns a value.
      </p>

      <p>
        If we try access either <c>getindex</c>, <c>last</c> or <c>lastindex</c> of our user-defined Fibonacci collection, then we will get errors.  These seem like reasonable methods to have with this collection, so we can defined it.
      </p>

      <p>
        The <c>lastindex</c> of a Fibonacci collection should be <c>n</c> and we can defined it as
      </p>

      <p>
        <cd>
        <cline>Base.lastindex(f::Fibonacci) = f.n</cline>
        </cd>
      </p>

      <p>
        And to test this, let's define <c>f = Fibonacci(10)</c>, then <c>lastindex(f)</c> will return <c>10</c>.  Now to create the <c>getindex</c> method on this, we will use the <c>iterate</c> method that we have already created above.  Note, if we evaluate <c>iterate(f,7)</c>, then we get the tuple <c>(13, 8)</c> where the first is the 7th Fibonacci number and the second element just increments the index to 8.  We'd like <c>getindex</c> to return the first number here.   We can do this with
      </p>

      <p>
        <cd>
        <cline>function Base.getindex(f::Fibonacci, i::Int) </cline>
        <cline>  0 &lt; i &lt;= f.n || throw(ArgumentError("The index must be between 1 and $(f.n)"))</cline>
        <cline>  iterate(f,i)[1]</cline>
        <cline>end</cline>
        </cd>
      </p>

      <p>
        Now, we can access any element up to the last Fibonacci number.  For example, if we redefine <c>f = Fibonacci(1000)</c> and then find the 999th fibonnacii number, as <c>f[999]</c> which returns <c>8261794739546030242</c>.  Also <c>last(f)</c> is now defined and returns <c>817770325994397771</c>.
      </p>

      <p>
        We can also leverage other methods of iterable collection that are typically associated with vectors and arrays.  Consider the <c>findfirst</c> method which takes a boolean function and a collection and returns the index of the first element that satsifies the first.  Consider finding the first Fibonacci number greater than 1000.  We'd like to do this with <c>findfirst(x -&gt; x &gt; 1000, f)</c>, however evaluating this returns
      </p>

      <p>
        <cd>
        <cline>MethodError: no method matching keys(::Fibonacci)</cline>
        <cline>The function `keys` exists, but no method is defined for this combination of argument types. </cline>
        </cd>
      </p>
      <p>
        indicating that under the scene, the <c>keys</c> method (that we saw associated with named tuples and Dicts) is used.  The keys for the fibonacci will be all of the numbers 1 to <c>n</c>, therefore we can define
      </p>
      <p>
        <cd>
          <cline>Base.keys(f::Fibonacci) = 1:f.n</cline>
        </cd>
      </p>
      <p>
        and then running <c>findfirst(x -&gt; x &gt; 1000, f)</c> returns <c>17</c> indicating that the 17th Fibonacci number is greater than 1000.  And the value is <c>f[17]</c> or 1597.
      </p>
    </subsection>
  </section>

  <section>
    <title>Summary of Abstract Collections</title>

    <p>
      We have seen objects like arrays, ranges and tuples have a common structure that allows one to iterate over its elements.  We have also seen other objects like Sets and Dictionaries that fall into abstract collections as well.  Finally, we saw an example how to write our own abstract collection by defining a struct as well as defining functions of that struct that make it act like an iterator.
    </p>
  </section>
</chapter>
