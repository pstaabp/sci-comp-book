<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-plotting-makie">
  <title>Using Makie for Plots</title>

  <introduction>
    <p>
      As discussed in <xref ref="ch-plotting-basics"/>, one of the main plotting environments for Julia is Makie, a relatively new plotting environment that had a goal to develop a completely Julia-based environment that was designed to "create publication-quality vector graphics, animated movies and interactive data exploration tools. Most options that are available today lack one or more of the following attributes:" (cite Makie paper).
    </p>
  </introduction>

  <section>
    <title>Basic Plotting</title>

    <p>
      Before plotting, make sure that you have the packages <c>Makie</c> and <c>CairoMakie</c> installed.  The package <c>CairoMakie</c> is the backend package that does the plotting using the common interface (API) in the <c>Makie</c> package.  Once the <c>CairoMakie</c> package is install, to set this to the Makie backend enter:
    </p>

    <p>
      <cd>
      <cline>using Makie, CairoMakie</cline>
      <cline>CairoMakie.activate!()</cline>
      <cline>Makie.inline!(true)</cline>
      </cd>
    </p>

    <p>
      where the 3rd line above will allow the plots to appear inside a notebook interface instead of as a separate window. As an example, we'll the <c>scatter</c> command on a pair of vectors.
    </p>

    <p>
      <cd>
      <cline>scatter(1:10, 3.2,-4.5,7.8,4.2,-2.0,5.4,7.8,-2.4,-3.1,3.9])</cline>
      </cd>
    </p>

    <p>
      which results in the plot
    </p>

    <figure xml:id="fig-makie-scatter">
      <caption>Scatter plot of some sample data</caption>
      <image source="plots/plots/makie-scatter.png" width="90%">
        <shortdescription>
          Scatter plot of points with x values between 1 and 10 and y values between -5 and 8.
        </shortdescription>
      </image>
    </figure>

    <p>
      If instead we wish to make a line plot (connect the points by lines), simply use the <c>lines</c> function as in
    </p>

    <p>
      <cd>
      <cline>lines(1:10, 3.2,-4.5,7.8,4.2,-2.0,5.4,7.8,-2.4,-3.1,3.9])</cline>
      </cd>
    </p>

    <p>
      resulting in
    </p>

    <figure xml:id="fig-makie-lines">
      <caption>Line plot of some sample data</caption>
      <image source="plots/plots/makie-lines.png" width="90%">
        <shortdescription>
          Line plot of points with x between 1 and 10 and y between -5 and 8.
        </shortdescription>
      </image>
    </figure>

    <p>
      to create a function plot, we can use either <c>scatter</c> or <c>lines</c> but typically use a line plot.  For example
    </p>

    <p>
      <cd>
      <cline>lines(0..2pi, sin)</cline>
      </cd>
    </p>

    <p>
      and if the presence of <c>sin</c> by itself in the function seems odd to you, one can use <c>lines(0..2pi, x -&gt; sin(x))</c> that is an anonymous function notation instead.  The first argument is a plotting range explained below. The result is
    </p>

    <figure xml:id="fig-makie-function">
      <caption>Plot of <m>\sin(x)</m> from 0 to 2<m>\pi</m>.</caption>
      <image source="plots/plots/makie-function.png" width="90%">
        <shortdescription>
          Plot of sin(x) from 0 to 2pi.
        </shortdescription>
      </image>
    </figure>

    <p>
      Typically it would be nice to use units of <m>\pi</m> for the x-axis labels, and we will be able to do that later.
    </p>

    <p>
      You may have noticed that for the function plot above, the first argument is <c>0..2pi</c>.  We haven't seen this structure before.  Entering <c>typeof(0..2pi)</c> results in
    </p>

    <p>
      <cd>
      <cline>ClosedInterval{Float64} (alias for IntervalSets.Interval{:closed, :closed, Float64})</cline>
      </cd>
    </p>

    <p>
      indicating that this structure is part of the <c>IntervalsSets</c> package (that is a dependency of <c>Makie</c>).  This makes plotting functions quite nice.
    </p>
  </section>

  <section xml:id="sect-layout-makie">
    <title>Figures and Grid Layout in Makie</title>

    <p>
      Before delving into more of the plotting types in Makie, we will first look at layout and axes, a strength of this package and also shows how to build a plot step by step.  Note: for simple plots, we can generally just call the plotting routine, however adding multiple plots or changing axis labels, it is easier to build a plot as explained here.
    </p>

    <p>
      First, a plot needs a <c>Figure</c> container and this can be created with:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      </cd>
    </p>

    <p>
      And upon running this, you will see an empty figure (white square) that we need to add things to.  Although this is not so interesting, it is important.  There are many things that happen when creating a figure, but most importantly, there is a grid layout that is created.  To place items in the grid, typically plots need to occur on axes, so we will place axes in a layout with row/column indexing.  For example
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax1 = Axis(fig[1,1], title = "Axis 1")</cline>
      <cline>ax2 = Axis(fig[2,1], title = "Axis 2")</cline>
      <cline>ax3 = Axis(fig[1,2], title = "Axis 3")</cline>
      <cline>ax4 = Axis(fig[2,2], title = "Axis 4")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      Overall the output of this is
    </p>

    <figure xml:id="fig-makie-layout">
      <caption>2 by 2 grid layout of a figure with 4 axes. </caption>
      <image source="plots/makie/layout.png" width="90%">
        <shortdescription>
          A figure with four axes in a 2 by 2 grid, labelled "Axis 1", "Axis 3", "Axis 4" and "Axis 2" clockwise from the upper left.
        </shortdescription>
      </image>
    </figure>

    <p>
      and you should notice many things.  We can add a Axis to a plot (or four of them) without any plot within them.  We will learn how to add a plot to an axis below.  Above, the axes were placed by adding a row and column to the <c>fig</c> (Figure) above  where the row and column is used in an array like notation.  Notice that <c>fig[1,2]</c> places the axis in the first row, second column.  Also, the default plotting window (limits) for an Axis is between 0 and 10.
    </p>

    <p>
      If you have multiple plots in the same figure, then generally a simple grid layout will work, however, Makie has the ability to nest axes as well.  For example:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax1 = Axis(fig[1,1], title = "Axis 1")</cline>
      <cline>ax2 = Axis(fig[2,1][1,1], title = "Axis 2")</cline>
      <cline>ax3 = Axis(fig[2,1][1,2], title = "Axis 3")</cline>
      <cline>ax4 = Axis(fig[2,1][1,3], title = "Axis 4")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      will produce the following layout where the 2nd row has nested axes.
    </p>

    <figure xml:id="fig-layout-nested">
      <caption>A grid layout with one axis on the first row and 3 in the second row.</caption>
      <image source="plots/makie/layout-nested.png" width="90%">
        <shortdescription>
          A grid layout with one axis on the first row and 3 in the second row. The top row axis is labelled "Axis 1" and the bottom three are labelled "Axis 2", "Axis 3" and "Axis 4" from left to right.
        </shortdescription>
      </image>
    </figure>

    <p>
      Notice that to nest axes, we add an additional row/column specification.  For example, <c>fig[2,1][1,2]</c> means first place this in the 2nd row and 1st column of the overall layout and then within that cell, place in the first row, second column.
    </p>

    <p>
      Alternatively, the following will also create the same result:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax1 = Axis(fig[1,1:3], title = "Axis 1")</cline>
      <cline>ax2 = Axis(fig[2,1], title = "Axis 2")</cline>
      <cline>ax3 = Axis(fig[2,1], title = "Axis 3")</cline>
      <cline>ax4 = Axis(fig[2,1], title = "Axis 4")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      where the <c>fig[1,1:3]</c> on the first Axis object to place it in the 1st row and stretch it across the first 3 columns.
    </p>
  </section>

  <section xml:id="sec-makie-axis">
    <title>Axis Options</title>

    <p>
      We saw above how to place an <c>Axis</c> object inside a <c>Figure</c>.  Upon creating the <c>Axis</c>, we can give other options.  We will cover some of the important ones here, and then refer to the documentation.  The first option to an <c>Axis</c> is a <c>title</c> that we saw above. Just pass the title in as a string.  Other basic options are the <c>xlabel</c> and <c>ylabel</c>.  The following code
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1], title = "My Plot", xlabel = "x label", ylabel = "ylabel")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      results in
    </p>

    <figure xml:id="fig-xylabels">
      <caption>An empty plot with values for the title, xlabel and ylabel.</caption>
      <image source="plots/makie/xylabels.png" width="90%">
        <shortdescription>
          An empty plot with title "My Plot", xlabel of "x label" and ylabel as "y label".
        </shortdescription>
      </image>
    </figure>

    <p>
      Setting the limits on the axes is done with the <c>limits</c> option.  For example:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1], limits = (-5,5,0,20))</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      and notice the last line above or <c>fig</c> will show the figure.  Nothing will be shown if this isn't there. The result is
    </p>

    <figure xml:id="fig-limits">
      <caption>An empty plot with updated limits.</caption>
      <image source="plots/makie/limits.png" width="90%">
        <shortdescription>
          An empty plot with limits in the x-direction from -5 to 5 and in the y-direction from 0 to 20.
        </shortdescription>
      </image>
    </figure>

    <p>
      where the specification is <c>limits = (xmin, xmax, ymin, ymax)</c>.
    </p>

    <p>
      There are plenty of other options available for an <c>Axis</c>.  See the <url href="https://docs.makie.org/stable/reference/blocks/axis">documentation on Axis</url> for more information.  One big thing to note is the separation of axis options (anything that isn't a plot) should be done to the <c>Axis</c> object, whereas as we will see below, changes to the plot will go on the individual plotting function.  We will see other examples of this below.
    </p>
  </section>

  <section>
    <title>Adding Plots to Axes</title>

    <introduction>
      <p>
        Even though we can do some elaborate layout of axes, we haven't done any plotting on them.  In fact, there are two ways to plot via Makie.  First, as we saw above, we can use plotting functions like <c>lines</c> or <c>scatter</c> to make plots.  This is fine for relatively simple plots or just for a quick plot using defaults.  If we desire additional features to a plot, generally we will create <c>Figure</c>s and <c>Axis</c> objects and the add plots to them with commands like <c>lines!</c> or <c>scatter!</c> (note the !).  Recall that convention in Julia is if an argument is being modified that the name should end in a <c>!</c>.
      </p>

      <p>
        Let's repeat the scatter plot at the top of this chapter.  If we do:
      </p>

      <p>
        <cd>
        <cline>y = [3.2,-4.5,7.8,4.2,-2.0,5.4,7.8,-2.4,-3.1,3.9]</cline>
        <cline>fig = Figure()</cline>
        <cline>ax = Axis(fig[1,1], limits = (0,11,-10,10))</cline>
        <cline>scatter!(ax, x, y)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        where we have set the limits to make them symmetric above and below the <m>x</m>-axis.
      </p>

      <figure xml:id="fig-scatter2">
        <caption>A scatter plot with sample data in which the limits have been updated. </caption>
        <image source="plots/makie/scatter2.png" width="90%">
          <shortdescription>
            A scatter plot with sample data in which the limits are from 0 to 11 in the x-direction and from -10 to 10 in the y-direction.
          </shortdescription>
        </image>
      </figure>

      <p>
        This is the way to include either multiple function plot or a scatter and function plot on the same axes.  Consider the scatter plot from <xref ref="ch-plotting-basics"/> which is the data from CO₂ levels.  We can add an exponential function to them as well in the following way.<fn>The data is available <url href="https://gml.noaa.gov/aftp/products/trends/co2/co2_annmean_mlo.csv">at this NOAA webpage</url> and should be downloaded and saved in the same directory as your Julia notebook. </fn>.
      </p>


      <program language="julia" line-numbers="yes">
        <input>
          fig = Figure()
          ax = Axis(fig[1,1])
          scatter!(ax, co2.year, co2.mean)
          lines!(ax, 1959..2023,t -&gt; exp(5.735 + 0.00454*(t-1959)), color = :green)
          fig
        </input>
      </program>

      <p>
        resulting in the following.
      </p>

      <figure xml:id="fig-co2-fit">
        <caption>A scatter plot of CO₂ data and an exponential fit. </caption>
        <image source="plots/makie/co2-scatter-fit.png" width="90%">
          <shortdescription>
            A scatter plot with an exponential increase from 320 ppm in 1960 to 420 in 2023 together with an exponential function that closely follows the points.
          </shortdescription>
        </image>
      </figure>

      <p>
        The exponential was found in a way similar to that of fitting curves in <xref ref="ch-algorithm-analysis"/>.
      </p>
    </introduction>


    <subsection>
      <title>Placing plots on different axes</title>

      <p>
        Above, we saw adding different axes to a Figure by placing Axis objects in a grid.  We can add plots to these axes using the <c>scatter!</c> or <c>lines!</c> methods where the first argument is the axis number where we wish to place the plot.  As an example:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
fig = Figure()
ax1 = Axis(fig[1,1], title="Axis 1")
ax2 = Axis(fig[2,1][1,1], title = "Axis 2")
ax3 = Axis(fig[2,1][1,2], title = "Axis 3")
lines!(ax1, 0..10,sin)
lines!(ax2, 0..10, t-&gt; 10*exp(-t))
scatter!(ax3,0:10,10*rand(11))
fig
        </input>
      </program>

      <p>
        and the result is
      </p>

      <figure xml:id="fig-multi-plot">
        <caption></caption>
        <image source="plots/makie/multi-plots.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>


    <subsection>
      <title>Alternative for Layout</title>

      <p>
        In some cases, creating a Figure and an Axis object is overkill to do some things that we wish.  If we are plotting two functions on the same axes, we will see that we can get the needed information to plot additional plots.  Consider
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(0..2pi,sin)</cline>
        </cd>
      </p>

      <p>
        which will produce the following plot:
      </p>

      <figure xml:id="fig-poly-sine">
        <caption></caption>
        <image source="plots/makie/sine.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        The left hand side of the assignment operator is <c>fig, ax</c>, which returns the created Figure and Axis objects when making a plot.  This allows us to add other plots to the same axes without explicitly making an axis object. Adding another plot to the one above is now relatively easy:
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(0..2pi,sin)</cline>
        <cline>lines!(ax, 0..2pi,cos)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        and recall that you need to echo <c>fig</c> to get the plot to show. The result is
      </p>

      <figure xml:id="fig-poly-sine-cosine">
        <caption></caption>
        <image source="plots/makie/sine-cosine.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        There is also an example using this technique below to add a colorbar to a filled contour plot.
      </p>
    </subsection>


    <subsection xml:id="sect-makie-legend">
      <title>Adding a Legend</title>

      <p>
        The example above with the sine and cosine curves beg the question of how to add a legend to a plot, which is usually a given when there are multiple plots on a given set of axes.   We can do this with the example above by giving each curve a label and then adding a Legend to the Figure.  The following will do this:
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(0..2pi, sin, label="sin(x)")</cline>
        <cline>lines!(ax,0..2pi, cos, label="cos(x)")</cline>
        <cline>Legend(fig[1,2], ax)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        where first notice that we have added a <c>label</c> to each curve as a string and then the 3rd line will create a Figure and place it to the right of the plot (because of the <c>fig[1,2]</c>).  The resulting plot is
      </p>

      <figure xml:id="fig-legend01">
        <caption></caption>
        <image source="plots/makie/legend01.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        We can still use the method of creating Figures and Axis objects above to create this as well.  The following will produce the same plot:
      </p>

      <p>
        <cd>
        <cline>fig = Figure()</cline>
        <cline>ax = Axis(fig[1,1])</cline>
        <cline>lines!(ax, 0..2pi, sin, label="sin(x)")</cline>
        <cline>lines!(ax, 0..2pi, cos, label="cos(x)")</cline>
        <cline>Legend(fig[1,2],ax)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        If instead you want a legend that sits inside the axis, we can use the <c>axislegend</c> method.
      </p>


      <program language="julia" line-numbers="yes">
        <input>
fig, ax = lines(0..2pi,sin,label="sin(x)")
lines!(ax,0..2pi,cos, label="cos(x)")
axislegend(ax)
fig
        </input>
      </program>

      <p>
        which produces the plot:
      </p>

      <figure xml:id="fig-legend02">
        <caption></caption>
        <image source="plots/makie/legend02.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        The location of the legend isn't great in this situation.  One can add the <c>location</c> option to the <c>axislegend</c> method which is a symbol of two characters, the first being "l", "r" or "c" for left, right or center for the horizontal placement and the second being "t", "b" or "c" for top, bottom or center for the vertical placement.  Alternatively, it can be set as a tuple that is interpreted as the horizontal and vertical location as fractions from the lower left.  To slide the legend box over just a bit we can use
      </p>


      <program language="julia" line-numbers="yes">
        <input>
fig, ax = lines(0..2pi,sin,label="sin(x)")
lines!(ax,0..2pi,cos, label="cos(x)")
axislegend(ax, position = (0.8, 1))
fig
        </input>
      </program>
      <p>and the result is </p>

         <figure xml:id="fig-legend03">
        <caption></caption>
        <image source="plots/makie/legend03.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>
  </section>

  <section>
    <title>Contour Plots</title>

    <p>
      As mentioned in <xref ref="ch-plotting-basics"/>, a contour plot is generally used for functions of two variable, like <m>f(x,y)</m> and the plot is curves of constant function value or <m>f(x,y)=C</m> for various values of <m>C</m>.  As in the previous chapter, we will plot
    </p>

    <p>
      <me>
        f(x,y) = \sin\left(\frac{1}{2}x^2-\frac{1}{4}y^2+2\right)\cos(x+y)
      </me>
    </p>

    <p>
      and can do this with the following code:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>fig = contour(x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y))</cline>
      </cd>
    </p>

    <p>
      which results in the plot:
    </p>

    <figure xml:id="fig-contour-1">
      <caption></caption>
      <image source="plots/makie/contour1.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      And recall that a contour plot is basically like a topographical map if you have ever used one of those.  The concentric circles are either a hill (maximum) or a depression (minimum) and unless we know what function values, we're not sure which is why.  To help with this we will add labels to the contours and increase the number of contours used with the <c>levels</c> attribute.
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>contour( x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), labels = true, levels = 11)</cline>
      </cd>
    </p>

    <p>
      and this results in
    </p>

    <figure xml:id="fig-contour-2">
      <caption></caption>
      <image source="plots/makie/contour2.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      and you can see from the values of the contours that there is a minimum near <m>(1,2)</m> and a maximum near <m>(2.5,0.8)</m>
    </p>

    <p>
      Another related plot is that of a filled contour plot in which the regions between contours are filled with colors.  This is more of a visually nice feature rather than an important distinction over the previous contour plot.  A filled contour plot can be created with the <c>contourf</c> plotting command as in this example:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>contourf( x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), labels = true, levels = 11)</cline>
      </cd>
    </p>

    <p>
      resulting in
    </p>

    <figure xml:id="fig-contourf-1">
      <caption></caption>
      <image source="plots/makie/contourf.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      And since the colors play an important role in a filled contour plot, it is helpful to know the function values for a give color and using a colorbar is a way to do this.  We can add a colorbar with the following code:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1])</cline>
      <cline>contourf!(ax, x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), levels = 11)</cline>
      <cline>Colorbar(fig[1,2])</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      where we have used the layout methods described in <xref ref="sect-layout-makie"/> because we need to specify where the colorbar goes. The result of this is
    </p>

    <figure xml:id="fig-contourf-2">
      <caption></caption>
      <image source="plots/makie/contourf1.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>
  </section>

  <section>
    <title>Vector Field and Stream plots</title>

    <p>
      There are a number of types of plots that display the direction of flow of a function.  This section goes over a few of these.
    </p>

    <p>
      First, consider a vector field which is is a pair of functions of <m>x</m> and <m>y</m> often written as <m>\vec{v} = \langle F(x,y), G(x,y) \rangle</m>.  For any point in the plane <m>(x,y)</m>, the vector <m>\vec{v}</m>  is a vector. For example, consider <m>v=\langle y, -x \rangle</m>. We first start with the <c>arrows</c> method:
    </p>

    <p>
      <cd>
      <cline>xpts = ypts = LinRange(-3,3,11)</cline>
      <cline>u = [y for x in xpts, y in ypts]</cline>
      <cline>v = [-x for x in xpts, y in ypts]</cline>
      <cline>arrows(xpts,ypts,u,v)</cline>
      </cd>
    </p>

    <p>
      results in the following plot:
    </p>

    <figure xml:id="fig-arrows01">
      <caption></caption>
      <image source="plots/makie/arrows01.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      This is a bit hard to read because the arrows overlap.  This is mainly because the arrow length are exactly the size of the vector field at the point.  For example at <m>(1,2)</m>, the vector is <m>\vec{v} = \langle 2, -1 \rangle</m> and the length of this is <m>\sqrt{5}\approx 2.23.</m>, which overlaps nearby arrows.  One inital way to address this is to set the <c>lengthscale</c> attribute.  Consider the following:
    </p>

    <p>
      <cd>
      <cline>fig = arrows(xpts,ypts,u,v, lengthscale = 0.25)</cline>
      </cd>
    </p>

    <p>
      which creates the following plot:
    </p>

    <figure xml:id="fig-arrows02">
      <caption></caption>
      <image source="plots/makie/arrows02.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      Another way to handle this is to produce a <em>direction field</em> which normalizes all of the arrows to make them the same length to do this, we add the <c>str = sqrt.(u .^ 2 .+ v .^ 2)</c> and then divide both <c>u</c> and <c>v</c> by this variable as in
    </p>

    <p>
      <cd>
      <cline>arrows(xpts,ypts,u./str,v./str, lengthscale = 0.4)</cline>
      </cd>
    </p>

    <p>
      which produces the plot:
    </p>

    <figure xml:id="fig-poly-arrow03">
      <caption></caption>
      <image source="plots/makie/arrow03.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      Since Makie is very good with color, there are some options to make this a bit more colorful.  The <c>arrowcolor</c> and <c>linecolor</c> can be used with the <c>str</c> variable to give each arrow a color.  The following:
    </p>

    <p>
      <cd>
      <cline>arrows(xpts,ypts,u./str,v./str, lengthscale = 0.4, arrowcolor = vec(str), linecolor = vec(str))</cline>
      </cd>
    </p>

    <p>
      will produce the following plot:
    </p>

    <figure xml:id="fig-arrow04">
      <caption></caption>
      <image source="plots/makie/arrow04.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      Note that the <c>str</c> variable is a Matrix and both <c>arrowcolor</c> and <c>linecolor</c> can take a color, but also a vector of values.  This is why the <c>str</c> variable is wrapped in the <c>vec</c> method.
    </p>

    <p>
      A <term>streamplot</term> is related to a vector field plot (arrow plot) in that the arrows follow along continuous curves that are also plotted.  A difference for plotting these in Makie is that instead of building the vector field, that the function is given and then plotted on the given plotting domain.  We will plot the same field above with:
    </p>

    <p>
      <cd>
      <cline>streamplot(x-&gt;Point2f(x[2], -x[1]), -2..2, -2..2)</cline>
      </cd>
    </p>

    <p>
      which produces the following:
    </p>

    <figure xml:id="fig-stream01">
      <caption></caption>
      <image source="plots/makie/stream01.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      Note that the first argument of the <c>streamplot</c> is a function of <c>x</c> a vector to a <c>Point2f</c> object.
    </p>
  </section>

  <section>
    <title>Updating axis elements in a shorthand manner</title>

    <p>
      As we have seen above, updating information from an axis requires setting options on the axis object.  We have accomplished this by first making a Figure and then an Axis object and finally adding plots to the axis.  This is sometimes overkill.  In this section, we will see an alternative if the options are short.
    </p>

    <p>
      For example, let's produce a function plot and put a title on it. For example,
    </p>


    <program language="julia" line-numbers="yes">
      <input>
fig = Figure()
ax = Axis(fig[1,1], title = L"A graph of $x^2$")
lines!(ax, -2..2, x -&gt; x^2)
fig
      </input>
    </program>

    <p>
      which produces the plot
    </p>

    <figure xml:id="fig-makie-xsq01">
      <caption></caption>
      <image source="plots/makie/xsq01.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      Alternatively, one can add an <c>axis</c> attribute to the <c>lines</c> method to do the same as in
    </p>

    <p>
      <cd>
      <cline>lines(-2..2,x -&gt; x^2, axis = (title = L"A plot of $x^2$",))</cline>
      </cd>
    </p>

    <p>
      which produces the same plot as above.
    </p>

    <note>
      <p>
        An astute eye notices the comma after the string that is the <c>title</c> option.  This is not a typo.  Try removing it and you'll see an error.  Why is that needed then?
      </p>

      <p>
        The <c>axis</c> keyword option to the <c>lines</c> function needs to be a named tuple.  Without the comma, try to create a named tuple with one element with
      </p>

      <p>
        <cd>
        <cline>(a = "string")</cline>
        </cd>
      </p>

      <p>
        the output is <c>"string"</c>, it doesn't appear to be a tuple.  What the above has done is just assign the string "string" to the variable <c>a</c>.  To create this as a tuple a comma is needed as in <c>(a = "string",)</c> and the result is the desired output.
      </p>
    </note>
  </section>

  <section>
    <title>Backends for Makie</title>

    <p>
      As described in <xref ref="sect-plotting-backends"/>, Makie is a set of high level plotting commands.  The hard work of drawing lines, circles and regions on the screen is done with a backend and the idea is to be able to switch backends easily without changing the high-level code to produce a plot.  Makie has four such options currently: <c>CairoMakie</c>, <c>GLMakie</c>, <c>WGLMakie</c> and <c>RPRMakie</c> and you should have seen the first two appear above in the plotting code.
    </p>

    <p>
      <dl>
      <li>
        <title>CairoMakie</title>

        <p>
          <c>CairoMakie</c> uses the <c>Cairo</c> drawing engine underneath and excels at high-quality 2D drawings that are non-interactive. The output in generally either an SVG or PDF and since these are vector-based drawing formats, these will produce high-quality graphs for print (and the screen).
        </p>
      </li>

      <li>
        <title>GLMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/glmakie" visual="docs.makie.org">GLMakie documentation page</url>,
        </p>

        <blockquote>
          <p>
            GLMakie is the native, desktop-based backend, and is the most feature-complete. It requires an OpenGL enabled graphics card with OpenGL version 3.3 or higher.
          </p>
        </blockquote>

        <p>
          It appears that almost all graphics cards support OpenGL and thus GLMakie should work for nearly all computers.
        </p>
      </li>

      <li>
        <title>RPRMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/rprmakie" visual="docs.makie.org">RPRMakie page</url>:
        </p>

        <blockquote>
          <p>
            Experimental ray tracing backend using AMDs RadeonProRender. While it's created by AMD and tailored to Radeon GPUs, it still works just as well for NVidia and Intel GPUs using OpenCL. It also works on the CPU and even has a hybrid modus to use GPUs and CPUs in tandem to render images.
          </p>
        </blockquote>
      </li>

      <li>
        <title>WGLMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/wglmakie" visual="docs.makie.org">WGLMakie page</url>:
        </p>

        <blockquote>
          <p>
            WGLMakie is the web-based backend, which is mostly implemented in Julia right now. WGLMakie uses Bonito to generate the HTML and JavaScript for displaying the plots. On the JavaScript side, we use ThreeJS and WebGL to render the plots. Moving more of the implementation to JavaScript is currently the goal and will give us a better JavaScript API, and more interaction without a running Julia server.
          </p>
        </blockquote>
      </li>
      </dl>
    </p>
  </section>
</chapter>
