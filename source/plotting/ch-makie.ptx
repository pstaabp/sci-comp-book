<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-plotting-makie">
  <title>Using Makie for Plots</title>

  <introduction>
    <p>
      As discussed in <xref ref="ch-plotting-basics"/>, one of the main plotting environments for Julia is Makie, a relatively new plotting environment that had a goal to develop a completely Julia-based environment that was designed to "create publication-quality vector graphics, animated movies and interactive data exploration tools. Most options that are available today lack one or more of the following attributes:" (cite Makie paper).
    </p>
  </introduction>

  <section>
    <title>Basic Plotting</title>

    <p>
      Before plotting, make sure that you have the packages <c>Makie</c> and <c>CairoMakie</c> installed.  The package <c>CairoMakie</c> is the backend package that does the plotting using the common interface (API) in the <c>Makie</c> package.  To get started enter
    </p>

    <p>
      <cd>
      <cline>using Makie, CairoMakie</cline>
      <cline>CairoMakie.activate!()</cline>
      <cline>Makie.inline!(true)</cline>
      </cd>
    </p>

    <p>
      and to get a plot, we can use the <c>scatter</c> command and let's first define the arrays:
    </p>

    <p>
      <cd>
      <cline>x=1:10</cline>
      <cline>y=[3.2,-4.5,7.8,4.2,-2.0,5.4,7.8,-2.4,-3.1,3.9]</cline>
      <cline>scatter(x,y)</cline>
      </cd>
    </p>

    <p>
      which results in the plot
    </p>

    <figure xml:id="fig-makie-scatter">
      <caption>Scatter plot of some sample data</caption>
      <image source="plots/plots/makie-scatter.png" width="90%">
        <shortdescription>
          Scatter plot of points with x between 1 and 10 and y between -5 and 8.
        </shortdescription>
      </image>
    </figure>

    <p>
      If instead we wish to make a line plot (connect the points by lines), simply use the <c>lines</c> function as in
    </p>

    <p>
      <cd>
      <cline>lines(x,y)</cline>
      </cd>
    </p>

    <p>
      resulting in
    </p>

    <figure xml:id="fig-makie-lines">
      <caption>Line plot of some sample data</caption>
      <image source="plots/plots/makie-lines.png" width="90%">
        <shortdescription>
          Line plot of points with x between 1 and 10 and y between -5 and 8.
        </shortdescription>
      </image>
    </figure>

    <p>
      to create a function plot, we can use either <c>scatter</c> or <c>lines</c> but typically use a line plot.  For example
    </p>

    <p>
      <cd>
      <cline>lines(0..2pi, sin)</cline>
      </cd>
    </p>

    <p>
      and if the prescence of <c>sin</c> by itself in the function, one can use <c>lines(0..2pi, x -&gt; sin(x))</c> instead.  The result is
    </p>

    <figure xml:id="fig-makie-function">
      <caption>Plot of <m>\sin(x)</m> from 0 to 2<m>\pi</m>.</caption>
      <image source="plots/plots/makie-function.png" width="90%">
        <shortdescription>
          Plot of sin(x) from 0 to 2pi.
        </shortdescription>
      </image>
    </figure>

    <p>
      Typically it would be nice to use units of <m>\pi</m> for the x-axis labels, and we will be able to do that later.
    </p>

    <p>
      You may have noticed that for the function plot above, the first argument is <c>0..2pi</c>.  We haven't seen this structure before.  Entering <c>typeof(0..2pi)</c> results in
    </p>

    <p>
      <cd>
      <cline>ClosedInterval{Float64} (alias for IntervalSets.Interval{:closed, :closed, Float64})</cline>
      </cd>
    </p>

    <p>
      indicating that this structure is part of the <c>IntervalsSets</c> package (that is a dependency of <c>Makie</c>).  This makes plotting functions quite nice.
    </p>
  </section>

  <section xml:id="sect-layout-makie">
    <title>Figures and Grid Layout in Makie</title>

    <p>
      Before delving into more of the plotting types in Makie, we will first look at layout and axes, a strength of this package and also shows how to build a plot step by step.  First, a plot need a <c>Figure</c> container and this can be created with:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      </cd>
    </p>

    <p>
      And upon running this, you will get a blank/empty Figure.  This is not so interesting, but important.  There are many things that happen when creating a figure, but most importantly, there is a grid layout that is created.  To place items in the grid, typically plots need to occur on axes, so we will place axes in a layout with row/column indexing.  For example
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax1 = Axis(fig[1,1], title = "Axis 1")</cline>
      <cline>ax2 = Axis(fig[2,1], title = "Axis 2")</cline>
      <cline>ax3 = Axis(fig[1,2], title = "Axis 3")</cline>
      <cline>ax4 = Axis(fig[2,2], title = "Axis 4")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      and the output of this is
    </p>

    <figure xml:id="fig-makie-layout">
      <caption>2 by 2 grid layout of a figure with 4 axes. </caption>
      <image source="plots/makie/layout.png" width="90%">
        <shortdescription>
          A figure with four axes in a 2 by 2 grid, labelled "Axis 1", "Axis 3", "Axis 4" and "Axis 2" clockwise from the upper left.
        </shortdescription>
      </image>
    </figure>

    <p>
      and you should notice many things.  We can add a Axis to a plot (or four of them) without any plot within them.  We will learn how to add a plot to an axis below.  Above, the axes were placed by adding a row and column to the <c>fig</c> (Figure) above.  For example, the Axis labeled as <c>Axis 2</c> is placed in the second row and first column.  Also, the default plotting window (limits) for an Axis is between 0 and 10.
    </p>

    <p>
      If you have multiple plots in the same figure, then generally a simple grid layout will work, however, Makie has the ability to nest axes as well.  For example:
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax1 = Axis(fig[1,1], title = "Axis 1")</cline>
      <cline>ax2 = Axis(fig[2,1][1,1], title = "Axis 2")</cline>
      <cline>ax3 = Axis(fig[2,1][1,2], title = "Axis 3")</cline>
      <cline>ax4 = Axis(fig[2,1][1,3], title = "Axis 4")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      will produce the following layout where the 2nd row has nested axes.
    </p>

    <figure xml:id="fig-layout-nested">
      <caption>A grid layout with one axis on the first row and 3 in the second row.</caption>
      <image source="plots/makie/layout-nested.png" width="90%">
        <shortdescription>
          A grid layout with one axis on the first row and 3 in the second row. The top row axis is labelled "Axis 1" and the bottom three are labelled "Axis 2", "Axis 3" and "Axis 4" from left to right.
        </shortdescription>
      </image>
    </figure>

    <p>
      Notice that to nest axes, we add an additional row/column specification.  For example, <c>fig[2,1][1,2]</c> means first place this in the 2nd row and 1st column of the overall layout and then within that cell, place in the first row, second column.
    </p>
  </section>

  <section xml:id="sec-makie-axis">
    <title>Axis Options</title>

    <p>
      We saw above how to place an <c>Axis</c> object inside a <c>Figure</c>.  Upon creating the <c>Axis</c>, we can give other options.  We will cover some of the important ones here, and then refer to the documentation.  The first option to an <c>Axis</c> is a <c>title</c> that we saw above. Just pass the title in as a string.  Other basic options are the <c>xlabel</c> and <c>ylabel</c>.  The following code
    </p>

    <p>
      <cd>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1], title = "My Plot", xlabel = "x label", ylabel = "ylabel")</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      results in
    </p>

    <figure xml:id="fig-xylabels">
      <caption>An empty plot with values for the title, xlable and ylabel.</caption>
      <image source="plots/makie/xylabels.png" width="90%">
        <shortdescription>
          An empty plot with title "My Plot", xlabel of "x label" and ylable as "y label".
        </shortdescription>
      </image>
    </figure>

    <p>
      Setting the limits on the axes is done with the <c>limits</c> option.  For example:
    </p>

    <p>
      <cd>
      <cline>fig = Figure() ax = Axis(fig[1,1], limits = (-5,5,0,20)) fig</cline>
      </cd>
    </p>

    <p>
      produces the following
    </p>

    <figure xml:id="fig-limits">
      <caption>An empty plot with updated limits.</caption>
      <image source="plots/makie/limits.png" width="90%">
        <shortdescription>
          An empty plot with limits in the x-direction from -5 to 5 and in the y-direction from 0 to 20.
        </shortdescription>
      </image>
    </figure>

    <p>
      where the specification is <c>limits = (xmin, xmax, ymin, ymax)</c>.
    </p>

    <p>
      There are plenty of other options available for an <c>Axis</c>.  See the <url href="https://docs.makie.org/stable/reference/blocks/axis">documentation on Axis</url> for more information.  One big this to note is the separation of axis options (anything that isn't a plot) should be done to the <c>Axis</c> option, whereas as we will see below, changes to the plot will go on the individual plotting function.
    </p>
  </section>

  <section>
    <title>Adding Plots to Axes</title>

    <p>
      Even though we can do some elaborate layout of axes, we haven't done any plotting on them.  In fact, there are two ways to plot via Makie.  First, as we saw above, we can use plotting functions like <c>lines</c> or <c>scatter</c> to make plots.  This is fine for relatively simple plots or just for a quick plot using defaults.  Secondly, we will create <c>Figure</c>s and <c>Axis</c> objects and the add plots to them with commands like <c>lines!</c> or <c>scatter!</c> (note the !).  Recall that convention in Julia is if an argument is being modified that the name should end in a <c>!</c>.
    </p>

    <p>
      Let's repeat the scatter plot at the top of this chapter.  If we do:
    </p>

    <p>
      <cd>
      <cline>y = [3.2,-4.5,7.8,4.2,-2.0,5.4,7.8,-2.4,-3.1,3.9]</cline>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1], limits = (0,11,-10,10))</cline>
      <cline>scatter!(ax, x, y)</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      where we have set the limits to make them symmetric above and below the <m>x</m>-axis.
    </p>

    <figure xml:id="fig-scatter2">
      <caption>A scatter plot with sample data in which the limits have been updated. </caption>
      <image source="plots/makie/scatter2.png" width="90%">
        <shortdescription>
          A scatter plot with sample data in which the limits are from 0 to 11 in the x-direction and from -10 to 10 in the y-direction.
        </shortdescription>
      </image>
    </figure>

    <p>
      This is the way to include either multiple function plot or a scatter and function plot on the same axes.  Consider the scatter plot from <xref ref="ch-plotting-basics"/> which is the data from CO₂ levels.  We can add an exponential function to them as well in the following way.<fn>The data is available <url href="https://gml.noaa.gov/aftp/products/trends/co2/co2_annmean_mlo.csv">at this NOAA webpage</url> and should be downloaded and saved in the same directory as your julia notebook. </fn>.
    </p>


    <program language="julia" line-numbers="yes">
      <input>
          fig = Figure()
          ax = Axis(fig[1,1])
          scatter!(ax, co2.year, co2.mean)
          lines!(ax, 1959..2023,t -&gt; exp(5.735 + 0.00454*(t-1959)), color = :green)
          fig
      </input>
    </program>

    <p>
      resulting in the following.
    </p>

    <figure xml:id="fig-co2-fit">
      <caption>A scatter plot of CO₂ data and an exponential fit. </caption>
      <image source="plots/makie/co2-scatter-fit.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      The exponential was found in a way similar to that of fitting curves in <xref ref="ch-algorithm-analysis"/>.
    </p>
  </section>

  <section>
    <title>Plotting Data</title>

    <introduction>
      <p>
        Many of the examples above have involved plotting functions.  This section gives some overview of how to think about data.  In particular, recall that data is generally either discrete (that is there are either a finite or countable number of possibilities) like categories or numerical data that can be counted or continuous like data that is measured with real numbers (inches of rain, heights of people, etc.)  It's important to understand the difference to understand plots.
      </p>
    </introduction>


    <subsection>
      <title>Plotting Continuous Data</title>

      <p>
        We have already seen examples of plotting continuous data with the CO₂ data above.  This data is the mean CO₂ level over each year and although the year seems like a discrete variable, time is actually continuous.  Because of this, a scatter plot is a good way to present this data.
      </p>
    </subsection>


    <subsection>
      <title>Plotting Discrete Data</title>

      <p>
        In contrast, let's look at discrete data.  I have done a lot of research recently using sports data and one project involved scoring in the National Basketball Association (NBA).  Consider a season and looking at the number of points every team has scored.   For the 2023-2024 season, if we consider the home and visiting teams, then here is the first few games:
      </p>

      <p>
        To plot every score (which is discrete), let's consider a bar plot in which the height of a bar at a given score is the number of games with that score.  To generate this, we load in the <c>nba2024.csv</c> file.  Note you will need to download/install <c>CSV</c> and <c>DataFrames</c>.
      </p>

      <p>
        <cd>
        <cline>using CSV, DataFrames</cline>
        <cline>nba_scores = CSV.read("nba.csv", DataFrame)</cline>
        </cd>
      </p>

      <p>
        and this lists about 15 rows of the file.  The top of the file looks like:
      </p>

      <p>
        <cd>
        <cline>1319×5 DataFrame     1294 rows omitted</cline>
        <cline>  Row   DATE        HOME_TEAM              HOME_SCORE  VISITOR_NAME        VISITOR_SCORE</cline>
        <cline>        Date        String31               Int64       String31            Int64</cline>
        <cline>  1     2023-10-24  Denver Nuggets         119         Los Angeles Lakers  107</cline>
        <cline>  2     2023-10-24  Golden State Warriors  104         Phoenix Suns        108</cline>
        <cline>  3     2023-10-25  Orlando Magic          116         Houston Rockets     86</cline>
        </cd>
      </p>

      <p>
        We won't go into what a DataFrame is, but in short it is a common data structure for working with data that comes in columns with common types.  These work well with spreadsheets.  The details of a <c>DataFrame</c> is presented starting in <xref ref="ch-data"/>. To plot the number of home games with a given score (also called the score distribution), we use the <c>counts</c> function in the <c>StatsBase</c> package (so install it) and perform <c>using StatsBase</c>.
      </p>

      <p>
        <cd>
        <cline>home_dist = counts(nba_scores.HOME_SCORE,70:160)</cline>
        </cd>
      </p>

      <p>
        which returns a vector of the number of games with the score 70, 71, ..., 160.  We can then plot the results with <c>barplot</c> using
      </p>

      <p>
        <cd>
        <cline>barplot(70:160,home_dist)</cline>
        </cd>
      </p>

      <p>
        which results in the plot
      </p>

      <figure xml:id="fig-nba-home">
        <caption></caption>
        <image source="plots/makie/nba_home.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        Another interesting plot is to place bars side by side for the home and visitor scores.  This is a little but possible with the <c>barplot</c> command.  We just need to include all of the data together and then including a vector of grouping.  The following is the code to do this:
      </p>

      <p>
        <cd>
        <cline>colors = Makie.wong_colors()</cline>
        <cline>barplot(</cline>
        <cline>  repeat(70:160,2), </cline>
        <cline>  vcat(home_dist,visitor_dist), </cline>
        <cline>  dodge = repeat(1:2,inner=91), </cline>
        <cline>  color = repeat([:orange, :darkgreen],inner=91)</cline>
        <cline>)</cline>
        </cd>
      </p>

      <p>
        where this is one command but split onto lines for readibility.  The 2nd line is the horizontal axis which is just the same as the plot above except that we need to repeat it twice.  The third line concatenates vertically (<c>vcat</c>) the two distributions.  The fourth line explain how to group the data (<c>dodge</c> is used to include it side by side or <c>stack</c> is to stack it vertically). The color attribute (line 5) sets the color for each bar--again, this is needed to be a repeated vector.  The result of this is
      </p>

      <figure xml:id="fig-nba-compare">
        <caption></caption>
        <image source="plots/makie/nba-compare.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        An easier example of this is with the following code:
      </p>

      <p>
        <cd>
        <cline>colors =Makie.wong_colors()</cline>
        <cline></cline>
        <cline>h = [2, 3, 6, 8, 3, 5, 7, 9]</cline>
        <cline>x = [1, 1, 2, 2, 3, 3, 4, 4]</cline>
        <cline>v = repeat([1,2],4)</cline>
        <cline></cline>
        <cline>barplot(x, h, dodge = v, color = colors[v] )</cline>
        </cd>
      </p>

      <p>
        which results in
      </p>

      <figure xml:id="fig-simple-barplot">
        <caption></caption>
        <image source="plots/makie/simple-barplot.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        More examples of plotting data can be found in <xref ref="ch-data"/> and other chapters in <xref ref="part-data-analysis"/>, which uses larger datasets and investigates how to gain insights into data from visualization.
      </p>
    </subsection>
  </section>

  <section>
    <title>Contour Plots</title>

    <p>
      As mentioned in <xref ref="ch-plotting-basics"/>, a contour plot is generally used for functions of two variable, like <m>f(x,y)</m> and the plot is curves of constant function value or <m>f(x,y)=C</m> for various values of <m>C</m>.  As in the previous chapter, we will plot
    </p>

    <p>
      <me>
        f(x,y) = \sin\biggl(\frac{1}{2}x^2-\frac{1}{4}y^2+2\biggr)\cos(x+y)
      </me>
    </p>

    <p>
      and can do this with the following code:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>fig = contour(x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y))</cline>
      </cd>
    </p>

    <p>
      which results in the plot:
    </p>

    <figure xml:id="fig-contour-1">
      <caption></caption>
      <image source="plots/makie/contour1.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      And recall that a contour plot is basically like a topographical map if you have ever used one of those.  The concentric circles are either a hill (maximum) or a depression (minimum) and unless we know what function values, we're not sure which is why.  To help with this we will add labels to the contours and increase the number of contours used with the <c>levels</c> attribute.
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>contour( x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), labels = true, levels = 11)</cline>
      </cd>
    </p>

    <p>
      and this results in
    </p>

    <figure xml:id="fig-contour-2">
      <caption></caption>
      <image source="plots/makie/contour2.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      and you can see from the values of the contours that there is a minimum near <m>(1,2)</m> and a maximum near <m>(2.5,0.8)</m>
    </p>

    <p>
      Another related plot is that of a filled contour plot in which the regions between contours are filled with colors.  This is more of a visually nice feature rather than an important distinction over the previous contour plot.  A filled contour plot can be created with the <c>contourf</c> plotting command as in this example:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>contourf( x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), labels = true, levels = 11)</cline>
      </cd>
    </p>

    <p>
      resulting in
    </p>

    <figure xml:id="fig-contourf-1">
      <caption></caption>
      <image source="plots/makie/contourf.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>

    <p>
      And since the colors play an important role in a filled contour plot, it is helpful to know the function values for a give color and using a colorbar is a way to do this.  We can add a colorbar with the following code:
    </p>

    <p>
      <cd>
      <cline>x = y = LinRange(0,pi,101)</cline>
      <cline>fig = Figure()</cline>
      <cline>ax = Axis(fig[1,1])</cline>
      <cline>contourf!(ax, x, y, (x, y) -&gt; sin(0.5x^2-0.25y^2+2)*cos(x+y), levels = 11)</cline>
      <cline>Colorbar(fig[1,2])</cline>
      <cline>fig</cline>
      </cd>
    </p>

    <p>
      where we have used the layout methods described in <xref ref="sect-layout-makie"/> because we need to specify where the colorbar goes. The result of this is
    </p>

    <figure xml:id="fig-contourf-2">
      <caption></caption>
      <image source="plots/makie/contourf1.png" width="90%">
        <shortdescription>
          (for accessibility)
        </shortdescription>
      </image>
    </figure>
  </section>

  <section>
    <title>Backends for Makie</title>

    <p>
      As described in <xref ref="sect-plotting-backends"/>, Makie is a set of high level plotting commands.  The hard work of drawing lines, circles and regions on the screen is done with a backend and the idea is to be able to switch backends easily without changing the high-level code to produce a plot.  Makie has four such options currently: <c>CairoMakie</c>, <c>GLMakie</c>, <c>WGLMakie</c> and <c>RPRMakie</c> and you should have seen the first two appear above in the plotting code.
    </p>

    <p>
      <dl>
      <li>
        <title>CairoMakie</title>

        <p>
          <c>CairoMakie</c> uses the <c>Cairo</c> drawing engine underneath and excels at high-quality 2D drawings that are non-interactive. The output in generally either an SVG or PDF and since these are vector-based drawing formats, these will produce high-quality graphs for print (and the screen).
        </p>
      </li>

      <li>
        <title>GLMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/glmakie" visual="docs.makie.org">GLMakie documentation page</url>,
        </p>

        <blockquote>
          <p>
            GLMakie is the native, desktop-based backend, and is the most feature-complete. It requires an OpenGL enabled graphics card with OpenGL version 3.3 or higher.
          </p>
        </blockquote>

        <p>
          It appears that almost all graphics cards support OpenGL and thus GLMakie should work for nearly all computers.
        </p>
      </li>

      <li>
        <title>RPRMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/rprmakie" visual="docs.makie.org">RPRMakie page</url>:
        </p>

        <blockquote>
          <p>
            Experimental ray tracing backend using AMDs RadeonProRender. While it's created by AMD and tailored to Radeon GPUs, it still works just as well for NVidia and Intel GPUs using OpenCL. It also works on the CPU and even has a hybrid modus to use GPUs and CPUs in tandem to render images.
          </p>
        </blockquote>
      </li>

      <li>
        <title>WGLMakie</title>

        <p>
          According to the <url href="https://docs.makie.org/stable/explanations/backends/wglmakie" visual="docs.makie.org">WGLMakie page</url>:
        </p>

        <blockquote>
          <p>
            WGLMakie is the web-based backend, which is mostly implemented in Julia right now. WGLMakie uses Bonito to generate the HTML and JavaScript for displaying the plots. On the JavaScript side, we use ThreeJS and WebGL to render the plots. Moving more of the implementation to JavaScript is currently the goal and will give us a better JavaScript API, and more interaction without a running Julia server.
          </p>
        </blockquote>
      </li>
      </dl>
    </p>
  </section>
</chapter>
