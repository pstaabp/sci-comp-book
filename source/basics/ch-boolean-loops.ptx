<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-boolean-loops">
	<title>Boolean Statements, Loops and Branching</title>

	<objectives>
		<ul>
			<li>
				<p>
					Understanding the operators  equal, less than, less than or equal, greater than, and greater than or equal applied to variables, numbers and strings.
				</p>
			</li>

			<li>
				<p>
					Understanding the boolean operators AND, OR and NOT and compound boolean statements.
				</p>
			</li>

			<li>
				<p>
					How to write an if-then-else statement and when to use it.
				</p>
			</li>

			<li>
				<p>
					How to write a while loop and examine the troubles that can occur.
				</p>
			</li>

			<li>
				<p>
					How to write a for loop and when to use it versus a while loop.
				</p>
			</li>

			<li>
				<p>
					Introduction to ranges, which store linear sequences of numbers.
				</p>
			</li>
		</ul>
	</objectives>

	<introduction>
		<p>
			The basic computer science structures of if statements, while and for loops are crucial in scientific computing. In this chapter, we cover the basics of these structures in Julia. We will see all of these in more context in later chapters, but here's the syntax and basics.
		</p>

		<p>
			Lastly, because of the syntax of a <c>for</c> loop, we show details about ranges in Julia, which is a compact way to write a set of numbers that are either sequential or sequential with skips in it.
		</p>
	</introduction>

	<section>
		<title>Boolean values and if statements</title>

		<introduction>
			<p>
				A boolean value is something that is either <c>true</c> or <c>false</c>. These are built-in constants in Julia. Sometimes we will want to know if a statement is true or false, but generally, we will use them in other structures.
			</p>

			<p>
				We often use boolean to test various conditions. For each, testing equality using <c>==</c>, or comparison of numbers we use <c>&lt;,  &lt;=, &gt;, &gt;=</c> for less than, less than or equal, greater than and greater than or equal respectively.
			</p>

			<p>
				If we set <c>x=3</c> and then can just type <c>x==3</c>, <c>x &lt; 3 </c>, <c>x &gt; 3</c> to test a variety of comparisons.
			</p>

			<p>
				In addition, we can test if a boolean value does not have some value using the <c>!=</c> and <c>!</c> operators.  For example using the same example <c>x=3</c> as above, then we can test that <c>x</c> is not 4 with <c>x != 4</c>.  If a variable is a boolean, like <c>b = true</c>, the operator that changes <c>true</c> to <c>false</c> or vice versa with <c>!b</c>.
			</p>
		</introduction>


		<subsection>
			<title>Compound boolean statements</title>

			<p>
				We often want to test multiple boolean statements and can build up compound ones with either the <em>and</em> (using the code <c>&amp;&amp;</c>) or <em>or</em> (using the code <c>||</c>) operators. Recall the following table for <c>&amp;&amp;</c> and <c>||</c>
			</p>

			<table>
				<title>Truth Table</title>

				<tabular>
					<row>
						<cell>AND</cell>
						<cell>T</cell>
						<cell>F</cell>
						<cell></cell>
						<cell>OR</cell>
						<cell>T</cell>
						<cell>F</cell>
					</row>

					<row>
						<cell>T</cell>
						<cell>T</cell>
						<cell>F</cell>
						<cell></cell>
						<cell>T</cell>
						<cell>T</cell>
						<cell>T</cell>
					</row>

					<row>
						<cell>F</cell>
						<cell>F</cell>
						<cell>F</cell>
						<cell></cell>
						<cell>F</cell>
						<cell>T</cell>
						<cell>F</cell>
					</row>
				</tabular>
			</table>

			<p>
				If we have <c>x=3</c> and <c>y=10</c>, if we want to test that <c>x</c> is greater than 0 and <c>y</c> is 5, by
			</p>

			<p>
				<cd>
				<cline>x &gt;= 0 &amp;&amp; y==5</cline>
				</cd>
			</p>

			<p>
				which will return <c>false</c>, since only the first is true and both must be true for this compound statement to be true. However,
			</p>

			<p>
				<cd>
				<cline>x &gt;= 0 || y==5</cline>
				</cd>
			</p>

			<p>
				returns <c>true</c>, because the first is true.
			</p>

			<p>
				In both of these examples, it is important to note the order of operations or operator precedence.  This was mentioned in <xref ref="sect-oper-precedence"/>, however as the number of operators grows, it's important to know the precedence. In these cases the tests <c>==,&lt;=,&lt;,&gt;=,&gt;</c> have precedence over <c>&amp;&amp;</c> and <c>||</c>.
			</p>

			<p>
				Also, <c>&amp;&amp;</c> has precedence over <c>||</c> in that if we evaluate
			</p>

			<p>
				<cd>
				<cline>x &gt;=0 &amp;&amp; y &gt; 7 || y == 5</cline>
				</cd>
			</p>

			<p>
				results in <c>true</c>.  You can think of this resulting in <c> true &amp;&amp; true || false</c> and because of precedence the first pair is tested (to be <c>true</c>) then the result <c>true || false</c> results in <c>true</c>.
			</p>

			<p>
				Often when precedence is unclear, adding parentheses can be helpful.  Instead, perhaps write the above as:
			</p>

			<p>
				<cd>
				<cline>(x &gt;=0 &amp;&amp; y &gt; 7) || y == 5</cline>
				</cd>
			</p>
		</subsection>


		<subsection>
			<title>Range Boolean Operator</title>

			<p>
				There are often situations in mathematics where we write a range of values like <m>1 \leq x \leq 8.5</m>.  We could write in using a compound operator like <c>1 &lt;= x &amp;&amp; x &lt;= 8.5</c>, but Julia has a nice operator that handles this as one like <c>1 &lt;= x &lt;= 8.5</c>.
			</p>

			<p>
				For example if <c>x=5, y= -1, z= 10</c> then
			</p>

			<p>
				<ul>
					<li>
						<p>
							<c>1 &lt;= x &lt;= 8.5</c> returns <c>true</c>
						</p>
					</li>

					<li>
						<p>
							<c>1 &lt;= y &lt;= 8.5</c> returns <c>false</c>
						</p>
					</li>

					<li>
						<p>
							<c>1 &lt;= z &lt;= 8.5</c> returns <c>false</c>
						</p>
					</li>
				</ul>
			</p>
		</subsection>
	</section>

	<section>
		<title>If Statements</title>

		<introduction>
			<p>
				An <c>if</c> statement is used to do different things depending on the value of a variable. A standard example of this is the piecewise version of the absolute value. Mathematically, we write:
			</p>

			<p>
				<me>
					|x|=\begin{cases} x &amp; x \geq 0 \\ -x &amp; x &lt; 0 \end{cases}
				</me>
			</p>

			<p>
				We could write this as a function as
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
function absValue(x::Real)
  if x &gt;= 0
     return x
  end
  return -1*x
end
				</code>
			</program>

			<p>
				Evaluate <c>absValue(3)</c> and <c>absValue(-7)</c> to ensure this is returning expected results.
			</p>

			<p>
				Notice that we basically had two situations here, either <m>x</m> was greater than or equal to 0 or else not. We can rewrite this use an <c>if-else</c> statement.
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
function absValue(x::Real)
  if x &gt;= 0
    return x
  else
    return -1*x
  end
end
				</code>
			</program>

			<p>
				Try entering this and seeing if the results are the same.
			</p>

			<p>
				The absolute value function is quite important in mathematics and thus is built-in to Julia as <c>abs</c>.
			</p>
		</introduction>


		<subsection>
			<title>Further choices with if statements</title>

			<p>
				You may need more than 2 choices on an if statement. Recall the <url href="https://en.wikipedia.org/wiki/Quadrant_(plane_geometry)" visual="wikipedia">quadrants</url> of the <m>xy</m>-plane start at I for the upper right and increase as you traverse counterclockwise.  A function could be written:
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
				function quadrant(x::Real,y::Real)
				  if x &gt; 0 &amp;&amp; y &gt; 0
				    return "I"
				  elseif x &lt; 0 &amp;&amp; y &gt; 0
				    return "II"
				  elseif x &lt; 0 &amp;&amp; y &lt; 0
				    return "III"
				  elseif x &gt; 0 &amp;&amp; y &lt; 0
				    return "IV"
				  else
				    return "NONE"
				  end
				end
				</code>
			</program>

			<p>
				and technically if you are on an axis, then you are not in a quadrant, so that is the reason for the last option.
			</p>

			<exercise>
				<introduction>
					<p>
						Evaluate the function <c>quadrant</c> at the following points and see if the results are as expected.
					</p>
				</introduction>


				<task>
					<statement>
						<p>
							<m>(2,1)</m>
						</p>
					</statement>
				</task>


				<task>
					<statement>
						<p>
							<m>(-4,-2)</m>
						</p>
					</statement>
				</task>


				<task>
					<statement>
						<p>
							<m>(0,5)</m>
						</p>
					</statement>
				</task>
			</exercise>
		</subsection>


		<subsection>
			<title>Indentation in if statements</title>

			<p>
				We mentioned in <xref ref="ch-intro-functions" /> that spacing in functions doesn't matter and also doesn't in if statement either.  Note this is different in other languages such as Python.  Throughout this text, statement within other blocks (like functions or if statements or we will see loops below) are indented 2 spaces.  The number of spaces doesn't matter and many others prefer 4 spaces, but it is helpful to understand which statements are within the if block or the else block.
			</p>
		</subsection>


		<subsection>
			<title>Using Short-Circuiting for simple branches</title>

			<p>
				Sometimes an <c>if</c> statement has one element in its block.  In cases like this, we can shorten it.  Here's a for loop (that we will see that below)
			</p>


			<program language="julia" line-numbers="yes">
				<code>
for n=1:8
  @show n
  if n%2 == 0
    println("$n is even")
  end
end
				</code>
			</program>

			<p>
				We are going to replace the <c>if</c> statement with <c>n%2 == 0 &amp;&amp; println("$n is even")</c> to the following:
			</p>


			<program language="julia" line-numbers="yes">
				<code>
				for n=1:8
				  @show n
				  n%2 == 0 &amp;&amp; println("$n is even")
				end
				</code>
			</program>

			<p>
				The reason this works is that the boolean and (<c>&amp;&amp;</c>) evaluates using short-circuting.  If the left side of <c>&amp;&amp;</c> evaluates to <c>true</c>, then the right side is then evaluated.  However if the left side is <c>false</c>, then the statement short-circuits and skips the right side evaluation.
			</p>

			<p>
				An alternative using the or (<c>||</c>) short-circuit.  Consider the <c>isOdd</c> method we wrote in <xref ref="ch-intro-functions"/> in which we check if an integer is odd.  We may want to restrict the input to nonnegative numbers and can with
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function isOdd(n::Integer)
  n &gt;=0 || error("The input $n must be non negative")
  n%2 == 1
end
				</code>
			</program>

			<p>
				Line #2 translates to n is greater than or equal to 0 or print an error.  The left side of the <c>||</c> is always evaluted.  If it is <c>true</c> then the right side is not evaluated.  This is similar to
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function isOdd(n::Integer)
  if !(n &gt;=0)
    error("The input $n must be non negative")
  end
  n%2 == 1
end
				</code>
			</program>

			<p>
				This example using the <c>||</c> short-circuit to check an argument.  We will show this more extensively in <xref ref="ch-adv-functions" />.  However, it can be used anywhere.  In short, if you have a simple if statement and you want to check the condition is true, you can replace it with the <c> cond &amp;&amp; statement </c>.  Alternatively, if you want to check that a condition is not true, then <c>cond || statement</c> can be used.
			</p>

			<p>
				One can also replace an <c>if-else</c> statement with a short version of it.  This is discussed in the next section.
			</p>
		</subsection>
	</section>

	<section>
		<title>Ternary <c>if-then-else</c></title>

		<p>
			A common use of an <c>if-then-else</c> statement is to assign a value to a variable (or return from a function) depending on some condition.  There is a compact way to do this with a ternary <c>if-then-else</c> statement that has the form:
		</p>

		<p>
			<cd>
			<cline>condition ? value_if_condition_is_true : value_if_condition_is_false</cline>
			</cd>
		</p>

		<p>
			which returns <c>value_if_condition_is_true</c> if condition is true otherwise <c>value_if_condition_is_false</c> is returned. The absolute value example above can be written as a single line:
		</p>

		<p>
			<cd>
			<cline>absVal2(x::Real) = x &gt;= 0 ? x : -1*x</cline>
			</cd>
		</p>

		<p>
			and once you practice with this, it will be easy to read and much shorter (1 line versus 7). Be careful with the syntax of this.  It is required that the expressions around the ? be padded with spaces to parse correctly.  The error is reasonably clear if you don't write it correctly.
		</p>

		<p>
			Alternatively, you can write this as
		</p>

		<p>
			<cd>
			<cline>absVal3(x::Real)=ifelse(x &gt;=0, x, -1*x)</cline>
			</cd>
		</p>

		<p>
			The <c>ifelse</c> is not used in this book, preference goes to the <c> ? : </c> format instead--which is available in almost all modern languages as well.
		</p>

		<p>
			The ternary <c>if-then-else</c> is useful if you want to store a value that has a branching condition and that branch is relatively simple.  If you have more complicated logic or need to call a function, this is where a <c>if-then</c> or <c>if-then-else</c> statement would be used.
		</p>

		<exercise>
			<p>
				Write the recursive factorial function above using the ternary if-then-else.
			</p>
		</exercise>

		<p>
			You can nest the ternary <c>if-then-else</c>.  For example, the following will perform the same as the quadrant function above.
		</p>


		<program language="Julia" line-numbers="yes">
			<code>
function quadrant2(x::Real, y::Real)
  x &gt; 0 &amp;&amp; y &gt; 0 ? "I" :
    x &lt; 0 &amp;&amp; y &gt; 0 ? "II" :
    x &lt; 0 &amp;&amp; y &lt; 0 ? "III" :
    x &gt; 0 &amp;&amp; y &lt; 0 ? "IV" : "NONE"
end
			</code>
		</program>

		<p>
			Note that although this can be written on a single line (it is a single nested statement), it has been split on lines for clarity.  Also, the precedence order is that <c>:</c> is higher that <c>?</c> in order for this to evaluate as expected without parentheses. Also, since this is one line, the <c>return</c> statement is not added since the result of this will be the element returned.
		</p>
	</section>

	<section>
		<title>Loops</title>

		<introduction>
			<p>
				A <em>loop</em> is a series of statements that are repeated either a fixed number of times or until a condition occurs. They can be very helpful if a large number of operations need to be done in a predictable manner.
			</p>
		</introduction>


		<subsection xml:id="sect-while-loop">
			<title>While Loops</title>

			<p>
				Another very common construction for programming is called a while loop. Basically, we want to run a few statements while some boolean statement is true. Here's a simple, but uninteresting example:
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
let
  local n=1
  while n &lt; 10
    @show n
    n+=1
  end
end
				</code>
			</program>

			<p>
				and note that the expression <c>n+=1</c> is shorthand for <c>n=n+1</c>.  We are using the <c>@show</c> macro which dumps the expression and its value to the screen.  Also, we are using a <c>let</c> block to just encapsulate the variables.
			</p>

			<p>
				A more practical example of a for loop will be the <url href="https://en.wikipedia.org/wiki/Bisection_method" visual="wikipedia">Bisection Method</url> for finding a root.
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
function bisection(f::Function, a::Real, b::Real)
	local c
	while (b-a) &gt; 1e-6
		c = 0.5*(a+b)  # find the midpoint
		# test if f(a) and f(c) have opposite signs to determine the new interval
		(a,b) = f(a)*f(c) &lt; 0 ? (a,c) : (c,b)
	end
	c
end
				</code>
			</program>

			<p>
				In short, this method takes a function <m>f</m> and an interval <m>[a,b]</m> and continually bisects it ensuring there is a root in the resulting interval.  It continues while the length of the interval is greater than <c>1e-6</c> or <m>10^{-6}</m>.  We use a tuple to handle the interval and on line 6, we have used a ternary <c>if-then-else</c> to first test which interval to use and then return either the left or right hand subintervals.
			</p>

			<p>
				To test it, consider
			</p>

			<p>
				<cd>
				<cline>f(x) = x^2-2</cline>
				</cd>
			</p>

			<p>
				which has a root of <m>\sqrt{2}</m>.  The function call
			</p>

			<p>
				<cd>
				<cline>bisection(f,1,2)</cline>
				</cd>
			</p>

			<p>
				returns <c>1.4142141342163086</c>, which is approximately <m>\sqrt{2}</m>.
			</p>

			<p>
				Note that we used a ternary if-then-else in the <c>bisection</c> function in conjunction with a tuple to update both points in the interval.  This makes the function reasonably simple.  A standard <c>if-then-else</c> statement can be used instead if desired.
			</p>

			<p>
				This was used as a practical example and we will explore this and other rootfinding techniques in <xref ref="ch-rootfinding"/>.
			</p>
		</subsection>


		<subsection>
			<title>Bailing out of a While loop</title>

			<p>
				Generally the way to stop a while loop is in the test condition.  However, another nice way to do this is using the <c>break</c> statement.  Consider the following.
			</p>


			<program language="julia" line-numbers="yes">
				<code>
				let
					n = 1
					while n &lt; 10
						@show n
						if n &gt; 5
							break
						end
						n += 1
					end
				end
				</code>
			</program>

			<p>
				and the result will be the integers 1 to 6 shown. Note that if the <c>if n &gt; 5</c> block is not present then you will get the integers up to 10. (try this by commenting out lines 5-7) and rerunning.  With this statemnt as soon as <c>n</c> gets larger than 5, then the execution is jumped out of the loop.
			</p>

			<p>
				We can often shorten this using the shortcut if statement shown above, replacing the <c>if n &gt; 5</c> block with <c>n &gt; 5 &amp;&amp; break</c> as in
			</p>


			<program language="julia" line-numbers="yes">
				<code>
let
  n = 1
  while n &lt; 10
    @show n
    n &gt; 5 &amp;&amp; break
    n += 1
  end
end
				</code>
			</program>

			<p>
				and recall that if <c>n &gt; 5</c>on line 5 is executed and when <c>false</c> then the statement is short-circuited and the second part (<c>break</c>) is not executed, however when <c>n &gt; 5</c> is <c>true</c>, then the second part is executed and the while loop is broken out of. Consider
			</p>


			<program language="julia" line-numbers="yes">
				let
				n = 1
				while true
				@show n
				n &gt; 5 &amp;&amp; break
				n += 1
				end
				end
			</program>
		</subsection>


		<subsection>
			<title>A <c>while true</c> loop</title>

			<p>
				Notice that with this <c>while</c>loop that the condition of the loop <c>n &lt; 10</c> is never false and therefore we don't need that condition, however we do need something and that is often to replace the condition with <c>true</c>, which seems like a bad idea, but conisder:
			</p>


			<program language="julia" line-numbers="yes">
				<code>
let
  n = 1
  while true
    @show n
    n &gt; 5 &amp;&amp; break
    n += 1
  end
end
				</code>
			</program>

			<p>
				For while loops like this, the <c>while true</c> basically runs the loop indefinitely.  To ensure that the loop stops, make sure that there is something like line 5 that breaks out of the loop.
			</p>

			<exercise>
				<statement>
					<p>
						Rewrite the bisection method above using a <c>while true</c> and use the short-circuit with the <c>break</c> statement to ensure there is an exit from the loop.
					</p>
				</statement>

				<answer>
					<program language="julia" line-numbers="yes">
						<code>
function bisection(f::Function, a::Real, b::Real)
  local c
  while true
    c = 0.5*(a+b)  # find the midpoint
    # test if f(a) and f(c) have opposite signs to determine the new interval
    (a,b) = f(a)*f(c) &lt; 0 ? (a,c) : (c,b)
    b-a &amp;&amp; break
    n += 1
  end
  c
end
						</code>
					</program>
				</answer>
			</exercise>
		</subsection>


		<subsection>
			<title>Skipping statements in a loop</title>

			<p>
				In the previous section, we used the <c>break</c> statement to break out of a loop.  An alternative is if there is some lines of code that we wish to skip in the loop we could put them in an if statement, however another nice way to handle this is to use the <c>continue</c> statement.  We'll show this with an example
			</p>

			<p>
				The following will produce the numbers 1 to 6:
			</p>


			<program language="julia" line-numbers="yes">
				<code>
let
  n = 1
  while true
    n &gt; 6 &amp;&amp; break
    @show n
    n += 1
  end
end
				</code>
			</program>

			<p>
				Let's say we want to not print the odd numbers.  Although there are many ways to do this, we will skip line 6 in the following way.
			</p>


			<program language="julia" line-numbers="yes">
				<code>
let
  n = 0
  while true
    n &gt; 6 &amp;&amp; break
    n += 1
    n % 2 == 1 &amp;&amp; continue
    @show n
  end
end
				</code>
			</program>

			<p>
				When line 6 is reached and <c>n % 2 == 1</c> then the right side of the <c>&amp;&amp;</c> is evaluated, then <c>continue</c> means we go to the top of the loop.
			</p>

			<p>
				As with doing anything with a loop, careful about using <c>continue</c>.  It will skip all lines below this.  If you wrote this loop with the <c>n += 1</c> below the <c>continue</c> line then it will not be evaluated and will thus be an infinite loop, which we discuss moreso below.
			</p>
		</subsection>


		<subsection>
			<title>Infinite Loops</title>

			<p>
				It is common in a <c>while</c> loop to keep running it forever. This occurs if there is some bug or you haven't considered all cases.  For example, in the bisection method above, if the function doesn't have a root (like <m>f(x)=x^2+2</m>), then this will never stop.
			</p>

			<p>
				Here's a few things that can help prevent or debug the code:
			</p>

			<p>
				<ul>
					<li>
						<p>
							Make sure something is changing in your loop. If you intend to stop the loop on an index, make sure the index is updating.
						</p>
					</li>

					<li>
						<p>
							Look at your code and see if you have something that you think will stop the loop. What ever is in the boolean statement needs to eventually switch.
						</p>
					</li>

					<li>
						<p>
							Consider an additional stopping condition.  You may need to add a variable to count the number of times you've gone through the loop and stop if it hits some maximum, which is greater than what you would expect.
						</p>
					</li>

					<li>
						<p>
							Stop the code if you need to. You may need to interrupt the kernel.  In the REPL, CTRL-C will stop and in a notebook, selecting the <em>Kernel</em> menu then <em>Interrupt</em> or there is often a stop button which should stop it.  The square in the toolbar should work too.  See <xref ref="sect-kernel"/> for more information.
						</p>
					</li>

					<li>
						<p>
							If you can't figure out why it is in an infinite loop, use <c>@show</c> to print out values of variables.
						</p>
					</li>
				</ul>
			</p>
		</subsection>


		<subsection>
			<title>Debugging While Loops</title>

			<p>
				As we mentioned above, if we use a function that does not have a root, like <m>f(x)=x^2+2</m>, the <c>bisection</c> function will not stop.  Go ahead and try it.  Here we will add some code to that method that will prevent it from running forever.
			</p>

			<p>
				<ol>
					<li>
						<p>
							we will introduce a variable <c>n</c> which will keep track of the number of steps we have done.  We will start this variable with the value <c>0</c>.
						</p>
					</li>

					<li>
						<p>
							Then, inside the loop update the value of <c>n</c> with the statement <c>n += 1</c>.
						</p>
					</li>

					<li>
						<p>
							Lastly, add another condition to the while statement that will only continue if <c>n</c> is less than some value, say <c>10</c>.
						</p>
					</li>
				</ol>
			</p>

			<p>
				The following update to the <c>bisection</c> method will now stop if we go too many times:
			</p>



			<listing xml:id="prog-bisection-no-inf">
				<caption>Adapted bisection method to prevent infinite loop</caption>
				<program language="Julia" line-numbers="yes">
					<code>
function bisection(f::Function, a::Real, b::Real)
  local c
  local n = 0
  while (b-a) &gt; 1e-6 &amp;&amp; n &lt; 10
    c = 0.5*(a+b)  # find the midpoint
    # test if f(a) and f(c) have opposite signs to determine the new interval
    (a,b) = f(a)*f(c) &lt; 0 ? (a,c) : (c,b)
    n += 1
  end
  c
end
					</code>
				</program>
			</listing>
		</subsection>
	</section>

	<section>
		<title>For loops</title>

		<introduction>
			<p>
				A for loop executes some code a fixed number of times and has a variable (called an index) that updates.  The next few examples are not practical, but are designed to illustrate the syntax and what is possible. The following is a simple for loop that prints out the numbers 1 to 10
			</p>

			<p>
				<cd>
				<cline>for i=1:10</cline>
				<cline>  @show i</cline>
				<cline>end</cline>
				</cd>
			</p>

			<p>
				If you want to skip numbers or count backwards, a range in the form <em>start</em>:<em>skip</em>:<em>stop</em> is used.  The following starts at 1 and skips by 2 up to 21:
			</p>

			<p>
				<cd>
				<cline>for i=1:2:21</cline>
				<cline>  @show i</cline>
				<cline>end</cline>
				</cd>
			</p>

			<p>
				and the following starts at 10, counting down to 1:
			</p>

			<p>
				<cd>
				<cline>for i=10:-1:0</cline>
				<cline>  @show i</cline>
				<cline>end</cline>
				</cd>
			</p>

			<p>
				We can use the <c>for var in list</c> form to go through elements in a list or array (or tuple).  The following adds all numbers in the list (array) <c>[1,5,7,11,20]</c>:
			</p>

			<p>
				<cd>
				<cline>let</cline>
				<cline>  local sum=0</cline>
				<cline>  for i in [1,5,7,11,20]</cline>
				<cline>    sum += i</cline>
				<cline>  end</cline>
				<cline>  sum</cline>
				<cline>end</cline>
				</cd>
			</p>

			<p>
				Recall that in <xref ref="sect-varargs"/> we used this in the formation to find the mean:
			</p>


			<program language="Julia" line-numbers="yes">
				<code>
function theMean(x::Number...)
  local s = 0
  for val in x
    s += val
  end
  s/length(x)
end
				</code>
			</program>
		</introduction>


		<subsection>
			<title>While Loops Versus For Loops</title>

			<p>
				No this, isn't a smackdown between while and for loops. A big question often is when I have a problem that I want to solve and I know a loop is needed, when should I use a <c>while</c> loop and when should I use a <c>for</c> loop. The general rule of thumb is:
			</p>

			<p>
				<ul>
					<li>
						<p>
							If you know that you need to run code for a fixed number of times, use a for loop
						</p>
					</li>

					<li>
						<p>
							If you don't use a while loop. Generally, the <em>doing</em> something in the loop will affect how many times the loop is run.
						</p>
					</li>
				</ul>
			</p>

			<p>
				Notice in the examples above, the bisection method used a <c>while</c> loop because it is unclear when you start how many times you want to go through the loop. Instead we stopped in while the interval was small enough.
			</p>

			<p>
				In the summing of the terms for the mean, a for loop was used because of the fixed number of values in the tuple <c>x</c>.
			</p>
		</subsection>


		<subsection>
			<title>Adapting While loops as For Loops</title>

			<p>
				As just mentioned above, generally if we don't know how many times we go through a loop that a while loop should be used.  Let's say we have a game that we roll a die. If we roll the die 10 times without rolling a 1, we win and if a 1 appears fewer than 10 times, we lose.   Here's a function that we can use to play this game.
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function playDieGame()
  local roll = rand(1:6)
  @show roll
  local n = 1
  local win = roll != 1
  while roll != 1 &amp;&amp; n &lt;=10
    roll = rand(1:6)
    @show roll
    win = false
    n += 1
  end
  win
end
				</code>
			</program>

			<p>
				This starts with a roll of the die with <c>rand(1:6)</c>.  We also have the variable <c>n</c> that will store the number of rolls and <c>win</c> is whether or not we win the game.  At this point <c>win</c> is assumed <c>true</c> unless <c>roll == 1</c>.   The condition on the while loop is that the roll is not 1 and that the number of rolls is less than or equal to 10.  A possible output is
			</p>

			<p>
				<cd>
				<cline>roll = 6</cline>
				<cline>roll = 5</cline>
				<cline>roll = 1</cline>
				<cline>false</cline>
				</cd>
			</p>

			<p>
				We will discuss random numbers in detail in <xref ref="ch-probability-random"/> and if you run this function, you will get different results, but should see rolls until a 1 is reached. If it 1, the result is <c>false</c> that you win and <c>true</c> if not.  Try running this function a number of times.
			</p>

			<p>
				If this seems complicated, it is more complicated than it needs to be.  If we take the premise that since we don't know how many times this is run, we need to use a <c>while</c> then that complicates things then we need to have conditions on both the roll and the number of rolls (this is how the game is determined) and these both need to be set before the while loop.
			</p>

			<p>
				Instead, we will use a <c>for</c> loop and break out (or actually just <c>return</c>) during the winning and losing conditions.  Here's an update of the code:
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function playDieGame()
  for n=1:10
    local roll = rand(1:6)
    @show roll
    roll == 1 &amp;&amp; return false
    n == 10 &amp;&amp; return true
  end
end
				</code>
			</program>

			<p>
				Try running this code and you should see that it behaves the same way as above.
			</p>

			<p>
				Notice that first we didn't need to define <c>roll</c> before the loop and <c>n</c> is now the index of the for loop.  Also, we didn't define a <c>win</c> variable. Instead, notice that if <c>roll == 1</c> we just <c>return false</c> and if <c>n == 10</c> we <c>return true</c>.
			</p>

			<p>
				If also, we don't care about seeing the rolls, we can simplify this further with
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function playDieGame()
  for n = 1:10
    rand(1:6) == 1 &amp;&amp; return false
    n == 10 &amp;&amp; return true
  end
end
				</code>
			</program>

			<p>
				We simplify further in that there is no reason to check that <c>n == 10</c> each time through the loop.  If we make it through the loop, then we have gone 10 times and thus we win.  Here's an even shorter version of the game:
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function playDieGame()
  for n = 1:10
    rand(1:6) == 1 &amp;&amp; return false
  end
  true
end
				</code>
			</program>

			<p>
				And if you compare this to the original function above, it's much shorter.  There is only one other feature to note.  The variable <c>n</c> is never used, it is simply there as the index of the for loop.  If this is true, in Julia style, we replace the variable with the _ character (which is technically a variable name) so our final version is
			</p>


			<program language="julia" line-numbers="yes">
				<code>
function playDieGame()
  for _ = 1:10
    rand(1:6) == 1 &amp;&amp; return false
  end
  true
end
				</code>
			</program>
		</subsection>


		<subsection>
			<title>Using <c>break</c> and <c>continue</c> with for loops</title>

			<p>
				Although we introduced both <c>break</c> and <c>continue</c> statements in while loops above, they can also be used in for loops.  Although these are not very practical examples, nevertheless this shows how they are used.
			</p>

			<p>
				In this example, we will defined a loop from 1 to 10 and then break out of it after going through 5 times.
			</p>


			<program language="julia" line-numbers="yes">
				<code>
for n=1:10
  @show n
  n == 5 &amp;&amp; break
end
				</code>
			</program>

			<p>
				And in this example, we will print out only odd numbers
			</p>


			<program language="julia" line-numbers="yes">
				<code>
for n=1:10
  n % 2 == 0 &amp;&amp; continue
  @show n
end
				</code>
			</program>

			<note>
				<p>
					Although most of the examples we have used with <c>break</c> and <c>continue</c> involve the short-circuit if statements, they can be used anywhere, however are typically using this or inside a standard if statement.
				</p>
			</note>
		</subsection>
	</section>

	<section>
		<title>Ranges</title>

		<introduction>
			<p>
				In a for loop with the syntax <c>var=x:y:z</c>, such as
			</p>

			<p>
				<cd>
				<cline>for i=1:4</cline>
				<cline>  @show i</cline>
				<cline>end</cline>
				</cd>
			</p>

			<p>
				The syntax <c>1:4</c> is called a <c>Range</c> and is shorthand for all integers between 1 and 4 inclusively. Technically, this is called a <c>UnitRange</c> because the skip size between numbers is 1.
			</p>

			<p>
				If you type <c>typeof(1:4)</c>, it will return <c>UnitRange{Int64}</c>, a composite type which is a <c>UnitRange</c> with integers. Note the difference using <c>1.0:4.0</c>.  This is of type <c>StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}</c>, and the details of this are skipped for now.  In short, it is Floating Point version of a <c>UnitRange</c>.
			</p>

			<p>
				The other ranges we say included <c>1:2:11</c> and entering <c>typeof(1:2:11)</c> results in <c>StepRange{Int64, Int64}</c>.
			</p>

			<p>
				We will see in <xref ref="ch-arrays"/> that there is a handy way of expanding this shorthand way of writing these sets of numbers to that of an entire list (or technically array) of numbers.
			</p>
		</introduction>


		<subsection xml:id="sect-lin-range">
			<title>Linear Ranges</title>

			<p>
				As we see above, it easy to make ranges if we know the step between each pair. Another use would be to know the starting and ending value and the number of values. For example, if we want to start at 3 and end at 11 with 5 values, it's not too hard to compute this, but Julia has a built-in way to do it with the <c>range</c> command. For example,
			</p>

			<p>
				<cd>
				<cline>range(3,11,length=5)</cline>
				</cd>
			</p>

			<p>
				returns <c>3.0:2.0:11.0</c> and note that even though all of the arguments were integers that the result is a floating point range.
			</p>

			<p>
				Another nice function that does a similar thing is the <c>LinRange</c> function.
			</p>

			<p>
				<cd>
				<cline>LinRange(3,11,5)</cline>
				</cd>
			</p>

			<p>
				which returns <c>3.0, 5.0, 7.0, 9.0, 11.0</c> and this is an expanded version from above.
			</p>
		</subsection>
	</section>
</chapter>
