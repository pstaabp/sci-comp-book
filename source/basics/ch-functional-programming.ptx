<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="ch-functional-programming">
	<title>Functional Programming</title>
	<introduction>
		<p>
			This chapter introduces ideas of
			<url href="https://en.wikipedia.org/wiki/Functional_programming" visual="wikipedia">functional programming</url>, which is a way to think about programming using functions.
			Typically this requires a language that falls into the category of a
			<em>functional computer language</em>, one of which is Julia. In short, a
			language that has this feature has a function (or procedure) as a
			fundamental element of the language and one of which can be passed as
			arguments.
		</p>
	</introduction>

	<section>
		<title>Functional vs. Non-functional forms</title>
		<introduction>
			<p>
				Often functional programming is used with arrays or lists of other data.  Let
			</p>

			<p>
				<cd>
				<cline>arr=collect(1:5)</cline>
				</cd>
			</p>

			<p>
				Here's a simple example of taking all of the elements of <c>arr</c> and finding
				another array which is the square of each number. In a statement-based point-of-view:
			</p>

			<p>
				<cd>
				<cline>newarr=zeros(Int,5)  # this an array of zeros of length 5</cline>
				<cline>for i=1:5</cline>
				<cline>  newarr[i]=arr[i]^2</cline>
				<cline>end</cline>
				<cline>newarr</cline>
				</cd>
			</p>

			<p>
				which returns the array <c>[1,4,9,16,25]</c>.
			</p>

			<p>
				From a functional point-of-view, a common method is a <c>map</c> command which
				takes in an array and produces another array in which a function acts on each
				element of the array. In this case, the function is the square.
			</p>

			<p>
				<cd>
				<cline>f(x)=x^2</cline>
				<cline>arr=[1,2,3,4,5]</cline>
				<cline>map(f,arr)</cline>
				</cd>
			</p>

			<p>
				or more simply using an <term>anonymous function</term>,
			</p>

			<p>
				<cd>
				<cline>map(x-&gt;x^2,arr)</cline>
				</cd>
			</p>

			<p>
				The key to this example is the ability to pass the function as an argument to
				the <c>map</c> command. Once you get a feeling for functional programming, it is
				often an easier way to write code.<fn>An extreme example of this is to avoid
				using any for loops after understanding maps and other related functions.
				Although, often this can happen, it doesn't 1) make the underlying code any faster
				or 2) any easier to understand, so I don't generally prescribe to this philosophy.</fn>
			</p>
		</introduction>

		<subsection>
			<title>Anonymous Functions</title>
			<p>
				The example above included in the first argument <c>x-&gt;x^2</c>, which is an
				example of a <em>anonymous function</em>.  In short, it is anonymous because we
				didn't assign it to a name and instead just applied the function to the <c>map</c> command.
			</p>

			<p>
				Any time that a function is used in the form <c>-&gt;</c>, it is anonymous.
				For example, if we want to sum the contents of the array <c>A=[1,2,3,4,5]</c>, one way is to
			</p>

			<p>
				<cd>
				<cline>reduce((x,y)-&gt; x+y, A)</cline>
				</cd>
			</p>

			<p>
				which results in <c>15</c>, the sum of the elements of the array.  We'll see the
				<c>reduce</c> function in the next section.  Concentrate right now on the
				<c>(x,y)-&gt;x+y</c>, an anonymous functions can take on more than one variable.
			</p>

			<exercise>
				<p>
					<ol>
						<li>
							<p>
								Write a statement-based loop to take the array <c>[1,2,3,4,5]</c> and
								output an array that is the reciprocal of each number.
							</p>
						</li>

						<li>
							<p>
								Write a functional-based code using the <c>map</c> command to do the same.
							</p>
						</li>
					</ol>
				</p>
			</exercise>
		</subsection>

		<subsection>
			<title>Mapping over two arrays</title>
			<p>
				The <c>map</c> function can work over multiple arrays as long at the first argument,
				which is the function can take as inputs multiple values.  A simple example is to sum
				element by element over vectors like
			</p>

			<p>
				<cd>
				<cline>map(+,[1,2,3],[10,20,30])</cline>
				</cd>
			</p>

			<p>
				and the result is <c>[11, 22, 33</c>.
			</p>

			<p>
				This clearly used the built-in sum function, but we could have done the following:
			</p>

			<p>
				<cd>
				<cline>map((x,y)-&gt;x^2*y,[1,2,3],[10,20,30])</cline>
				</cd>
			</p>

			<p>
				which squares each element in the first array, then multiplies by a second array
				resulting in <c>[10, 80, 270]</c>.
			</p>
		</subsection>
	</section>

	<section xml:id="sect-reduce-array"><title>Reducing an array</title>
		<p>
			The <c>map</c> command in general takes in an array and returns an array.
			Another common task with arrays is to  reduce the entire array to a single value.
			If <c>arr=[1,2,3,4,5]</c>, then we can sum the values with the <c>reduce</c> command as in:
		</p>

		<p>
			<cd>
			<cline>reduce((x,y)-&gt;x+y,arr)</cline>
			</cd>
		</p>

		<p>
			which returns <c>15</c>.
		</p>

		<p>
			To multiply all numbers, we can type:
		</p>

		<p>
			<cd>
			<cline>reduce((x,y)-&gt;x*y,arr)</cline>
			</cd>
		</p>

		<p>
			and the result is <c>120</c>.  In both of these cases, there is a little bit hidden,
			so let's look at these in more detail.
		</p>

		<p>
			<ol>
				<li>
					<p>
						First, the first argument of the <c>reduce</c> command is a 2-argument (or binary) function.
					</p>
				</li>

				<li>
					<p>
						Secondly, the operation is done on all numbers on the array, but needs to start with some value (because it is a binary function).  In the sum case, the initial value is 0 (by default) and in the multiply case it is 1.
					</p>
				</li>
			</ol>
		</p>

		<p>
			These are perhaps obvious examples and each of these have the built-in functions <c>sum</c> and <c>prod</c> that find the sum and product of an array.
		</p>

		<p>
			Let's look at an example that returns the number of array elements that are greater than zero:
		</p>

		<p>
			<cd>
			<cline>numPos(arr) = reduce((n,val) -&gt; val &gt; 0 ? n+1 : n, arr, init=0)</cline>
			</cd>
		</p>

		<p>
			and then if it is tested on an array of both positive and negative numbers:
		</p>

		<p>
			<cd>
			<cline>numPos([-3,5,8,-2,11])</cline>
			</cd>
		</p>

		<p>
			this returns <c>3</c>. How this works is as follows. There are two values
			associated within reduce from the function. The first is <c>n</c> and the second is <c>val</c>.
		</p>

		<p>
			<ol>
				<li>
					<p>
						The variable <c>n</c> is initially 0 (this is the <c>init=0</c> part of the function call)
					</p>
				</li>

				<li>
					<p>
						On the first step, <c>val</c> takes on the first value in the array
						(or <c>-3</c>). It is checked if it is positive and if so, return
						<c>n+1</c> or <c>n</c>.  Since n=0 and <c>-3</c> is not positive, then the function returns 0.
					</p>
				</li>

				<li>
					<p>
						On the second step, <c>val</c> is 5 and this time the function
						returns <c>n+1</c> or 1
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is 8 and the function returns <c>n+1</c> or 2
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is -2 and the function returns <c>n</c> or 2
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is 11 and the function returns <c>n+1</c> or 3.
					</p>
				</li>

				<li>
					<p>
						Since the array has been passed through, the result is the last value or 3.
					</p>
				</li>
			</ol>
		</p>

		<exercise>
			<p>
				<ul>
					<li>
						<p>
							Write a reduce function that will count the number of times the string
							``hi'' appears in an array. Test it on <c>["hi","bye","hi","hello"]</c> and other arrays of strings.
						</p>
					</li>

					<li>
						<p>
							What does <c>reduce(string,["J","u","l","i","a"],init="")</c> do?
						</p>
					</li>
				</ul>
			</p>
		</exercise>
	</section>

	<section xml:id="section-mapreduce"><title>The <c>mapreduce</c> function</title>
		<p>
			The
			<url href="http://docs.julialang.org/en/release-0.5/stdlib/collections/#Base.mapreduce" visual="julialang.org">
			<c>mapreduce</c></url> function is perhaps more helpful than <c>reduce</c>. For example,
			if we want to sum the squares of each number in an array, then <c>mapreduce</c> can do this easily.
		</p>

		<p>
			<cd>
			<cline>mapreduce(x-&gt;x^2,+,[1,2,3],init=0)</cline>
			</cd>
		</p>

		<p>
			is a short-hand way to do <m>1^2+2^2+3^2=14</m>. Note: julia also has a version of the <c>sum</c> function that can apply a function.  For example,
		</p>

		<p>
			<cd>
			<cline>sum(x-&gt;x^2,[1,2,3])</cline>
			</cd>
		</p>

		<p>
			also returns <c>[1, 4, 9]</c>.
		</p>

		<exercise>
			<statement>
				<p>
					In calculus, an important infinite series is
				</p>

				<p>
					<me>
						1 + \frac{1}{4} + \frac{1}{9} + \frac{1}{16} + \cdots
					</me>
				</p>

				<p>
					and although we can't sum an infinite number of terms, a finite version of
					this is still useful.
				</p>

				<p>
					Use <c>mapreduce</c> to sum the first 20 terms.
				</p>
			</statement>

			<hint>
				<p>
					Use <c>arr=collect(1:20)</c> for the array and the function is the reciprocal.
				</p>
			</hint>
		</exercise>
	</section>

	<section>
		<title>Mapping a Function over an 2D array</title>
		<p>
			Above, we saw the <c>map!</c> function which applies a function over each element of
			the array.  We will see in <xref ref="ch-prob-models"/>  that the
			<c>mapslices</c> functions is quite helpful.
		</p>

		<p>
			Consider the array <c>A=[i+j for i=1:10,j=1:3]</c> which returns the array
			<cd>
			<cline>10Ã—3 Matrix{Int64}:</cline>
			<cline>  2   3   4</cline>
			<cline>  3   4   5</cline>
			<cline>  4   5   6</cline>
			<cline>  5   6   7</cline>
			<cline>  6   7   8</cline>
			<cline>  7   8   9</cline>
			<cline>  8   9  10</cline>
			<cline>  9  10  11</cline>
			<cline> 10  11  12</cline>
			<cline> 11  12  13</cline>
			</cd>
		</p>

		<p>
			If we want to sum down the columns of the array, we can enter
		</p>

		<p>
			<cd>
			<cline>mapslices(sum,A,dims=[1])</cline>
			</cd>
		</p>

		<p>
			which returns the array<c>[65  75  85]</c>,
			which is a 1D array with the column sums.  The <c>mapslices</c> function needs three
			arguments, a function that can take an array, a 2D array and the keyword <c>dims</c>
			which says how to apply the sum.  Note: we can also replace the command <c>sum</c>
			with <c>+</c> as well.
		</p>

		<p>
			If instead we wanted to sum along rows, then
		</p>

		<p>
			<cd>
			<cline>mapslices(sum,A,dims=[2])</cline>
			</cd>
		</p>

		<p>
			which returns
		</p>

		<p>
			<cd>
			<cline>10Ã—1 Matrix{Int64}:</cline>
			<cline>  9</cline>
			<cline> 12</cline>
			<cline> 15</cline>
			<cline> 18</cline>
			<cline> 21</cline>
			<cline> 24</cline>
			<cline> 27</cline>
			<cline> 30</cline>
			<cline> 33</cline>
			<cline> 36</cline>
			</cd>
		</p>

		<p>
			Although note that this is a 2D array. The function <c>mapslices</c> returns an array of
			one fewer dimensions as the original.
		</p>

		<exercise>
			<p>
				Using the matrix <c>A=[i+j for i=1:10,j=1:3]</c>,
			</p>

			<p>
				<ul>
					<li>
						<p>
							evaluate <c>mapslices(prod,A,dims=[1])</c>.  What does that function do?
						</p>
					</li>

					<li>
						<p>
							evaluate <c>mapslices(prod,A,dims=[2])</c>.  What does that function do?
						</p>
					</li>

					<li>
						<p>
							use the <c>mapslices</c> function to find the maximum element in each row.
						</p>
					</li>

					<li>
						<p>
							use the <c>mapslices</c> function to find the maximum element in each column.
						</p>
					</li>
				</ul>
			</p>
		</exercise>
	</section>

	<section>
		<title>Writing fast code</title>
		<introduction>
			<p>
				The last part of this chapter will show one aspect of writing fast code, an important aspect of scientific computing. We will study a number of ways to sum up the first <m>n</m> counting numbers and determine why the timing of
				things are different. Also, we are going to test the various types of integers as well to determine the speed of things with that. In each case we are going to create a function and then time it.
			</p>
		</introduction>

		<subsection>
			<title>Attempt #1</title>
			<p>
				Let's start by making an array of all of the numbers, then summing them
				in a for loop:
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function sum1(n::Int)
  local arr = collect(1:n)
  local sum = 0
  for i in arr
    sum += i
  end
  sum
end
				</input>
			</program>

			<p>
				On my laptop: <c>@time sum1(1_000_000)</c>.
			</p>

			<p>
				returns
			</p>

			<p>
				<cd>
				<cline>0.026257 seconds (2 allocations: 7.629 MiB, 91.73% gc time)</cline>
				<cline></cline>
				<cline>500000500000</cline>
				</cd>
			</p>

			<p>
				The <c>@time</c> is called a macro, which is similar to a function, however is more flexible.
				The first line clearly has the time, but also the array allocations and memory allocated.
				The second line of the macro returns the value of the function.
			</p>

			<p>
				If we repeat this for the sum of the first billion counting numbers:
				<cd>
				<cline>@time sum1(1_000_000_000)</cline>
				</cd>
			</p>

			<p>
				it takes a while to get
			</p>

			<p>
				<cd>
				<cline>  4.286106 seconds (2 allocations: 7.451 GiB, 7.30% gc time)</cline>
				<cline></cline>
				<cline>  500000000500000000</cline>
				</cd>
			</p>

			<p>
				The big difference between these is the total memory allocation.
				There is a 1000-fold increase in memory allocated (note the MiB or megabytes
				versus GiB or gigabytes).  This also shows about a 160-fold increase in time,
				surprising that it didn't go up 1000 times as well.
			</p>

			<p>
				Allocating memory is a time-expensive endeavor.  Also, even though the machine
				that I ran this on has 16 gigabytes, perhaps it couldn't get all 7.5 GiB it
				needed for this operation at once.  This is shown with the 7.30\% gc time,
				which mean garbage collection.  In short, there was some time needed to
				handling so much memory.  Garbage collection is a way to clean up allocated memory
				that is no longer needed.  It's complicated, but the percentage of gc can
				reveal why a calcuation may be taking longer than expected.
			</p>

			<p>
				If you have some patience, try this will 2 billion or more and see the results.
				You will probably need more allocation time and should be at least twice as long.
			</p>
		</subsection>

		<subsection>
			<title>Attempt #2</title>
			<p>
				The big difference seemed to be the total memory allocation, so let's
				try a version where we don't allocate the array.
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function sum2(n::Integer)
  local sum = 0
  for i=1:n
    sum+=i
  end
  sum
end
				</input>
			</program>

			<p>
				and running it as <c>@time sum2(1_000_000_000)</c> we get
			</p>

			<p>
				<cd>
				<cline>0.000000 seconds</cline>
				<cline></cline>
				<cline>  500000000500000000</cline>
				</cd>
			</p>

			<p>
				and notice that the time has shrunk to zero--we'll see later why this is true.
				If we try for larger numbers, such as <c>@time sum2(100_000_000_000)</c>,
				which still takes almost no time, but notice that that the result is not correct.  Why?
				Consider the ideas from <xref ref="ch-data-types"/>.
			</p>
		</subsection>

		<subsection>
			<title>Attempt #3</title>
			<p>
				Hopefully you thought about the strange result above.  If you thought overflow,
				give yourself a gold star.  To avoid this, let's write a <c>BigInt</c> version of this:
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function sum3(n::Int)
  local sum = big(0)
  for i=1:n
    sum+=i
  end
  sum
end
				</input>
			</program>

			<p>
				and, <c>@time sum3(1_000_000)</c> returns
			</p>

			<p>
				<cd>
				<cline>0.146406 seconds (3.00 M allocations: 45.776 MiB)</cline>
				<cline></cline>
				<cline>  500000500000</cline>
				</cd>
			</p>

			<p>
				Comparing this with the results at the beginning of Attempt #1, shows that
				BigInts are much slower as mentioned in <xref ref="ch-data-types"/>.
			</p>

			<p>
				<cd>
				<cline>@time sum3(10_000_000)</cline>
				</cd>
			</p>

			<p>
				returns
			</p>

			<p>
				<cd>
				<cline>2.288845 seconds (30.00 M allocations: 457.764 MiB, 34.08% gc time)
				</cline>
				<cline></cline>
				<cline>  50000005000000</cline>
				</cd>
			</p>

			<p>
				which is more than 10 times slower, so it appears that this is linear as possibly
				as expected. This isn't practical to find much larger sums though.
			</p>
		</subsection>

		<subsection>
			<title>Attempt #4</title>
			<p>
				Let's trying using the <c>reduce</c> function on BigInts:
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function sum4(n::Int)
    reduce(+,1:big(n))
end
				</input>
			</program>

			<p>
				Then <c>@time sum4(1_000_000)</c> returns
			</p>

			<p>
				<cd>
				<cline>  0.335802 seconds (5.00 M allocations: 91.553 MiB, 20.56% gc time)</cline>
				<cline></cline>
				<cline>  500000500000</cline>
				</cd>
			</p>

			<p>
				Notice that this allocates about 91 MiB of memory, which isn't a lot, but this is
				probably due to the <c>BigInt</c> allocations.  Also, this is about twice the
				amount of time as that in Attempt #3. Notice also a significant amount of
				gc (garbage collection) time.
			</p>

			<p>
				Also, <c>@time sum4(10_000_000)</c> returns
			</p>

			<p>
				<cd>
				<cline>  3.254972 seconds (50.00 M allocations: 915.528 MiB, 16.57% gc time)</cline>
				<cline></cline>
				<cline>  50000005000000</cline>
				</cd>
			</p>

			<p>
				returns: <c>display(@time sum4(10_000_000))</c> \printpythontex[verbatim]
			</p>

			<p>
				which is about 10 times slower that the previous one, and still about twice
				the speed of <c>sum3</c> for the same number <c>n</c>.
			</p>

			<p>
				Also notice that the number and size of the allocations have increased by a factor of 10,
				which should not be surprising.  However, notice that they are quite large. For the second
				sum, there was nearly 1 Gb of allocation despite no array.  This is due to the BigInt
				which allocates quite a bit of memory.  It appears that julia allocates memory for every
				BigInt created (and there are 10 million in this example).
			</p>
		</subsection>

		<subsection>
			<title>Attempt #5</title>
			<p>
				Let's use the built-in <c>sum</c> command. Entering <c>@time sum(1:big(10)^6)</c>
				returns
			</p>

			<p>
				<cd>
				<cline> 0.001495 seconds (41 allocations: 816 bytes)</cline>
				<cline></cline>
				<cline>  500000500000</cline>
				</cd>
			</p>

			<p>
				and note that higher powers of 10 do not increase the time much. For example,
				<c>@time sum(1:big(10)^20)</c> results in
			</p>

			<p>
				<cd>
				<cline>0.000828 seconds (42 allocations: 904 bytes)</cline>
				<cline></cline>
				<cline>  5000000000000000000050000000000000000000</cline>
				</cd>
			</p>

			<p>
				What is going on? How is this so fast?  Think about this and we'll answer it below.
			</p>

			<exercise>
				<p>
					Repeat Attempts #1--#4 for <c>Int128</c>.  That is, make sure that the calculations are
					being done using this type.  For the <c>for</c> loops, start with
				</p>

				<p>
					<cd>
					<cline>local sum = Int128(0)</cline>
					</cd>
				</p>

				<p>
					and for the <c>reduce</c> function use <c>Int128(n)</c> instead of <c>big(n)</c>.
				</p>

				<p>
					Compare your results with those above.
				</p>
			</exercise>
		</subsection>
	</section>

	<section>
		<title>Summary of Results</title>
		<p>
			There were a lot of factors going on in the above example.  Here's a summary.
		</p>

		<p>
			<ul>
				<li>
					<p>
						<em>Allocating an array is expensive (in terms of memory and time).</em>  In Attempt #1, we
						created an array using the <c>collect</c> function. The creation was why this took so
						much time.
					</p>
				</li>

				<li>
					<p>
						<em>BigInts and <c>Int128</c> are slower than <c>Int64</c>s.</em>   We noticed
						that switching from <c>Int64</c> to <c>BigInt</c> in Attempt #2 to #3, there was a
						significant drop in speed.  In short, <c>BigInt</c>s are slow.  Only use them when needed.
					</p>

					<p>
						You should have noticed from the exercise that <c>Int128</c> is a viable alternative to
						<c>Int64</c> if you need larger integers.  <c>Int128</c> is slower than <c>Int64</c>, but still much better than <c>BigInt</c>.  Only use <c>BigInt</c> when you need really large integers.
					</p>
				</li>

				<li>
					<p>
						<em>Sometimes julia is super smart about some operations.</em>  In both Attempt #2 and
						Attempt #5, we got much shorter times than expected.  In both, you would expect
						summing 1000 times more numbers would take 1000 times longer, but this isn't true.
						In both cases, julia recognizes that integers are begin summed and is probably
						using the formula,
					</p>

					<p>
						<me>
							1+2+3 + \cdots + n = \frac{n(n+1)}{2}
						</me>
					</p>

					<p>
						and using this formula can be done for any number <m>n</m> with no summing at all.
					</p>
				</li>
			</ul>
		</p>
	</section>

	<section xml:id="sect-faster-fibonacci"><title>Computing Fibonacci Numbers</title>
		<introduction>
			<p>
				In <xref ref="sect-recursion"/>, there was an exercise to use recursion to find the
				fibonacci numbers.  A possible solution to this is:
			</p>

			<p>
				<cd>
				<cline>fibonacci(n::Integer) = (n==1 || n==2) ? 1 : fibonacci(n-1) + fibonacci(n-2)</cline>
				</cd>
			</p>

			<p>
				where we have used the ternary <c>if-then-else</c>.  Note: if <c>n</c> is 1 or 2,
				then 1 is returned, if not it uses the recursive formula.  The first 10 fibonacci
				numbers are found with
			</p>

			<p>
				<cd>
				<cline>map(fibonacci,1:10)</cline>
				</cd>
			</p>

			<p>
				and this results in the array<c>[1 1 2 3 5 8 13 21 34 55]</c>.
			</p>

			<p>
				It is fast to find the fibonacci numbers for smaller values, but consider
			</p>

			<p>
				<cd>
				<cline>@time fibonacci(45)</cline>
				</cd>
			</p>

			<p>
				took 5.03 seconds.  If we find <c>@time fibonacci(41)</c>, it takes about twice as long.
				Consider <c>fibonacci(5)</c>.  Inside the function, it calls <c>fibonacci(4)</c>
				and <c>fibonacci(3)</c>.  Each of these then called the previous two.
				This can be seen in the following tree graph where <m>f(n)</m> is the fibonacci function:
			</p>

			<figure xml:id="fig-fibonacci-tree-graph">
				<caption>
				Find a point on a line that minimizes distance
				</caption>

				<image width="75%"  xml:id="img-fibonacci-tree-graph">
					<latex-image>
					<![CDATA[
					\begin{tikzpicture}[scale=0.75]
					\node (A) at (0,10) [draw] {$f(5)$};
					\node (B) at (-2,8) [draw] {$f(4)$};
					\node (C) at (2,8) [draw] {$f(3)$};
					\draw[->] (A) -- (B);
					\draw[->] (A) -- (C);
					\node (D) at (-4,6) [draw] {$f(3)$};
					\node (E) at (-2,6) [draw] {$f(2)$};
					\draw[->] (B) -- (D);
					\draw[->] (B) -- (E);
					\node (F) at (2,6) [draw] {$f(2)$};
					\node (G) at (4,6) [draw] {$f(1)$};
					\draw[->] (C) -- (F);
					\draw[->] (C) -- (G);
					\node (H) at (-6,4) [draw] {$f(2)$};
					\node (I) at (-4,4) [draw] {$f(1)$};
					\draw[->] (D) -- (H);
					\draw[->] (D) -- (I);
					\end{tikzpicture}
					]]>
					</latex-image>
				</image>
			</figure>

			<p>
				Since each of the endpoints (either <m>f(2)</m> or <m>f(1)</m> requires and evaluation
				as does each arrow, there are a total of 13 evaluations for this.  If we define:
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function fibonacciEval(n::Integer)
  global num_evals
  if n==1 || n==2
    num_evals +=1
    return 1
  else
    num_evals += 2
    return fibonacciEval(n-1) + fibonacciEval(n-2)
  end
end
				</input>
			</program>

			<p>
				then
				<cd>
				<cline>num_evals=0</cline>
				<cline>fibonacciEval(5)</cline>
				<cline>num_evals</cline>
				</cd>
			</p>

			<p>
				returns <c>13</c>. Also
			</p>

			<p>
				<cd>
				<cline>num_evals=0</cline>
				<cline>fibonacciEval(20)</cline>
				<cline>num_evals</cline>
				</cd>
			</p>

			<p>
				returns <c>20293</c> and
			</p>

			<p>
				<cd>
				<cline>num_evals=0</cline>
				<cline>fibonacciEval(21)</cline>
				<cline>num_evals</cline>
				</cd>
			</p>

			<p>
				returns <c>32836</c> and notice that finding the 21st fibonacci number takes about
				60% more operations and therefore would take about this much longer.
			</p>

			<p>
				Thinking about this result shows that we aren't doing things efficiently.  If we have
				already calculated the 19th and 20th fibonacci numbers, why does it take an extra 60% longer?
				Basically this is because we aren't saving the results to be reused.
			</p>
		</introduction>

		<subsection>
			<title>Speeding Up Fibonacci</title>
			<p>
				As we saw above, the standard recursive version of <c>fibonacci</c> function is very
				slow.<fn>in fact, it is <m>O(e^n)</m> </fn>
				We now attempt to find a faster version. The following is a fibonacci function
				that uses a for loop:
			</p>


			<program language="julia" line-numbers="yes">
				<input>
function fibonacci2(n::Integer)
  local x,y = (1,1)
  for i = 1:n-1
    x,y = (y, x+y)
  end
  x
end
				</input>
			</program>

			<p>
				and note that there is no recursive call. Instead, we use a tuple to iterate pairs
				of numbers <c>(x,y)</c> which get updated each time through the for loop.
				Notice on line 2, this initializes the fibonacci sequence and line 4 is the key to this.
				<c>x</c> takes on the value of <c>y</c> and then <c>y</c> is the sum of the previous
				two integers.
			</p>

			<p>
				You should run this and if you do, note that <c>@time fibonacci2(100)</c> returns
				<cd>
				<cline>print(@time fibonacci2(50))</cline>
				</cd>
			</p>

			<p>
				which is basically zero and obviously much faster than the 45th fibonacci number
        with the original function. The exercise below explores the <c>fibonacci2</c> function.
			</p>

			<exercise>
				<p>
					<ol>
						<li>
							<p>
								Determine which fibonacci number results in an overflow for <c>Int64</c>. Do this by trial and error with the <c>fibonacci2</c> function.
							</p>
						</li>

						<li>
							<p>
								Rewrite the <c>fibonacci2</c> function to return a <c>BigInt</c> version
                if <m>n</m> is greater than or equal to the number in #1.
							</p>
						</li>

						<li>
							<p>
								Find the first 200 fibonacci numbers.
							</p>
						</li>
					</ol>
				</p>
			</exercise>
		</subsection>
	</section>
</chapter>
