<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-functional-programming">
	<title>Functional Programming</title>

	<objectives>
		<ul>
			<li>
				<p>
					Explain what functional programming is and how it differs from non-functional programming.
				</p>
			</li>

			<li>
				<p>
					Understanding anonymous functions, how to write them and when to use them.
				</p>
			</li>

			<li>
				<p>
					Using the map command to create a new array from an old one.
				</p>
			</li>

			<li>
				<p>
					Using the reduce and mapreduce commands to take an array and combine it to a single value.
				</p>
			</li>

			<li>
				<p>
					Understand what is needed to develop fast code.
				</p>
			</li>
		</ul>
	</objectives>

	<introduction>
		<p>
			This chapter introduces ideas of <url href="https://en.wikipedia.org/wiki/Functional_programming" visual="wikipedia">functional programming</url>, which is a way to think about programming using functions. Typically this requires a language that falls into the category of a <em>functional computer language</em>, one of which is Julia. In short, a language that has this feature has a function (or procedure) as a fundamental element of the language and one of which can be passed as arguments.
		</p>
	</introduction>

	<section>
		<title>Functional vs. Non-functional forms</title>

		<introduction>
			<p>
				A common operation is to start with some array and create a new array based on the first one where there is some relation between the two.  This is often called a mapping.  If we start with the following array:
			</p>

			<p>
				<cd>
				<cline>arr=collect(1:5)</cline>
				</cd>
			</p>

			<p>
				and we want a new array that is the square of each element. Using a statement-based method, the following will create this using a for loop:
			</p>

			<p>
				<cd>
				<cline>newarr=zeros(Int,5)  # this an array of zeros of length 5</cline>
				<cline>for i=1:5</cline>
				<cline>  newarr[i]=arr[i]^2</cline>
				<cline>end</cline>
				<cline>newarr</cline>
				</cd>
			</p>

			<p>
				which returns the array <c>[1,4,9,16,25]</c>.
			</p>

			<p>
				There is a much simpler way to do this using a method called <c>map</c> which takes in a function and an array and produces another array in which a function acts on each element of the array. In this case, the function is the square.
			</p>

			<p>
				<cd>
				<cline>f(x)=x^2</cline>
				<cline>arr=[1,2,3,4,5]</cline>
				<cline>map(f,arr)</cline>
				</cd>
			</p>

			<p>
				This can be written even more simply, by using an <term>anonymous function</term> for the first element or:
			</p>

			<p>
				<cd>
				<cline>map(x-&gt;x^2,arr)</cline>
				</cd>
			</p>

			<p>
				The key to this example is the ability to pass the function as an argument to the <c>map</c> command. Once you get a feeling for functional programming, it is often an easier way to write code.<fn>An extreme example of this is to avoid using any for loops after understanding maps and other related functions. Although, often this can happen, it doesn't 1) make the underlying code any faster or 2) any easier to understand, so I don't generally prescribe to this philosophy.</fn>
			</p>
		</introduction>


		<subsection>
			<title>Anonymous Functions</title>

			<p>
				The example above included in the first argument <c>x-&gt;x^2</c>, which is an example of a <em>anonymous function</em>. In short, it is anonymous because we didn't assign it to a name and instead just included the function as an argument to the <c>map</c> command and this is precisely when anonymous functions are used.
			</p>

			<p>
				Recall that we saw a couple of examples of this in <xref ref="ch-arrays"/>. One example was <c>filter(n -&gt; n%2 == 0, A)</c> which returns all elements of <c>A</c> where the element is an even number.  The first argument of <c>filter</c> is a function and if the function is simple, passing in as an anonymous function is typical.  The other example we used was in the <c>sort</c> command and can pass a function which is applied before sorting using the <c>by</c> command.
			</p>

			<p>
				Any time that a function is used in the form <c>-&gt;</c>, it is anonymous. For example, if we want to sum the contents of the array <c>A=[1,2,3,4,5]</c>, one way is to
			</p>

			<p>
				<cd>
				<cline>reduce((x,y)-&gt; x+y, A)</cline>
				</cd>
			</p>

			<p>
				which results in <c>15</c>, the sum of the elements of the array.  We'll see the <c>reduce</c> function in the next section.  Concentrate right now on the <c>(x,y)-&gt;x+y</c>, an anonymous functions can take on more than one variable.
			</p>

			<exercise>
				<p>
					<ol>
						<li>
							<p>
								Write a statement-based loop to take the array <c>[1,2,3,4,5]</c> and output an array that is the reciprocal of each number.
							</p>
						</li>

						<li>
							<p>
								Write a functional-based code using the <c>map</c> command to do the same.
							</p>
						</li>
					</ol>
				</p>
			</exercise>
		</subsection>


		<subsection>
			<title>Mapping over two arrays</title>

			<p>
				The <c>map</c> function can work over multiple arrays as long at the first argument, which is the function can take as inputs multiple values.  A simple example is to multiply element by element over vectors like
			</p>

			<p>
				<cd>
				<cline>map(*,[1,2,3],[10,20,30])</cline>
				</cd>
			</p>

			<p>
				and the result is <c>[10, 40, 90]</c>.
			</p>

			<p>
				An astute reader will remember that we could have also done this with broadcasting as in <c>[1,2,3] .* [10, 20, 30]</c>, but the point of this is show an example with mapping over two arrays.  Another example of this using an anonymous functions is
			</p>

			<p>
				<cd>
				<cline>map((x,y)-&gt;x^2+y,[1,2,3],[10,20,30])</cline>
				</cd>
			</p>

			<p>
				which squares each element in the first array, then adds to a second array resulting in <c>[11, 24, 39]</c> and again this could have been done with broadcasting.
			</p>
		</subsection>
	</section>

	<section xml:id="sect-reduce-array">
		<title>Reducing an array</title>

		<p>
			The <c>map</c> command in general takes in an array and returns an array. Another common task with arrays is to  reduce the entire array to a single value. If <c>arr=[1,2,3,4,5]</c>, then we can sum the values with the <c>reduce</c> command as in:
		</p>

		<p>
			<cd>
			<cline>reduce((x,y)-&gt;x+y,arr)</cline>
			</cd>
		</p>

		<p>
			which returns <c>15</c>.  This could be written simpler with <c>reduce(+, arr)</c>.
		</p>

		<p>
			To multiply all numbers, we can type:
		</p>

		<p>
			<cd>
			<cline>reduce((x,y)-&gt;x*y,arr)</cline>
			</cd>
		</p>

		<p>
			and the result is <c>120</c>.   This could be written simpler with <c>reduce(*, arr)</c>. In both of these cases, there is a little bit hidden, so let's look at these in more detail.
		</p>

		<p>
			<ol>
				<li>
					<p>
						First, the first argument of the <c>reduce</c> command is a 2-argument (or binary) function.
					</p>
				</li>

				<li>
					<p>
						Secondly, the operation is done on all numbers on the array, but needs to start with some value (because it is a binary function).  In the sum case, the initial value is 0 (by default) and in the multiply case it is 1.
					</p>
				</li>
			</ol>
		</p>

		<p>
			These are perhaps obvious examples and each of these have the built-in functions <c>sum</c> and <c>prod</c> that find the sum and product of an array.
		</p>

		<p>
			Let's look at an example that returns the number of array elements that are greater than zero:
		</p>

		<p>
			<cd>
			<cline>numPos(arr) = reduce((n,val) -&gt; val &gt; 0 ? n+1 : n, arr, init=0)</cline>
			</cd>
		</p>

		<p>
			and then if it is tested on an array of both positive and negative numbers:
		</p>

		<p>
			<cd>
			<cline>numPos([-3,5,8,-2,11])</cline>
			</cd>
		</p>

		<p>
			this returns <c>3</c>. How this works is as follows. There are two values associated within reduce from the function. The first is <c>n</c> and the second is <c>val</c>.
		</p>

		<p>
			<ol>
				<li>
					<p>
						The variable <c>n</c> is initially 0 (this is the <c>init=0</c> part of the function call)
					</p>
				</li>

				<li>
					<p>
						On the first step, <c>val</c> takes on the first value in the array (or <c>-3</c>). It is checked if it is positive and if so, return <c>n+1</c> or <c>n</c>.  Since n=0 and <c>-3</c> is not positive, then the function returns 0.
					</p>
				</li>

				<li>
					<p>
						On the second step, <c>val</c> is 5 and this time the function returns <c>n+1</c> or 1
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is 8 and the function returns <c>n+1</c> or 2
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is -2 and the function returns <c>n</c> or 2
					</p>
				</li>

				<li>
					<p>
						<c>val</c> is 11 and the function returns <c>n+1</c> or 3.
					</p>
				</li>

				<li>
					<p>
						Since the array has been passed through, the result is the last value or 3.
					</p>
				</li>
			</ol>
		</p>

		<exercise>
			<p>
				<ul>
					<li>
						<p>
							Write a reduce function that will count the number of times the string <c>"hi"</c> appears in an array. Test it on <c>["hi","bye","hi","hello"]</c> and other arrays of strings.
						</p>
					</li>

					<li>
						<p>
							What does <c>reduce(*, ["J","u","l","i","a"],init="")</c> do?
						</p>
					</li>
				</ul>
			</p>
		</exercise>
	</section>

	<section xml:id="section-mapreduce">
		<title>The <c>mapreduce</c> function</title>

		<p>
			The <url href="http://docs.Julialang.org/en/release-0.5/stdlib/collections/#Base.mapreduce" visual="Julialang.org"> <c>mapreduce</c></url> function is perhaps more helpful than <c>reduce</c>. For example, if we want to sum the squares of each number in an array, then <c>mapreduce</c> can do this easily.
		</p>

		<p>
			<cd>
			<cline>mapreduce(x-&gt;x^2,+,[1,2,3],init=0)</cline>
			</cd>
		</p>

		<p>
			is a short-hand way to do <m>1^2+2^2+3^2=14</m>.  For <c>mapreduce</c>, the first argument is a function of one variable (unary) that is applied to every element of array.  The second argument is a binary element that is used for the reduce part. Note: Julia also has a version of the <c>sum</c> function that can apply a function.  For example, <c>sum(x-&gt;x^2,[1,2,3])</c> returns the sum of <c>14</c>.
		</p>

		<p>
			Another example that we will see later is how to write a polynomial using its coefficients.  For example, if <c>coeffs = [-2,4,5,7]</c>, then we want to create a way to produce the polynomial <c>"-2 x^0 + 4 x^1  + 5 x^2  + 7 x^3"</c>.  This is a clear candidate for either a reduce or mapreduce because we have an array and reduce a single thing (in this case a string).  We will use <c>mapreduce</c> in this case because there is a transformation of each element which produces the polynomial term and then the reduce is a concatenation.
		</p>

		<p>
			Although it seems like we should use the array itself, we are going to use the array (technically the range), <c>1:length(coeffs)</c>, so we can produce the powers in each of the term.  Therefore the mapping function will be
		</p>

		<p>
			<cd>
			<cline>i -&gt; "$(coeffs[i])x^($i-1)"</cline>
			</cd>
		</p>

		<p>
			which take a number <c>i</c> and looks up the right coeffs and raise to the <c>i-1</c> power, since we need to shift the power by one. Next, we need a function that will concatenate the terms.  This will be
		</p>

		<p>
			<cd>
			<cline>(str, term) -&gt; str * " + $term "</cline>
			</cd>
		</p>

		<p>
			where <c>str</c> is the current version of the polynomial string and <c>term</c> will be the current term (which is created with the mapping function). Putting this altogether
		</p>

		<p>
			<cd>
			<cline>mapreduce(i -&gt; "$(coeffs[i]) x^$(i-1)", (str, term) -&gt; str * " + $term " , 1:length(coeffs) )</cline>
			</cd>
		</p>

		<p>
			and this will return the string <c>"-2 x^0 + 4 x^1  + 5 x^2  + 7 x^3 "</c>.  We will use this in <xref ref="sect-poly-parametric"/> when we crate a Polynomial type and this function will show the results in a more natural way.
		</p>

		<exercise>
			<statement>
				<p>
					In calculus, an important infinite series is
				</p>

				<p>
					<me>
						1 + \frac{1}{4} + \frac{1}{9} + \frac{1}{16} + \cdots
					</me>
				</p>

				<p>
					and although we can't sum an infinite number of terms, a finite version of this is still useful.
				</p>

				<p>
					Use <c>mapreduce</c> to sum the first 20 terms.
				</p>
			</statement>

			<hint>
				<p>
					Use <c>arr=1:20</c> for the array and the mapping function is the reciprocal.
				</p>
			</hint>
		</exercise>
	</section>

	<section>
		<title>Mapping a Function over an 2D array</title>

		<p>
			Above, we saw the <c>map</c> function which applies a function over each element of the array.  We will see in <xref ref="ch-prob-models"/>  that the <c>mapslices</c> functions is quite helpful.
		</p>

		<p>
			Consider the array <c>A=[i+j for i=1:10,j=1:3]</c> which returns the array
			<cd>
			<cline>10×3 Matrix{Int64}:</cline>
			<cline>  2   3   4</cline>
			<cline>  3   4   5</cline>
			<cline>  4   5   6</cline>
			<cline>  5   6   7</cline>
			<cline>  6   7   8</cline>
			<cline>  7   8   9</cline>
			<cline>  8   9  10</cline>
			<cline>  9  10  11</cline>
			<cline> 10  11  12</cline>
			<cline> 11  12  13</cline>
			</cd>
		</p>

		<p>
			If we want to sum down the columns of the array, we can enter
		</p>

		<p>
			<cd>
			<cline>mapslices(sum,A,dims=[1])</cline>
			</cd>
		</p>

		<p>
			which returns the array<c>[65  75  85]</c>, which is a 1D array with the column sums.  The <c>mapslices</c> function needs three arguments, a function that can take an array, a 2D array and the keyword <c>dims</c> which says how to apply the sum.  Note: we can also replace the command <c>sum</c> with <c>+</c> as well.
		</p>

		<p>
			If instead we wanted to sum along rows, then
		</p>

		<p>
			<cd>
			<cline>mapslices(sum,A,dims=[2])</cline>
			</cd>
		</p>

		<p>
			which returns
		</p>

		<p>
			<cd>
			<cline>10×1 Matrix{Int64}:</cline>
			<cline>  9</cline>
			<cline> 12</cline>
			<cline> 15</cline>
			<cline> 18</cline>
			<cline> 21</cline>
			<cline> 24</cline>
			<cline> 27</cline>
			<cline> 30</cline>
			<cline> 33</cline>
			<cline> 36</cline>
			</cd>
		</p>

		<p>
			Although note that this is a 2D array. The function <c>mapslices</c> returns an array of one fewer dimensions as the original.
		</p>

		<exercise>
			<p>
				Using the matrix <c>A=[i+j for i=1:10,j=1:3]</c>,
			</p>

			<p>
				<ul>
					<li>
						<p>
							evaluate <c>mapslices(prod,A,dims=[1])</c>.  What does that function do?
						</p>
					</li>

					<li>
						<p>
							evaluate <c>mapslices(prod,A,dims=[2])</c>.  What does that function do?
						</p>
					</li>

					<li>
						<p>
							use the <c>mapslices</c> function to find the maximum element in each row.
						</p>
					</li>

					<li>
						<p>
							use the <c>mapslices</c> function to find the maximum element in each column.
						</p>
					</li>
				</ul>
			</p>
		</exercise>
	</section>
</chapter>
