<?xml version="1.0" encoding="UTF-8" ?>

<chapter xml:id="ch-api">
  <title>Working with a web API and JSON strings</title>

  <introduction>
    <p>
      This chapter will shown how to interact with a web API, a common way of getting data from a webserver in a way that can be more easily processed than with a HTML page. We first start with what a JSON string is and how to parse it, recall some basics of dictionaries from <xref ref="sect-dictionaries"/> and then make API calls using some network tools in Julia.
    </p>
  </introduction>

  <section xml:id="sec-json">
    <title>JSON Strings</title>

    <p>
      A JSON string is a robust way of storing data as a single string.  It stands for Javascript Object Notation and is the most ubiquitous way of passing data between webservers or often between a webserver and a client.  The following is an example of something we saw in <xref ref="sect-dictionaries"/>
    </p>


    <program language="julia" line-numbers="yes">
      <input>
      str = """
      {
        "first_name": "Homer",
        "last_name": "Simpson",
        "age":45,
        "phones": [
          {"number": "987-555-1234", "type": "home"},
          {"number": "987-555-1212", "type": "cell"}
        ],
        "home_address": {
          "street": "742 Evergreen Terrace",
          "city": "Springfield"
        },
        "work_address": {
          "street": "10 Power Plant Lane",
          "city": "Springfield"
        }
      }
      """
      </input>
    </program>

    <p>
      Recall that a multiline string in Julia starts and ends with triple double quotes <c>"""</c>.  The rest of it looks like a Dictionary and that is the type of object we will get when parsing the string.
    </p>

    <p>
      A few things to note is that an object with key-value pairs are surrounded by curly (squiggly) braces <c>{}</c> and similar to Julia arrays are square brackets like <c>[]</c>. Notice that all strings must be surrounded by double quotes and the key value pairs are separated by a colon (<c>:</c>).
    </p>

    <p>
      Let's say that this string was sent by a webservice and you need to do something to the object (perhaps display its results in a nice format).  The first thing to do is to parse the string using the <c>JSON</c> package.  Make sure you have downloaded it and are <c>using JSON</c>.
    </p>

    <p>
      We parse it with the <c>JSON.parse</c> method as in <c>h = JSON.parse(str)</c> and you should see something similar to
    </p>

    <p>
      <cd>
      <cline>Dict{String, Any} with 6 entries:</cline>
      <cline>  "first_name"   =&gt; "Homer"</cline>
      <cline>  "home_address" =&gt; Dict{String, Any}("city"=&gt;"Springfield", "street"=&gt;"742 Eve…</cline>
      <cline>  "phones"       =&gt; Any[Dict{String, Any}("number"=&gt;"987-555-1234", "type"=&gt;"ho…</cline>
      <cline>  "work_address" =&gt; Dict{String, Any}("city"=&gt;"Springfield", "street"=&gt;"10 Powe…</cline>
      <cline>  "last_name"    =&gt; "Simpson"</cline>
      <cline>  "age"          =&gt; 45</cline>
      </cd>
    </p>

    <p>
      where some of the longer values are cutoff with the <c>…</c> at the end of the line.  Parsing with the JSON package will also result in a <c>Dictionary</c> and you may need to refresh your memory in <xref ref="sect-dictionaries"/>.  For example, you can get the first name of this person with
    </p>

    <p>
      <cd>
      <cline>h["first_name"]</cline>
      </cd>
    </p>

    <p>
      Rarely does a programmer write JSON.  Instead, JSON is generated by encoding objects to strings using methods.  In general, encoding an object to be stored or transfered is called <em>serialization</em>. Another example might be that we have a menu stored as a Dictionary.  For example,
    </p>


    <program language="julia" line-numbers="yes">
      <input>
menu = Dict("items" => [
  Dict("name" => "hamburger", "type" => "sandwich", "price" => 10.99),
  Dict("name" => "Club Sandwich", "type" => "sandwich", "price" => 12.99),
  Dict("name" => "spaghetti", "type" => "main", "price" => 14.99),
  Dict("name" => "Caeasar Salad", "type" => "salad", "price" => 7.99),
  Dict("name" => "Chococate Ice Cream", "type" => "dessert", "price" => 6.99),
])
      </input>
    </program>

    <p>
      creates a dictionary to store a menu.  We can encode this as a JSON string with <c>JSON.json(menu)</c> and this returns
    </p>

    <p>
      <cd>
      <cline>"{\"items\":[{\"name\":\"hamburger\",\"price\":\"10.99\",\"type\":\"sandwich\"},{\"name\":\"Club Sandwich\",\"price\":\"12.99\",\"type\":\"sandwich\"},{\"name\":\"spaghetti\",\"price\":\"14.99\",\"type\":\"main\"},{\"name\":\"Caeasar Salad\",\"price\":\"7.99\",\"type\":\"salad\"},{\"name\":\"Chococate Ice Cream\",\"price\":\"6.99\",\"type\":\"dessert\"}]}"</cline>
      </cd>
    </p>

    <p>
      and notice that it comes back with no line breaks.  JSON isn't designed to be easily readable. Instead, it is designed to compactly store data.
    </p>
  </section>

  <section>
    <title>Handling Files</title>

    <p>
      As we discussed, JSON is a format that is generally used to transfer data between computers.   Instead of it being typed in, it will often be stored as a file, so in this section, we will discuss how to handle files.  As an example, let's say that we have a menu, simimlar to above, but stored in the following file.  First, download this file and move it
    </p>
  </section>

  <section xml:id="sec-geocoding">
    <title>Querying a Geocoding Service</title>

    <p>
      In this section we will query a geocoding service offering from the census bureau in order to translate a location (town name) or address to a latitude and longitude.  The information on the service and how access it is found <url href="https://geocoding.geo.census.gov/geocoder/Geocoding_Services_API.html">at this Census Bureau website.</url>  We will show some examples using Julia here.
    </p>

    <p>
      In general, the service is available in the form:
    </p>

    <p>
      <cd>
      <cline>https://geocoding.geo.census.gov/geocoder/returntype/searchtype?parameters</cline>
      </cd>
    </p>

    <p>
      where <c>returntype</c> is either <c>locations</c> or <c>geographies</c> and <c>searchtype</c> is <c>onelineaddress</c> OR <c>address</c> OR <c>addressPR</c> OR <c>coordinates</c> and will be shown in examples below.
    </p>

    <p>
      To make a call using Julia, we will use the <c>Downloads.request</c> method and to use this you must first load the Downloads module by entering <c>using Downloads</c>.  Note: Downloads is a built-in module, so you don't need to add it via the package manager, but will need to add it to the namespace.
    </p>

    <p>
      As an example, we will get information of the TD garden (home of the Boston Bruins and Boston Celtics) by the following url
    </p>

    <p>
      <cd>
      <cline>url = "https://geocoding.geo.census.gov/geocoder/locations/address?street=80+Causeway+St&amp;city=Boston&amp;state=MA&amp;zip=02114&amp;benchmark=4&amp;format=json"</cline>
      <cline>Downloads.request(url, output = "tdgarden.json")</cline>
      </cd>
    </p>

    <p>
      Which makes a request to the webserver at <c>https://geocoding.geo.census.gov</c> with the given address and other parameters.  Note that the output is saved in a file called <c>"tdgarden.json"</c>.  Go ahead and look at it in VS code or another text editor.
    </p>

    <p>We will load in the json file </p>
  </section>
</chapter>
