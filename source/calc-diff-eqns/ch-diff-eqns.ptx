<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-diffeq">
  <title>Differential Equations</title>

  <introduction>
    <p>
      Another extremely important topic in Scientific Computation is that of differential equations.  These arise obviously in mathematics, but also in most other scientific fields including biology, chemistry, engineering, and economics.  Also, it is rare that a differential equation has a nice closed form solution, so often numerical methods must be used to get a solution.
    </p>

    <p>
      We will discuss two often-used methods for solving differential equations, Euler's method and Runge-Kutta methods and then delve into a very nice robust julia package.
    </p>

    <p>
      A <term>differential equation</term> is simply an equation that has derivatively in it.  For example
    </p>

    <p>
      <me>
        y'' + 4 y = 0
      </me>
    </p>

    <p>
      It is important to note that the <term>order</term> of a differential equation is the degree of the highest derivative, so in the example above, it is two.  The following procedure can covert non order-1 differential equation to one that is a first-order system.
    </p>

    <p>
      Let <m>y_1 = y</m>, then <m>y_2 = y' = y_1'</m>.  Lastly <m>y'' = y_1'' = y_2'</m> and using the differential equation <m>y''=-4y</m>, this can be written:
    </p>

    <p>
      <md>
        <mrow>y_1' \amp = y_2  </mrow>
        <mrow>y_2' \amp = -4y_1</mrow>
      </md>
    </p>

    <p>
      or in matrix form:
    </p>

    <p>
      <me>
        \begin{bmatrix} y_1 \\ y_2 \end{bmatrix}' = \begin{bmatrix} y_2 \\ -4y_1 \end{bmatrix}
      </me>
    </p>

    <p>
      and as long as <m>y^{(n)}</m>, the highest-order term, can be isolated algebraically, one can write the differential equation as
    </p>

    <p>
      <me>
        \mathbf{y}' = F(\mathbf{y})
      </me>
    </p>
  </introduction>

  <section>
    <title>Euler's Method</title>

    <introduction>
      <p>
        We start with one of the simplest methods to solve a differential equation.  If we have are solving
      </p>

      <p>
      </p>

      <p>
        <men xml:id="eq-diff-eqn-simple">
          y' = f(y,t), \qquad y(0) = y_0
        </men>
      </p>

      <p>
        with the understanding that we will solve this at a discrete set of points, so we let <m>y_n = y(t_n)</m> and <m>t_k = t_0 + k\Delta t</m>, where <m>\Delta t</m> is a small time step.  We can then replace <m>y'</m> with the approximation:
      </p>

      <p>
        <me>
          y' \approx \frac{y_{n+1}-y_n}{t_{n_1}-t_n}
        </me>
      </p>

      <p>
        and the differential equation in <xref ref="eq-diff-eqn-simple"/> is
      </p>

      <p>
        <me>
          \frac{y_{n+1}-y_n}{t_{n_1}-t_n} = \frac{y_{n+1}-y_n}{\Delta t} = f(y_n,t_n)
        </me>
      </p>

      <p>
        and solving for <m>y_{n+1}</m>, we get:
      </p>

      <p>
        <me>
          y_{n+1} = y_n + \Delta t f(y_n,t_n)
        </me>
      </p>

      <p>
        and this iterative (or difference equation) is known as <term>Euler's Method</term>.
      </p>
    </introduction>


    <subsection>
      <title>Implementing Euler's method in Julia</title>

      <p>
        Let's take a look at Euler's method in Julia. Of course, we'll write a function to evaluate this and there are a few things that we need for the function:
      </p>

      <p>
        <ul>
          <li>
            <p>
              The function <m>f</m>, which is the right-hand side.  Note that it takes in two variables.
            </p>
          </li>

          <li>
            <p>
              An initial point, <m>(t_0,y_0)</m>.  There will be two real arguments for this.
            </p>
          </li>

          <li>
            <p>
              A step size <m>\Delta t</m>.
            </p>
          </li>

          <li>
            <p>
              Either a final <m>t</m> value or a number of steps to run Euler's method.  We'll use the number of steps, a positive integer.
            </p>
          </li>
        </ul>
      </p>

      <p>
        We'll return two arrays for the <c>t</c> and <c>y</c> values.
      </p>

      <p>
        We'll also implement this as a for loop.  Although there are some
      </p>


      <program language="julia" line-numbers="yes">
        <code>
function euler(f::Function, t0:: Real, y0::Real, dt::Real, num_steps::Integer)
  num_steps &gt; 0 || throw(ArgumentError("The number of steps must be positive."))
  dt &gt; 0 || throw(ArgumentError("The step size dt must be positive."))
  t = LinRange(t0,t0+num_steps*dt,num_steps+1)
  y = zeros(Float64,num_steps+1)
  y[1] = y0
  for i=1:num_steps
    y[i+1] = y[i] + dt*f(t[i],y[i])
  end
  (t,y)
end
        </code>
      </program>

      <example>
        <p>
          We'll solve <m>y'=y</m>, <m>y(0)=1</m> for <c>dt=0.1</c> and <m>10</m> steps.
          <cd>
          <cline>t,y = euler( (t,y) -&gt; y, 0, 1, 0.1, 10)</cline>
          </cd>
        </p>

        <p>
          and this returns
        </p>

        <p>
          <cd>
          <cline>([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [1.0, 1.1, 1.2100000000000002, 1.3310000000000002, 1.4641000000000002, 1.61051, 1.7715610000000002, 1.9487171, 2.1435888100000002, 2.357947691, 2.5937424601])</cline>
          </cd>
        </p>

        <p>
          which is a tuple of two arrays.  This results the <m>t</m> and <m>y</m> values based on Euler's method.  However, perhaps it's more interesting to see a plot.  Also, note that the analytic solution to this is <m>y=e^x</m>, so the plot of the approximate solution using Euler's method as well as the analytic solution is
        </p>

        <p>
          <cd>
          <cline>fig, ax = lines(t,y,label="Euler's solution")</cline>
          <cline>lines!(ax, 0..1, exp,label="Analytic solution")</cline>
          <cline>axislegend(ax, position = :lt)</cline>
          <cline>fig</cline>
          </cd>
        </p>

        <figure xml:id="fig-euler">
          <caption></caption>
          <image source="plots/diffeqn/euler.png">
            <shortdescription>
              (for accessibility)
            </shortdescription>
          </image>
        </figure>
      </example>
    </subsection>
  </section>

  <section>
    <title>Runge Kutta methods</title>

    <introduction>
      <p>
        There is a family of other methods called the <url href="https://en.wikipedia.org/wiki/Rungeâ€“Kutta_methods" visual="wikipedia.org">Runge Kutta methods</url> that are relatively simple with a high order of accuracy.  One version that was often a standard version is what is called the 4th-order Runge-Kutta or RK4 method is
      </p>

      <p>
        <me>
          y_{n+1} = y_n + \frac{h}{6} \bigl(k_1+2k_2+2k_3+k_4 \bigr)
        </me>
      </p>

      <p>
        where
      </p>

      <p>
        <md>
          <mrow>k_1 \amp = f(t_n,y_n) </mrow>
          <mrow>k_2 \amp = f\biggl(t_n + \frac{h}{2}, y_n + \frac{h}{2} k_1 \biggr) </mrow>
          <mrow>k_3 \amp = f\biggl(t_n + \frac{h}{2}, y_n + \frac{h}{2} k_2 \biggr) </mrow>
          <mrow>k_4 \amp = f(t_n + h, y_n + h k_3 \biggr) </mrow>
        </md>
      </p>
    </introduction>


    <subsection>
      <title>RK4 in julia</title>

      <p>
        The following is the <c>rk4</c> method in julia.  It is very similar to euler's method...
      </p>


      <program language="julia" line-numbers="yes">
        <code>
function rk4(f::Function, t0:: Real, y0::Real, dt::Real, num_steps::Integer)
  num_steps &gt; 0 || throw(ArgumentError("The number of steps must be positive."))
  dt &gt; 0 || throw(ArgumentError("The step size dt must be positive."))
  t=LinRange(t0,t0+num_steps*dt,num_steps+1)
  y=zeros(Float64,num_steps+1)
  y[1] = y0
  for i=1:num_steps
    k1 = f(t[i],y[i])
    k2 = f(t[i]+dt/2,y[i]+dt/2*k1)
    k3 = f(t[i]+dt/2,y[i]+dt/2*k2)
    k4 = f(t[i]+dt,y[i]+dt*k3)
    y[i+1] = y[i] + dt/6*(k1+2k2+2k3+k4)
  end
  (t,y)
end
        </code>
      </program>

      <p>
        and we can use this to solve <m>y'=y</m>, <m>y(0)=1</m> by
      </p>

      <p>
        <cd>
        <cline>t,y = rk4((t,y) -&gt; y, 0, 1, 0.1, 10)</cline>
        </cd>
      </p>

      <p>
        and the results are
      </p>

      <p>
        <cd>
        <cline>(LinRange{Float64}(0.0, 1.0, 11), [1.0, 1.1051708333333332, 1.2214025708506944, 1.3498584970625376, 1.4918242400806856, 1.648720638596838, 1.822117962091933, 2.0137516265967768, 2.2255395632923154, 2.459601413780071, 2.718279744135166]) </cline>
        </cd>
      </p>
    </subsection>
  </section>

  <section>
    <title>Using the <c>DifferentialEquations package</c></title>

    <introduction>
      <p>
        There is a very mature and robust package for solving differential equations aptly called <c>DifferentialEquations</c>.  We will show a few examples to get a feeling for how to use the package, but as you can tell from <url href="https://docs.sciml.ai/dev/index.html" visual="docs.sciml.ai">the documentation</url>, that there are a lot of possibilities with the package so we'll show a couple of examples.
      </p>

      <p>
        In short, you'll need to include the equation, an initial condition and a range of values on which you want it solved.  Don't forget to add the package and evaluate
      </p>

      <p>
        <cd>
        <cline>using DifferentialEquations</cline>
        </cd>
      </p>
    </introduction>


    <subsection>
      <title>A Simple Example</title>

      <p>
        We will solve
      </p>

      <p>
        <me>
          \frac{dy}{dt} = y \qquad y(0)=1
        </me>
      </p>

      <p>
        the same equation as above using the <c>DifferentialEquations</c> package.
      </p>

      <p>
        First, the equation needs to fit in the form:
      </p>

      <p>
        <me>
          \frac{du}{dt} = f(u,p,t)
        </me>
      </p>

      <p>
        where <m>f</m> is a function of <m>u</m>, the dependent variable, <m>p</m> the parameter in the problem (if any) and <m>t</m>, the independent variable. We will also defined the initial condition and the range of values for which to solve:
      </p>

      <p>
        <cd>
        <cline>f(u,p,t) = u</cline>
        <cline>u0 = 1.0</cline>
        <cline>tspan = (0.0,1.0)</cline>
        </cd>
      </p>

      <p>
        And then we create a differential equation problem with:
        <cd>
        <cline>prob = ODEProblem(f,u0,tspan)</cline>
        </cd>
      </p>

      <p>
        and note that this returns
      </p>

      <p>
        <cd>
        <cline>ODEProblem with uType Float64 and tType Float64. In-place: false</cline>
        <cline>timespan: (0.0, 1.0)</cline>
        <cline>u0: 1.0</cline>
        </cd>
      </p>

      <p>
        This gives information about the datatypes of the function and initial condition because some solvers will use this information differently. to solve this problem,
      </p>

      <p>
        <cd> sol = solve(prob) </cd>
      </p>

      <p>
        which returns
      </p>

      <p>
        <cd>
        <cline>retcode: Success</cline>
        <cline>Interpolation: 3rd order Hermite</cline>
        <cline>t: 5-element Vector{Float64}:</cline>
        <cline> 0.0</cline>
        <cline> 0.10001999200479662</cline>
        <cline> 0.34802032833535873</cline>
        <cline> 0.683052570376323</cline>
        <cline> 1.0</cline>
        <cline>u: 5-element Vector{Float64}:</cline>
        <cline> 1.0</cline>
        <cline> 1.105193012902056</cline>
        <cline> 1.416261037790314</cline>
        <cline> 1.9799122839671017</cline>
        <cline> 2.718281708773355</cline>
        </cd>
      </p>

      <p>
        Note that the solution appears to be an array of time (that isn't equally-spaced) and function values at those <m>t</m> values.  If you want to access one of them, you can do:
      </p>

      <p>
        <cd> sol[3] </cd>
      </p>

      <p>
        which returns <c>1.416261037790314</c>, the third element of the <c>u</c> array.  However, this structure is much more than just an array. If you want the function value at 0.75, for example, you can access it like a function evaluation:
      </p>

      <p>
        <cd> sol(0.75) </cd>
      </p>

      <p>
        which returns <c>2.1170003461681204</c> and this is interpolated from the generated points.  The result guarantees accuracy to within a default tolerance of <c>1e-3</c> or you can set a different tolerance with the keyword <c>reltol</c> such as <c>reltol=1e-6</c>.
      </p>

      <p>
        So for example, you can generate an array of tuples with
      </p>

      <p>
        <cd>
        <cline>[(t,sol(t)) for t=0:0.1:1]</cline>
        </cd>
      </p>

      <p>
        which returns
      </p>

      <p>
        <cd>
        <cline>11-element Vector{Tuple{Float64, Float64}}:</cline>
        <cline> (0.0, 1.0)</cline>
        <cline> (0.1, 1.1051709180988993)</cline>
        <cline> (0.2, 1.2214028012281672)</cline>
        <cline> (0.3, 1.3498587272674625)</cline>
        <cline> (0.4, 1.4918249699503803)</cline>
        <cline> (0.5, 1.648721181273569)</cline>
        <cline> (0.6, 1.8221180994290354)</cline>
        <cline> (0.7, 2.0137527117177667)</cline>
        <cline> (0.8, 2.2255411035915857)</cline>
        <cline> (0.9, 2.4596023119414028)</cline>
        <cline> (1.0, 2.718281708773351)</cline>
        </cd>
      </p>

      <p>
        One can also generate a plot of the solution with
        <cd>
        <cline>lines(pts)</cline>
        </cd>
      </p>

      <p>
        or if you want to plot the numerical solution with the analytic solution <m>y=e^t</m>, then
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(pts)</cline>
        <cline>lines!(0..1,exp)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        and the result is
      </p>

      <figure xml:id="fig-de-deexp">
        <caption></caption>
        <image source="plots/diffeqn/DEexp.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        which shows that they appear to the resolution of the plot that the two solutions are identical, however if we plot the error associated with the numerical method by
      </p>

      <p>
        <cd>
        <cline>lines(0..1, t -&gt; abs(sol(t)-exp(t)))</cline>
        </cd>
      </p>

      <p>
        which generates the following plot:
      </p>

      <figure xml:id="fig-de-error">
        <caption></caption>
        <image source="plots/diffeqn/error.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        this shows that error is within <m>10^{-6}</m>, which is the tolerance for the <c>solve</c> method of the DifferentialEquations package.
      </p>

      <exercise>
        <task>
          <statement>
            <p>
              Find the solution to the differential equation
            </p>

            <p>
              <me>
                y' = \frac{t}{1+y^2}, \qquad y(0) = 1
              </me>
            </p>

            <p>
              on the interval <m>[0,10]</m>.
            </p>
          </statement>
        </task>


        <task>
          <statement>
            <p>
              Reproduce the solution to <m>y'=y, ~~ y(0)=1</m> with the option <c>abstol = 1e-10</c>.  Produce a plot of the error as above to show that the result is within the given tolerance.
            </p>
          </statement>
        </task>
      </exercise>
    </subsection>
  </section>

  <section>
    <title>Example of a system of differential equations</title>

    <introduction>
      <p>
        Let's solve
      </p>

      <p>
        <me>
          y'' + y = 0
        </me>
      </p>

      <p>
        which is an example of a harmonic oscillator.  We first need to put this in a system form by letting <m>y_1=y</m> and <m>y_2=y'</m>.  Then from the differential equation <m>y'' = - y</m> or <m>y_2' = -y_1</m>.  We can then write this as
      </p>

      <p>
        <md>
          <mrow>y_1' \amp = y_2 </mrow>
          <mrow>y_2' \amp = -y_1</mrow>
        </md>
      </p>

      <p>
        We will write this in julia using
      </p>

      <p>
        <cd>
        <cline>function F!(du,u,p,t) </cline>
        <cline>  du[1] = u[2] </cline>
        <cline>  du[2] = - u[1] </cline>
        <cline>end </cline>
        </cd>
      </p>

      <p>
        and then create the differential problem with
      </p>

      <p>
        <cd> prob2 = ODEProblem(F!,[1;0],(0,6pi)) </cd>
      </p>

      <p>
        where <c>[1;0]</c> is the initial condition which would be <m>y(0)=1, y'(0)=0</m> and the solution is
      </p>

      <p>
        <cd> sol2 = solve(prob2) </cd>
      </p>

      <p>
        If you just plot the results:
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(sol3)</cline>
        <cline>axislegend(ax, position=(0.8,1))</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        you'll see the two elements of the vector plotted as functions of <m>t</m> or:
      </p>

      <figure xml:id="fig-diffeqn-oscillator">
        <caption></caption>
        <image source="plots/diffeqn/oscillator.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        If instead, you want the results plotted like a parametric equation, then we need to do a bit more work.  The result of the solution <c>sol2</c> is a function of <c>t</c> that returns a vector of the two variables <m>y_1</m> and <m>y_2</m>.  To generate the desired plot:
      </p>

      <p>
        <cd>
        <cline>y1 = map(t -&gt; sol3(t)[1],0:0.1:6pi)</cline>
        <cline>y2 = map(t -&gt; sol3(t)[2],0:0.1:6pi)</cline>
        <cline>lines(y1, y2, axis = (aspect = 1,))</cline>
        </cd>
      </p>

      <p>
        and recall that the comma afer <c>aspect = 1,</c> is important to make that a tuple and we desire the aspect ratio to be 1 because the output should be a circle.  The plot is
      </p>

      <figure xml:id="fig-de-system01">
        <caption></caption>
        <image source="plots/diffeqn/system01.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </introduction>


    <subsection>
      <title>The Lorenz System</title>

      <p>
        The Lorenz system is relatively famous system of differential equations for many reasons.  It is a system of ODEs, it is nonlinear and for many parameters the solution exhibits sensitivity on initial conditions, an important property for differential equation that exhibit chaotic behavior.  The Lorenz system is
      </p>

      <p>
        <md>
          <mrow>\frac{dx}{dt} \amp = \sigma (y-x) </mrow>
          <mrow>\frac{dy}{dt} \amp = x (\rho -z) - y </mrow>
          <mrow>\frac{dz}{dt} \amp = xy - \beta z</mrow>
        </md>
      </p>

      <p>
        and we will look for solution with <m>\sigma=10, \rho = 28</m> and <m>\beta=8/3</m> so we define
      </p>

      <p>
        <cd>
        <cline>function lorenz!(du, u, p, t)</cline>
        <cline>  du[1] = 10.0 * (u[2] - u[1])</cline>
        <cline>  du[2] = u[1] * (28.0 - u[3]) - u[2]</cline>
        <cline>  du[3] = u[1] * u[2] - (8 / 3) * u[3]</cline>
        <cline>  nothing</cline>
        <cline>end</cline>
        </cd>
      </p>

      <p>
        and if the following timespan and initial conditions are used to solve the differential equation as in:
      </p>

      <p>
        <cd>
        <cline>u0 = [1.0; 0.0; 0.0]</cline>
        <cline>tspan = (0.0, 100.0)</cline>
        <cline>prob = ODEProblem(lorenz!, u0, tspan)</cline>
        <cline>solve(prob);</cline>
        </cd>
      </p>

      <p>
        If we plot the 3 components of the solution as functions of t, with
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(lorsol)</cline>
        <cline>axislegend(ax, position = :lt)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        and the plot is
      </p>

      <figure xml:id="fig-de-lorenz01">
        <caption></caption>
        <image source="plots/diffeqn/lorenz01.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        and it is difficult to see the difference between u[1] and u[2].  The classic plot of this solution is as a 3D parametric plot, which can be generated with
      </p>

      <p>
        <cd>
        <cline>t = LinRange(0,100,10_000)</cline>
        <cline>lines(lorsol(t,idxs = 1).u, lorsol(t, idxs = 2).u, lorsol(t, idxs = 3).u)</cline>
        </cd>
      </p>

      <p>
        and this results in
      </p>

      <figure xml:id="fig-de-lorenz02">
        <caption></caption>
        <image source="plots/diffeqn/lorenz02.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        This is not clear what is going on because of the angle that we are viewing it.   We can change that with the <c>azimuth</c> option of the <c>Axis3</c> object.  With a little bit of playing, if we do
      </p>

      <p>
        <cd>
        <cline>fig = Figure()</cline>
        <cline>ax = Axis3(fig[1,1], azimuth = 0.75pi)</cline>
        <cline>lines!(ax, lorsol(t,idxs = 1).u, lorsol(t, idxs = 2).u, lorsol(t, idxs = 3).u, linewidth = 0.5)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        and this results in
      </p>

      <figure xml:id="fig-de-lorenz03">
        <caption></caption>
        <image source="plots/diffeqn/lorenz03.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        For these examples, we have used the <c>CairoMakie</c> package for plotting.  This is very nice for 2D plots (or projections of 3D plots into 2 dimensions), if we use the <c>GLMakie</c> package, we can get an interactive plot.  First, we need to load and activate the package with
      </p>

      <p>
        <cd>
        <cline>using GLMakie</cline>
        <cline>GLMakie.activate!()</cline>
        <cline>Makie.inline!(false)</cline>
        </cd>
      </p>

      <p>
        and notice that we have set the <c>inline</c> to <c>false</c> so that the plot is not placed inside the notebook.   And then run the plotting command with:
      </p>

      <p>
        <cd>
        <cline>lines(lorsol(t,idxs = 1).u, lorsol(t, idxs = 2).u, lorsol(t, idxs = 3).u, linewidth = 0.5)</cline>
        </cd>
      </p>

      <p>
        which should open up a window on your computer that allows you to rotate the plot with the mouse.
      </p>
    </subsection>


    <subsection>
      <title>Other Aspects of the <c>DifferentialEquations</c></title>

      <p>
        If you take a look at the  <url href="https://docs.sciml.ai/dev/index.html" visual="docs.sciml.ai">the documentation of the package</url>, we have only touched the surface of this package and it can do a lot with many different differential equations including initial value problems (that all three examples fit into), boundary value problems, stiff equations (aka they are hard to solve numerically) and stocastic differential equations.
      </p>

      <p>
        Also, the actual solvers are not discussed here, however if you want to know the details, the documentation explains them.  I have found that the default solvers are generally good enough and unless there is an issue, probably work for most problems.
      </p>
    </subsection>
  </section>
</chapter>
