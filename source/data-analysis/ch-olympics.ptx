<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-olympics">
  <title>Olympic Medals</title>

  <introduction>
    <p>
      The data sets for this chapter contain all athletes that have participated in the Olympic games between 1896 and 2016.
      We use the dataset to answer a number of questions.
      <ol>
        <li>
          <p>
            What is the total number of medals given in all Olympics in the dataset?
          </p>
        </li>

        <li>
          <p>
            Collectively taking each summer Olympics, give the top 10 athletes by number of medals.
          </p>
        </li>

        <li>
          <p>
            List the top 10 countries by medals in all winter Olympics.
          </p>
        </li>

        <li>
          <p>
            Produce a line plot the average weight for male and female in each year over the entire span of the Olympic games.
          </p>
        </li>

        <li>
          <p>
            Plot the number of medals that the U.S.
            collected over each olympic year.
          </p>
        </li>

        <li>
          <p>
            What are the top 5 sports (not events) by total medals given for winter olympics between 1950 and 1970?
          </p>
        </li>
      </ol>
    </p>
  </introduction>
  <!-- https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results/data# -->
  <section>
    <title>Downloading the Data and Loading the Packages</title>

    <p>
      The dataset will be on a site called <url href="https://www.kaggle.com" visual="kaggle.com">kaggle.com</url>.
      More specifically, go to <url href="https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results" visual="kaggle.com"> this site </url> and click the download button on the upper right.
      The download is a zip file and within that there are two files.
      The one we are interested in is called <c>athlete_events.csv</c>.
    </p>

    <p>
      For this chapter, we need the following packages.
    </p>


    <program language="julia">
      <code>
    using DataFrames, Chain, Statistics, CSV, StatsPlots
      </code>
    </program>
  </section>

  <section>
    <title>Loading the file</title>

    <p>
      The file that we are interested in is a <c>CSV</c>, so will load it with the following:
    </p>

    <p>
      <cd>
      <cline>olympics = CSV.read("olympic-athletes.csv", DataFrame, missingstring = "NA")</cline>
      </cd>
    </p>

    <p>
      where the option <c>missingstring = "NA"</c> is used to replace any NA with the <c>missing</c> value explained in <xref ref="sect-missing-in-dataset"/>.
      The first few rows of this DataFrame is:
    </p>

    <p>
      <cd>
      <cline>271116×15 DataFrame            271106 rows omitted</cline>
      <cline>Row  ID     Name                  Sex      Age      Height        Weight         Team            NOC      Games        Year   Season   City       Sport       Event                         Medal</cline>
      <cline>     Int64  String                String1  String3  String3       String31       String          String3  String15     Int64  String7  String31   String31    String                        String7</cline>
      <cline>1    1      A Dijiang             M        24       180           80             China           CHN      1992 Summer  1992   Summer   Barcelona  Basketball  Basketball Men's Basketball   missing</cline>
      <cline>2    2      A Lamusi              M        23       170           60             China           CHN      2012 Summer  2012   Summer   London     Judo        Judo Men's Extra-Lightweight  missing</cline>
      <cline>3    3      Gunnar Nielsen Aaby   M        24       missing       missing        Denmark         DEN      1920 Summer  1920   Summer   Antwerpen  Football    Football Men's Football       missing</cline>
      <cline>4    4      Edgar Lindenau Aabye  M        34       missing       missing        Denmark/Sweden  DEN      1900 Summer  1900   Summer   Paris      Tug-Of-War  Tug-Of-War Men's Tug-Of-War   Gold</cline>
      <cline></cline>
      </cd>
    </p>

    <p>
      Each row of the dataset is each event that has occurred in each Olympics for each athlete that has participated.
      This will be called an athlete-event in this chapter.
      Also, note that there are 271,116 rows in this DataFrame.
      The columns of the dataset are
    </p>

    <p>
      <dl>
      <li>
        <title>ID</title>

        <p>
          a number corresponding to each athlete
        </p>
      </li>

      <li>
        <title>Name</title>

        <p>
          the name of the athlete
        </p>
      </li>

      <li>
        <title>Sex</title>

        <p>
          the sex (either Male or Female) of the athlete
        </p>
      </li>

      <li>
        <title>Height</title>

        <p>
          the height of the athlete in cm
        </p>
      </li>

      <li>
        <title>Weight</title>

        <p>
          the weight of the athlete in kg
        </p>
      </li>

      <li>
        <title>Team</title>

        <p>
          the country the athlete participated for
        </p>
      </li>

      <li>
        <title>NOC</title>

        <p>
          the country code of the athlete (helpful for condensed printing)
        </p>
      </li>

      <li>
        <title>Games</title>

        <p>
          The year and season (summer or winter) of the Olympic games for the given event.
        </p>
      </li>

      <li>
        <title>Year</title>

        <p>
          The Year of the Olympic games for the event.
        </p>
      </li>

      <li>
        <title>Season</title>

        <p>
          The season of the Olympic games for the event.
        </p>
      </li>

      <li>
        <title>City</title>

        <p>
          The host city of the Olympic games
        </p>
      </li>

      <li>
        <title>Sport</title>

        <p>
          The sport (category) of the event
        </p>
      </li>

      <li>
        <title>Event</title>

        <p>
          The specific event the athlete competed in.
        </p>
      </li>

      <li>
        <title>Medal</title>

        <p>
          The medal type (Gold, Silver, Bronze) or NA if no medal was earned.
        </p>
      </li>
      </dl>
    </p>
  </section>

  <section>
    <title>Answering the Questions</title>

    <subsection>
      <title>What is the total number of medals given in all Olympics in the dataset?</title>

      <p>
        Since each row is an athlete-event, we drop all of the rows with missing values in the <c>Medal</c> column and then count all of the rows or
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain olympics begin
  dropmissing(:Medal)
  nrow
end
        </code>
      </program>

      <p>
        and the result is <c>39783</c>
      </p>
    </subsection>


    <subsection>
      <title>Collectively taking each summer Olympics, give the top 10 athletes by number of medals</title>

      <p>
        This is a classic split-apply-combine example as shown in <xref ref="sect-split-apply-combine"/>.
        For this, we first drop all rows without a medal and then filter by only Summer games.
        Since we are asking for the individual medals, we will next group by the athlete <c>ID</c>.
        This is the first 3 lines within the <c>@chain</c> block and is a good idea to run these lines.
      </p>

      <p>
        Next, we want to combine the groups.
        In short, we want the total number of medals (this is simply found by calling <c>nrow</c>) and the name, which is a little trickier.
        When using <c>combine</c> on a column in a grouped DataFrame, each of the functions that are called take in an array (or an iterator).
        That is, when extracting <c>Name</c> from the DataFrame, it returns an array of names.
        The line
      </p>

      <p>
        <cd>
        <cline>combine(:Name =&gt;  first =&gt; :Name, nrow)</cline>
        </cd>
      </p>

      <p>
        will extract the <c>first</c> element of the array of names.
        And then we will rename this to <c>Name</c>.
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain olympics begin
  dropmissing(:Medal)
  subset([:Season, :Medal] =  &gt; (s, m)  -  &gt; s .== "Summer" .&amp;&amp; m .== "Gold")
  groupby(:ID)
  combine(:Name =  &gt; first =  &gt; :Name, nrow)
  sort(:nrow, rev = true)
  first(10)
end
        </code>
      </program>

      <p>
        The result of this is:
      </p>

      <p>
        <cd>
        <cline>10×2 DataFrame</cline>
        <cline>Row  Name                                nrow</cline>
        <cline>     String                              Int64</cline>
        <cline>1    Michael Fred Phelps, II             28</cline>
        <cline>2    Larysa Semenivna Latynina (Diriy-)  18</cline>
        <cline>3    Nikolay Yefimovich Andrianov        15</cline>
        <cline>4    Edoardo Mangiarotti                 13</cline>
        <cline>5    Takashi Ono                         13</cline>
        <cline>6    Borys Anfiyanovych Shakhlin         13</cline>
        <cline>7    Natalie Anne Coughlin (-Hall)       12</cline>
        <cline>8    Birgit Fischer-Schmidt              12</cline>
        <cline>9    Sawao Kato                          12</cline>
        <cline>10   Ryan Steven Lochte                  12</cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>List the top 10 countries by medals in only winter Olympics.</title>

      <p>
        To start off, we again filter only by those with medals and in this case the <c>Season</c> column has the value <c>Winter</c>.
        Then we group by the <c>NOC</c> column, which represents the Country.
        We then define <c>Total_Medals</c> to be the number within each group.
        Finally, we order (descending) by <c>Total_Medals</c> and print the first 10 rows.
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain olympics begin
  subset(:Season =&gt; s-&gt; s .== "Winter")
  subset(:Medal =&gt; m -&gt; m .!= "NA")
  groupby(:NOC)
  combine(nrow)
  sort(:nrow, rev = true)
end
        </code>
      </program>

      <p>
        the results of this is
      </p>

      <p>
        <cd>
        <cline>10×2 DataFrame</cline>
        <cline>Row  NOC       Num_Medals</cline>
        <cline>     String3   Int64</cline>
        <cline>1    USA       635</cline>
        <cline>2    CAN       611</cline>
        <cline>3    NOR       443</cline>
        <cline>4    URS       440</cline>
        <cline>5    SWE       428</cline>
        <cline>6    FIN       426</cline>
        <cline>7    GER       386</cline>
        <cline>8    AUT       280</cline>
        <cline>9    SUI       275</cline>
        <cline>10   RUS       260</cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>Produce a line plot the average weight for male and female in each year over the entire span of the Olympic games.</title>

      <p>
        In this case, first we'll drop all rows in which the weight is missing.
        Then we will group by both sex and year (the year in which the games took place) and then `combine` by finding the mean weight with:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain olympics begin
  dropmissing(:Weight)
  groupby([:Year, :Sex])
  combine(:Weight =&gt; mean =gt; :Mean_weight)
end
        </code>
      </program>

      <p>
        The result of this is
      </p>

      <p>
        <cd>
        <cline>64×3 DataFrame   54 rows omitted</cline>
        <cline>Row   Year   Sex      Mean_weight</cline>
        <cline>      Int64  String1  Float64</cline>
        <cline>1     1896   M        71.3878</cline>
        <cline>2     1900   M        74.557</cline>
        <cline>3     1904   M        72.1973</cline>
        <cline>4     1906   M        75.9171</cline>
        <cline>5     1908   M        75.3861</cline>
        <cline>⋮       ⋮     ⋮          ⋮      </cline>
        <cline>60    2012   F        62.0538</cline>
        <cline>61    2014   M        77.9016</cline>
        <cline>62    2014   F        60.5203</cline>
        <cline>63    2016   M        78.5603</cline>
        <cline>64    2016   F        61.9313</cline>
        </cd>
      </p>

      <p>
        It would be nice if we could rearrange the dataframe to make a M(ale) and F(emale) column and then that would be easily plotted.
        This can be done with the <c>unstack</c> function.
        Specifically, we can do the following:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
weight = @chain olympics begin
  dropmissing(:Weight)
  groupby([:Year, :Sex])
  combine(:Weight =&gt; mean =&gt; :Mean_weight)
  unstack(:Sex, :Mean_weight)
end        </code>
      </program>

      <p>
 Now that we have the data, we can plot it with the following:
      </p>

      <p>
        <cd>
        <cline>fig, ax = lines(weight.Year, weight.M)</cline>
        <cline>lines!(ax, weight.Year, weight.F)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
 resulting in the plot
      </p>

      <figure xml:id="fig-olympics-weight">
        <caption></caption>
        <image source="plots/olympics/weight.png" width="90%">
          <shortdescription>
 (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>


    <subsection>
      <title>Plot the number of medals that the U.S. collected over each olympic year.</title>

      <p>
 First, like above, we will drop rows with missing <c>Medal</c> column and then  we filter by the country, using <c>NOC</c> column which is the country code.  Since we want the number of medals by year, we group by the <c>Year</c> column and define the <c>num_medals</c> to be the length of the number elements in each group. Finally, we can just plot the results.  This can all happen in the same <c>@chain</c> block as follows:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain olympics begin
  dropmissing(:Medal)
  subset(:NOC => name -> name .== "USA")
  groupby(:Year)
  combine(nrow => :num_medals)
  barplot(_.Year, _.num_medals)
end
        </code>
      </program>

      <p>
        The results is the following plot
      </p>

      <figure xml:id="fig-olympics-usa">
        <caption></caption>
        <image source="plots/olympics/usa-by-year.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        It is interesting to note that this database lists some medals from 1906<fn>Suprising to the author, there was an event called the <url href="https://en.wikipedia.org/wiki/1906_Intercalated_Games">1906 Intercalated Games</url> in Athens, Greece.
        This is listed in this database.</fn> Also, it hard not to notice that the 1904 games sent a lot medals to the U.S.<fn>The 1904 Olympic games were held in St.
        Louis, Missouri, which was quite difficult to get to from Europe and other places around the world.
        This resulted in a large number of American athletes winning medals.</fn>
      </p>
    </subsection>


    <subsection>
      <title>What are the top 5 sports (not events) by total medals given for winter olympics between 1950 and 1970?</title>

      <p>
        Again, like above, since we are looking for total medals, we will drop all rows with a missing value in the <c>Medal</c> column.
        Then we subset (filter) rows to get winter games between 1950 and 1970.
        Since we are looking for the top 5 events, we group by <c>Event</c>, total the results then sort
      </p>

      <p>
        <cd>
        <cline>@chain olympics begin</cline>
        <cline>  dropmissing(:Medal)</cline>
        <cline>  subset([:Season, :Year] =&gt; (season, year) -&gt; season .== "Winter" .&amp;&amp; 1950 .&gt;= year .&gt;= 1970)</cline>
        <cline>  groupby(:Event)</cline>
        <cline>  combine(nrow)</cline>
        <cline>  sort(:nrow, rev = true)</cline>
        <cline>  first(5)</cline>
        <cline>end</cline>
        </cd>
      </p>

      <p>
        the results are the following:
      </p>

      <p>
        <cd>
        <cline>5×2 DataFrame</cline>
        <cline>Row  Event                                                nrow</cline>
        <cline>     String                                               Int64</cline>
        <cline>1    Ice Hockey Men's Ice Hockey                          255</cline>
        <cline>2    Cross Country Skiing Men's 4 x 10 kilometres Relay   60</cline>
        <cline>3    Bobsleigh Men's Four                                 48</cline>
        <cline>4    Cross Country Skiing Women's 3 x 5 kilometres Relay  36</cline>
        <cline>5    Figure Skating Mixed Pairs                           32 </cline>
        </cd>
      </p>

      <p>
        It may seem shocking to see a huge number of ice hockey medals in the timeframe, but since this is a team sport, every member of the team gets the medal.
        There are generally about 20-25 players on an ice hockey team.
      </p>
    </subsection>
  </section>

  <section>
    <title>Exercise</title>

    <exercise>
      <introduction>
        <p>
          Use the dataset for this chapter to answer the following questions:
        </p>
      </introduction>


      <task>
        <statement>
          <p>
            Who has the most Winter Olympic Silver medals?
          </p>
        </statement>
      </task>


      <task>
        <statement>
          <p>
            Create a bar plot of percentage male and female participation in the Olympics per year?  Start with 1920, the first year that women started competing and use the <c>groupedbar</c> function from the <c>StatsPlots</c> package.
          </p>
        </statement>
      </task>


      <task>
        <statement>
          <p>
            Note that one of the question asked was about the number of medals the U.S.
            has won in each Olympics and the 1904 games were a bonanza for the United States.
            How many countries participated in these Games?  Determine the number of athletes from each country for this event.
          </p>
        </statement>
      </task>
    </exercise>
  </section>
</chapter>