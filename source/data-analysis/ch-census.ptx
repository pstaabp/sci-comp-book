<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-census">
  <title>Analyzing Census Data</title>

  <introduction>
    <p>
      This chapter goes through an example of analyzing census data.  We load the data then ask a number of questions of the data.  It is expected that you have read <xref ref="ch-data"/> and <xref ref="ch-manipulating-data"/> before this.
    </p>
  </introduction>

  <section>
    <title>Loading Packages and the Dataset</title>

    <p>
      Before we begin, make sure that you have added and loaded the following packages:
    </p>

    <p>
      <cd> using DataFrames, Chain, Statistics, CSV, StatsPlots </cd>
    </p>

    <p>
      Download the file <url href="assets/datasets/Gaz_ua_national.csv" visual="">Gaz_ua_national.csv</url> and save it somewhere that you can access it from Julia. This file has a lot of census data that we will try to find answers. Information about the data is <url href="http://www.census.gov/geo/maps-data/data/gazetteer2010.html" visual="">on the census website</url>
    </p>

    <p>
      For this chapter we will need load the packages <c>DataFrames, Chain, Statistics, CSV</c> and will start by loading the file with
    </p>

    <p>
      <cd> census = CSV.read("Gaz_ua_national.csv",DataFrame) </cd>
    </p>

    <p>
      or adjusting the path to the file if needed.
    </p>
  </section>

  <section>
    <title>Answering Census Questions</title>

    <introduction>
      <p>
        There are a number of questions that we can answer.  We will spend the rest of this chapter answer these questions.
      </p>

      <p>
        <ol>
          <li>
            <p>
              What is the total population of all areas?
            </p>
          </li>

          <li>
            <p>
              What are the top 10 areas in population?
            </p>
          </li>

          <li>
            <p>
              How many population areas are west of 120 degrees longitude?
            </p>
          </li>

          <li>
            <p>
              Give a histogram plot in terms of population?
            </p>
          </li>

          <li>
            <p>
              What is the total number of housing units?
            </p>
          </li>

          <li>
            <p>
              What the top 10 area in housing units?
            </p>
          </li>

          <li>
            <p>
              What are the top 10 areas in land size?
            </p>
          </li>

          <li>
            <p>
              What are the top 10 areas in water size?
            </p>
          </li>

          <li>
            <p>
              List the top 5 Massachusetts areas  by population.
            </p>
          </li>

          <li>
            <p>
              What is the average population, median and standard deviation of all Massachusetts areas?
            </p>
          </li>
        </ol>
      </p>
    </introduction>


    <subsection>
      <title>Data Analysis of Census Data</title>

      <p>
        Now that we have the data loaded and stored in the DataFrame called <c>census</c>, there are a number of ways to answer the questions posed above.  A nice clean technique is to answer the question by building a <c>@chain</c> block that starts with the <c>census</c> DataFrame and results in the answer.  Most of the time this works and we will show this in the rest of the chapter.  For complicated questions, we will walk through step by step how to do this.
      </p>
    </subsection>


    <subsection>
      <title>What is the total population of all areas?</title>

      <p>
        This is simply the sum of the <c>POP10</c> column, which can be found using the <c>combine</c> function as in
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census begin
  combine(:POP10 =&gt; sum =&gt; :TOTAL_POP)
end
        </code>
      </program>

      <p>
        which returns
      </p>

      <p>
        <cd>
        <cline>1×1 DataFrame</cline>
        <cline>Row  TOTAL_POP</cline>
        <cline>     Int64</cline>
        <cline>1    252746527 </cline>
        </cd>
      </p>

      <p>
        indicating that the total population is 252746527.  Note: the total U.S. Population in 2010 was about 309 million, so this dataset is not capturing everyone.
      </p>
    </subsection>


    <subsection>
      <title>What are the top 10 areas in population?</title>

      <p>
        To solve this, we will start with the data frame and take only necessary columns, sort by the <c>POP10</c> column and print out the top 10 rows. We will build up these steps within a <c>@chain</c> block:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census_data begin
  select(:NAME, :POP10)
  sort(:POP10, rev = true)
  first(10)
end
        </code>
      </program>

      <p>
        and this returns
      </p>

      <p>
        <cd>
        <cline>10×2 DataFrame</cline>
        <cline>Row  NAME                                                 POP10</cline>
        <cline>     String                                               Int64</cline>
        <cline>1    New York--Newark, NY--NJ--CT Urbanized Area          18351295</cline>
        <cline>2    Los Angeles--Long Beach--Anaheim, CA Urbanized Area  12150996</cline>
        <cline>3    Chicago, IL--IN Urbanized Area                        8608208</cline>
        <cline>4    Miami, FL Urbanized Area                              5502379</cline>
        <cline>5    Philadelphia, PA--NJ--DE--MD Urbanized Area           5441567</cline>
        <cline>6    Dallas--Fort Worth--Arlington, TX Urbanized Area      5121892</cline>
        <cline>7    Houston, TX Urbanized Area                            4944332</cline>
        <cline>8    Washington, DC--VA--MD Urbanized Area                 4586770</cline>
        <cline>9    Atlanta, GA Urbanized Area                            4515419</cline>
        <cline>10   Boston, MA--NH--RI Urbanized Area                     4181019</cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>Find the total population of the areas west of 120 degrees longitude?</title>

      <p>
        The number of degrees longitude is in the column <c>INTPTLONG</c> and is a negative number because it is west of the 0 degree longitude (that's the way it works).  West of 120 degrees is less than -120.
      </p>

      <p>
        We will filter (subset) the data frame using this and then <c>combine</c> to compute the sum.
      </p>


      <program language="julia" line-numbers="yes">
        <code>
        @chain census begin
          subset(:INTPTLONG =&gt; long -&gt; long .&lt; -120)
          combine(:POP10 =&gt; sum =&gt; :POP_WEST_120)
        end
        </code>
      </program>

      <p>
        The result is
      </p>

      <p>
        <cd>
        <cline>1×1 DataFrame</cline>
        <cline>Row  POP_WEST_120</cline>
        <cline>     Int64</cline>
        <cline>1    21932350      </cline>
        </cd>
      </p>

      <p>
        The result shows the total population west of 120 degrees is about 22 million.
      </p>
    </subsection>


    <subsection>
      <title>Give a histogram plot in terms of population?</title>

      <p>
        To produce a histogram of the population, we will use the <c>hist</c> method from the <c>Makie</c> package. <url href="https://docs.makie.org/v0.21/reference/plots/hist" visual="">Check out the documentation</url>. If we do:
      </p>

      <p>
        <cd>
        <cline>hist(census.POP10)</cline>
        </cd>
      </p>

      <p>
        then we get the following plot:
      </p>

      <figure xml:id="fig-census-hist01">
        <caption></caption>
        <image source="plots/census/hist01.png">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        The trouble with this is that there are many many census areas with very little population. We can fix this with a log scale. If you enter
      </p>


      <program language="julia" line-numbers="yes">
        <code>
b=10 .^(3:0.2:8)
fig = Figure()
ax = Axis(fig[1,1], xscale = log10)
hist!(ax, census.POP10, bins=b, strokewidth=0.5)
fig
        </code>
      </program>

      <p>
        where the <c>b</c> variable is the locations of the bin boundaries.  This took some experiments to get the right sizes.  The attribute <c>xscale</c> sets the scale to base-10 logarithmic scale.
      </p>

      <p>
        then the result is:
      </p>

      <figure xml:id="fig-census-hist02">
        <caption></caption>
        <image source="plots/census/hist02.png">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>


    <subsection>
      <title>What the top 10 area in housing density?</title>

      <p>
        We are interested in finding the highest housing density, that is the number of people per housing units. We will create a new column to do this:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census begin
  transform( [:POP10, :HU10] =&gt; ((p,h)-&gt; p./h) =&gt; :Housing_Density)
  select(:NAME, :Housing_Density)
  sort(:Housing_Density, rev=true)
  first(10)
end
        </code>
      </program>

      <p>
        the results of this is
      </p>

      <p>
        <cd>
        <cline>10×2 DataFrame</cline>
        <cline>Row   NAME                                   Housing_Density</cline>
        <cline>      String                                 Float64</cline>
        <cline>1     Air Force Academy, CO Urban Cluster    16.908</cline>
        <cline>2     Colorado City, AZ--UT Urban Cluster     8.1839</cline>
        <cline>3     Kinross, MI Urban Cluster               6.75773</cline>
        <cline>4     Soledad, CA Urban Cluster               6.61642</cline>
        <cline>5     Alfred, NY Urban Cluster                6.55842</cline>
        <cline>6     Avenal, CA Urban Cluster                6.44713</cline>
        <cline>7     Corcoran, CA Urban Cluster              6.12188</cline>
        <cline>8     Montgomery, PA Urban Cluster            5.83454</cline>
        <cline>9     Darbydale, OH Urban Cluster             5.6216</cline>
        <cline>10    Woodville, FL Urban Cluster             5.37327 </cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>What is the total number of housing units?</title>

      <p>
        This is simply a summary statistic on the <c>HU10</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census begin
  combine(:HU10 =&gt; sum)
end
        </code>
      </program>

      <p>
        which has the result <c>105549535</c>.
      </p>
    </subsection>


    <subsection>
      <title>What are the top 10 areas in land size?</title>

      <p>
        This is a sorting of the dataset in terms of the <c>ALAND</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census begin
  select(:NAME, :ALAND)
  sort(:ALAND, rev=true)
  first(10)
end
        </code>
      </program>

      <p>
        and the result is
      </p>

      <p>
        <cd>
        <cline>10×2 DataFrame</cline>
        <cline>Row  NAME                                                 ALAND</cline>
        <cline>     String                                               Int64</cline>
        <cline>1    New York--Newark, NY--NJ--CT Urbanized Area          8935981360</cline>
        <cline>2    Atlanta, GA Urbanized Area                           6851428985</cline>
        <cline>3    Chicago, IL--IN Urbanized Area                       6326686332</cline>
        <cline>4    Philadelphia, PA--NJ--DE--MD Urbanized Area          5131721516</cline>
        <cline>5    Boston, MA--NH--RI Urbanized Area                    4852227548</cline>
        <cline>6    Dallas--Fort Worth--Arlington, TX Urbanized Area     4607936452</cline>
        <cline>7    Los Angeles--Long Beach--Anaheim, CA Urbanized Area  4496266014</cline>
        <cline>8    Houston, TX Urbanized Area                           4299420988</cline>
        <cline>9    Detroit, MI Urbanized Area                           3463234750</cline>
        <cline>10   Washington, DC--VA--MD Urbanized Area                3423261150 </cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>What are the top 10 areas in water size?</title>

      <p>
        This is similar to the one above but use the <c>AWATER</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census_data begin
  select(:NAME, :AWATER)
  sort(:AWATER, rev=true)
  first(10)
end
        </code>
      </program>
      <p>
        and the result is
      </p>

      <p>
        <cd>
          <cline>10×2 DataFrame
            Row  NAME                                          AWATER
                 String                                        Int64
            1    New York--Newark, NY--NJ--CT Urbanized Area   533176599
            2    Minneapolis--St. Paul, MN--WI Urbanized Area  232127029
            3    Tampa--St. Petersburg, FL Urbanized Area      211394181
            4    Boston, MA--NH--RI Urbanized Area             201870511
            5    Jacksonville, FL Urbanized Area               199369291
            6    Miami, FL Urbanized Area                      191964476
            7    Virginia Beach, VA Urbanized Area             189979138
            8    Seattle, WA Urbanized Area                    173839079
            9    Orlando, FL Urbanized Area                    142321970
            10   Palm Bay--Melbourne, FL Urbanized Area        130390065
            </cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title> List the top 5 Massachusetts areas  by population.</title>

      <p>
        First, we'll need to filter (subset) the dataset to only include those with <c>MA</c> in the name.  We can use the <c>occursin</c> function to do this:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
          @chain census begin
          subset(:NAME =&gt; (n -&gt; occursin.("MA",n)))
          sort(:POP10, rev= true)
          first(5)
          select(:NAME, :POP10)
        end
        </code>
      </program>
      <p>
        and the result is:
      </p>
      <p>
        <cd>
          <cline>5×2 DataFrame</cline>
            <cline>Row  NAME                                POP10</cline>
            <cline>     String                              Int64</cline>
            <cline>1    Boston, MA--NH--RI Urbanized Area   4181019</cline>
            <cline>2    Providence, RI--MA Urbanized Area   1190956</cline>
            <cline>3    Springfield, MA--CT Urbanized Area  621300</cline>
            <cline>4    Worcester, MA--CT Urbanized Area    486514</cline>
            <cline>5    Barnstable Town, MA Urbanized Area  246695</cline>
        </cd>
      </p>
    </subsection>


    <subsection>
      <title>What is the average population, median and standard deviation of all Massachusetts areas?</title>

      <p>
        This is similar to above, except we change the functions on the combine:
      </p>


      <program language="julia" line-numbers="yes">
        <code>
@chain census_data begin
  subset(:NAME =&gt; (n -&gt; occursin.("MA",n)))
  combine(:POP10 =&gt; mean, :POP10 =&gt; median, :POP10 =&gt; std)
end
        </code>
      </program>

      <p>
        which results in
      </p>

      <p>
        <cd>
        <cline>1×3 DataFrame</cline>
        <cline>Row  POP10_mean  POP10_median  POP10_std</cline>
        <cline>     Float64     Float64       Float64</cline>
        <cline>1    3.69408e5   20717.5       9.44398e5</cline>
        <cline></cline>
        </cd>
      </p>
    </subsection>
  </section>
</chapter>
