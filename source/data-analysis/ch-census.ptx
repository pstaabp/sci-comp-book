<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-census">
  <title>Analyzing Census Data</title>

  <introduction>
    <p>
      This chapter goes through an example of analyzing census data.  We load the data then ask a number of questions of the data.  It is expected that you have read <xref ref="ch-data"/> and <xref ref="ch-manipulating-data"/> before this.
    </p>
  </introduction>

  <section>
    <title>Loading Packages and the Dataset</title>

    <p>
      Before we begin, make sure that you have added and loaded the following packages:
    </p>

    <p>
      <cd> using DataFrames, Chain, Statistics, CSV, StatsPlots </cd>
    </p>

    <p>
      Download the file <url href="assets/datasets/Gaz_ua_national.csv" visual="">Gaz_ua_national.csv</url> and save it somewhere that you can access it from Julia. This file has a lot of census data that we will try to find answers. Information about the data is <url href="http://www.census.gov/geo/maps-data/data/gazetteer2010.html" visual="">on the census website</url>
    </p>

    <p>
      We will start by loading the file with
    </p>

    <p>
      <cd> census_data = CSV.read("Gaz_ua_national.csv",DataFrame) </cd>
    </p>
    <p>or adjusting the path to the file if needed.  And additionally, the last column name <c>"INTPTLONG"</c> isn't read in correctly, so we need to adjust this with </p>

  </section>

  <section>
    <title>Answering Census Questions</title>

    <introduction>
      <p>
        There are a number of questions that we can answer.  We will spend the rest of this chapter answer these questions.
      </p>

      <p>
        <ol>
          <li>
            <p>
              What are the top 10 areas in population?
            </p>
          </li>

          <li>
            <p>
              How many population areas are west of 120 degrees longitude?
            </p>
          </li>

          <li>
            <p>
              Give a histogram plot in terms of population? (What are good bin sizes?)
            </p>
          </li>

          <li>
            <p>
              What is the total population of all areas?
            </p>
          </li>

          <li>
            <p>
              What the top 10 area in housing units?
            </p>
          </li>

          <li>
            <p>
              What is the total number of housing units?
            </p>
          </li>

          <li>
            <p>
              What are the top 10 areas in land size?
            </p>
          </li>

          <li>
            <p>
              What are the top 10 areas in water size?
            </p>
          </li>

          <li>
            <p>
              What are the Massachusetts areas in the data?
            </p>
          </li>

          <li>
            <p>
              What is the average population, median and standard deviation of the areas?
            </p>
          </li>
        </ol>
      </p>
    </introduction>


    <subsection>
      <title>What are the top 10 areas in population?</title>

      <p>
        To solve this, we will start with the data frame and take only necessary columns, sort by the <c>POP10</c> column and print out the top 10 rows. We will build up these steps within a <c>@chain</c> block:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  select(:GEOID, :NAME, :POP10)
  sort(:POP10, rev = true)
  first(10)
end
        </input>
      </program>
    </subsection>


    <subsection>
      <title>Find the total population of the areas west of 120 degrees longitude?</title>

      <p>
        The number of degrees longitude is in the column <c>INTPTLONG</c> and is a negative number because it is west of the 0 degree longitude (that's the way it works).  West of 120 degrees is less than -120.
      </p>

      <p>
        We will filter (subset) the data frame using this and then <c>combine</c> to compute the sum.
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  subset(:INTPTLONG =&gt; long -&gt; long .&lt; -120)
  combine(:POP10 =&gt; sum)
end
        </input>
      </program>

      <p>
        The result shows the total population west of 120 degrees is about 22 million.
      </p>
    </subsection>


    <subsection>
      <title>Give a histogram plot in terms of population?</title>

      <p>
        To produce a histogram of the population, we will use the <c>histogram</c> function of the package <c>StatsPlots</c>. <url href="https://github.com/JuliaPlots/StatsPlots.jl" visual="">Check out the documentation</url>. If we do:
      </p>

      <p>
        <cd>
        <cline>@df census_data histogram(:POP10)</cline>
        </cd>
      </p>

      <p>
        then we get the following plot:
      </p>

      <figure xml:id="fig-census-hist01">
        <caption></caption>
        <image source="plots/census/hist01.png">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        The trouble with this is that there are many many census areas with very little population. We can fix this with a log scale. If you enter
      </p>

      <p>
        <cd> @df census_data histogram(:POP10, xscale = :log10, xlims = (10^3,10^6)) </cd>
      </p>

      <p>
        then the result is:
      </p>

      <figure xml:id="fig-census-hist02">
        <caption></caption>
        <image source="plots/census/hist02.png">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>


    <subsection>
      <title>What is the total population of all areas?</title>

      <p>
        This is basically asking the question of the total population in the United States.  We can do this with
      </p>

      <p>
        <cd>
        <cline>sum(census_data.POP10)</cline>
        </cd>
      </p>

      <p>
        which returns <c>252746527</c>, which is just over 312 million.
      </p>
    </subsection>


    <subsection>
      <title>What the top 10 area in housing density?</title>

      <p>
        We are interested in finding the highest housing density, that is the number of people per housing units. We will create a new column to do this:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  transform( [:POP10, :HU10] =&gt; ((p,h)-&gt; p./h) =&gt; :Housing_Density)
  select(:NAME, :Housing_Density)
  sort(:Housing_Density, rev=true)
  first(10)
end
        </input>
      </program>

      <p>
        the results of this is
      </p>
    </subsection>


    <subsection>
      <title>What is the total number of housing units?</title>

      <p>
        This is simply a summary statistic on the <c>HU10</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  combine(:HU10 =&gt; sum)
end
        </input>
      </program>

      <p>
        or more simply <c>sum(census_data.HU10)</c>
      </p>

      <p>
        which has the result <c>105549535</c>.
      </p>
    </subsection>


    <subsection>
      <title>What are the top 10 areas in land size?</title>

      <p>
        This is a sorting of the dataset in terms of the <c>ALAND</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  select(:NAME, :ALAND)
  sort(:ALAND, rev=true)
  first(10)
end
        </input>
      </program>
    </subsection>


    <subsection>
      <title>What are the top 10 areas in water size?</title>

      <p>
        This is similar to the one above but use the <c>AWATER</c> variable:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  select(:NAME, :AWATER)
  sort(:AWATER, rev=true)
  first(10)
end
        </input>
      </program>
    </subsection>


    <subsection>
      <title>What are the Massachusetts areas in the data?</title>

      <p>
        First, we'll need to filter (subset) the dataset to only include those with <c>MA</c> in the name.  We can use the <c>occursin</c> function to do this:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  subset(:NAME =&gt; (n -&gt; occursin.("MA",n)))
  combine(:POP10 =&gt; sum)
end
        </input>
      </program>
    </subsection>


    <subsection>
      <title>What is the average population, median and standard deviation of the each of the areas?</title>

      <p>
        This is similar to above, except we change the functions on the combine:
      </p>


      <program language="julia" line-numbers="yes">
        <input>
@chain census_data begin
  subset(:NAME =&gt; (n -&gt; occursin.("MA",n)))
  combine(:POP10 =&gt; mean, :POP10 =&gt; median, :POP10 =&gt; std)
end
        </input>
      </program>
      <p>
        which results in
      </p>
      <p>
        <cd>
          <cline>1Ã—3 DataFrame</cline>
            <cline>Row  POP10_mean  POP10_median  POP10_std</cline>
            <cline>     Float64     Float64       Float64</cline>
            <cline>1    3.69408e5   20717.5       9.44398e5</cline>
            <cline></cline>
        </cd>
      </p>
    </subsection>
  </section>
</chapter>
