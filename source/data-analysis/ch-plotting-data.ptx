<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-plotting-data" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Plotting Data using Makie</title>

  <introduction>
    <p>
      Many of the examples above have involved plotting functions.
      This section gives some overview of how to think about data.
      In particular, recall that data is generally either discrete (that is there are either a finite or countable number of possibilities) like categories or numerical data that can be counted or continuous like data that is measured with real numbers (inches of rain, heights of people, etc.)  It's important to understand the difference to understand plots.
      This chapter covers plotting data using primarily <c>Makie</c>
    </p>

    <p>
      Recall that we covered plotting in Makie in <xref ref="ch-plotting-makie"/>.
      It's important to have a grasp of the plotting basics including the backends.
      We will mainly be using <c>CairoMakie</c> here, but that is not required.
      Recall to set the <c>CairoMakie</c> backend, we need to do:
    </p>

    <p>
      <cd>
      <cline>using CairoMakie</cline>
      <cline>CairoMakie.activate!()</cline>
      <cline>Makie.inline!(true)</cline>
      </cd>
    </p>
  </introduction>

  <section>
    <title>Plotting Continuous</title>

    <introduction>
      <p>
        We first start with plotting continuous data.
      </p>
    </introduction>


    <subsection xml:id="sect-histograms">
      <title>Histograms</title>

      <p>
        If one has univariate data<fn>Recall that this means that for every observation, there is only one value associated with it.</fn> which is continuous, the standard way to understand the distribution of the data is to do a <term>histogram</term>.
      </p>
    </subsection>


    <subsection xml:id="sect-scatter-plots">
      <title>Scatter Plots</title>

      <p>
        We have already seen examples of plotting continuous data with the CO₂ data above.
        This data is the mean CO₂ level over each year and although the year seems like a discrete variable, time is actually continuous.
        Because of this, a scatter plot is a good way to present this data.
      </p>
    </subsection>
  </section>

  <section>
    <title>Plotting Discrete Data in Makie</title>

    <introduction>
      <p>
        In contrast, let's look at discrete data.
        I have done a lot of research recently using sports data and one project involved scoring in the National Basketball Association (NBA).
        Consider a season and looking at the number of points every team has scored.
        For the 2023-2024 season, if we consider the home and visiting teams, then here is the first few games:
      </p>
    </introduction>


    <subsection>
      <title>Barplots in Makie</title>

      <p>
        We saw barplots in <xref ref="ch-prob-models"/>, but didn't explain how to generate them.
        A barplot is a good plot to use if there is a sequence of discrete data.
        For example, the probability distribution function for rolling two dice seen in <xref ref="ch-probability-random"/> resulted in the distribution:
      </p>

      <table>
        <title>PDF of the sum of two dice</title>

        <tabular>
          <row>
            <cell><m>k</m></cell>
            <cell><m>P(X=k)</m></cell>
          </row>

          <row>
            <cell>2</cell>
            <cell>1/36</cell>
          </row>

          <row>
            <cell>3</cell>
            <cell>2/36</cell>
          </row>

          <row>
            <cell>4</cell>
            <cell>3/36</cell>
          </row>

          <row>
            <cell>5</cell>
            <cell>4/36</cell>
          </row>

          <row>
            <cell>6</cell>
            <cell>5/36</cell>
          </row>

          <row>
            <cell>7</cell>
            <cell>6/36</cell>
          </row>

          <row>
            <cell>8</cell>
            <cell>5/36</cell>
          </row>

          <row>
            <cell>9</cell>
            <cell>4/36</cell>
          </row>

          <row>
            <cell>10</cell>
            <cell>3/36</cell>
          </row>

          <row>
            <cell>11</cell>
            <cell>2/36</cell>
          </row>

          <row>
            <cell>12</cell>
            <cell>1/36</cell>
          </row>
        </tabular>
      </table>

      <p>
        A bar plot of this data is plotted with the <c>barplot</c> command.
        The call <c>barplot(x,y)</c> for vectors <c>x</c> and <c>y</c> plot a bar located at each value of <c>x</c> with height <c>y</c>.
        The heights from the table above can be generated with <c>[(6-abs(i-7))//36 for i = 2:12]</c> and then
      </p>

      <p>
        <cd>
        <cline>barplot(2:12,h)</cline>
        </cd>
      </p>

      <p>
        which produces the plot
      </p>

      <figure xml:id="fig-dice-pdf">
        <caption></caption>
        <image source="plots/plot-data/dice.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        and note that the horizontal axis has underisable tick marks.
        We'll fix this building a Axis object and changing the <c>xticks</c> option.
        Additionally, I think it looks nice with small black borders around the bars and give it a title.
        If we run the following:
      </p>

      <p>
        <cd>
        <cline>fig = Figure()</cline>
        <cline>ax = Axis(fig[1,1],xticks=2:2:12, title="PDF of the sum of two dice")</cline>
        <cline>barplot!(ax, 2:12,h, strokewidth = 0.5)</cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        which produces the following plot:
      </p>

      <figure xml:id="fig-dice-pdf2">
        <caption></caption>
        <image source="plots/plot-data/dice2.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        If one desires for the bars to run horizontal, then use the option <c>direction = :x</c> on the <c>barplot</c> method.
        For example:
      </p>

      <p>
        <cd>
        <cline>fig = Figure()</cline>
        <cline>x = Axis(fig[1,1],yticks=2:2:12, title="PDF of the sum of two dice") </cline>
        <cline>barplot!(ax, 2:12,h, strokewidth = 0.5, direction = :x) </cline>
        <cline>fig</cline>
        </cd>
      </p>

      <p>
        and note that we have switched the tick marks to <c>yticks</c>.
        This produces the plot
      </p>

      <figure xml:id="fig-dice-pdf3">
        <caption></caption>
        <image source="plots/plot-data/dice3.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>
    </subsection>


    <subsection>
      <title>Grouped Barplots in Makie</title>

      <p>
        Another common way to display data is to compare a set to another one.
        If the data would often be displayed as a bar plot, then to compare it we can use a grouped bar plot.
        A grouped bar plot can either be stacked (which the bars are stacked above each other) or dodged (in which the bars are side by side).
        Let's say we have the data
      </p>

      <p>
        <cd>
        <cline>h1 = [2, 6, 8, 7]</cline>
        <cline>h2 = [3, 8, 5, 9]</cline>
        <cline>x = [1, 2, 3, 4]</cline>
        </cd>
      </p>

      <p>
        where we want to plot both <c>h1</c> and <c>h2</c> on the same axes.
        A stacked bar plot can be made with
      </p>

      <p>
        <cd>
        <cline>fig = barplot(vcat(x,x),vcat(h1,h2), </cline>
        <cline> stack = vcat(x,x), </cline>
        <cline> color=repeat(1:2,inner=4),</cline>
        <cline> strokewidth = 0.5)</cline>
        </cd>
      </p>

      <p>
        where we have used array concatenation explained in <xref ref="sect-array-concat"/> and the <c>repeat</c> method from <xref ref="sect-array-repeat"/>.
        First, the <c>stack</c> of the <c>barplot</c> explains that the data is to be stacked and how to stack the results.
        Without the <c>color</c> option, the bars are stacked, but can't be distinguished (try it!).
        Also, again, typing this on multiple lines is mainly for clarity--the same results occur if this was a single line.
        The results are:
      </p>

      <figure xml:id="fig-stacked-bar01">
        <caption></caption>
        <image source="plots/plot-data/stack01.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        I'm not a fan of the default colors that are used.
        One can choose any of the named colors.
        See <url href="https://docs.makie.org/stable/explanations/colors">Makie page on colors</url> for more details.
        A common color grouping which works well for bar colors (that is there is contrast between colors) is the built-in <c>Makie.wong_colors()</c>.
        The above plot can be changed with
      </p>

      <p>
        <cd>
        <cline>colors =Makie.wong_colors()</cline>
        <cline>fig = barplot(vcat(x,x),vcat(h1,h2), </cline>
        <cline> stack = vcat(x,x), </cline>
        <cline> color=repeat(1:2,inner=4),</cline>
        <cline> strokewidth = 0.5)</cline>
        </cd>
      </p>

      <p>
        which results in
      </p>

      <figure xml:id="fig-simple-stacked-bar02">
        <caption></caption>
        <image source="plots/plot-data/stack02.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        If you want to specify the colors, simply replace the first line above, with an array of named colors.
        For example,
      </p>

      <p>
        <cd>
        <cline>colors = [:fuchsia, :steelblue]</cline>
        <cline>fig = barplot(vcat(x,x),vcat(h1,h2), </cline>
        <cline> stack = vcat(x,x), </cline>
        <cline> color=repeat(1:2,inner=4),</cline>
        <cline> strokewidth = 0.5)</cline>
        </cd>
      </p>

      <p>
        results in
      </p>

      <figure xml:id="fig-simple-stacked-bar03">
        <caption></caption>
        <image source="plots/plot-data/stack03.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        However, if the desire of plotting two sets of data is to compare them, often plotting them side by side is better.
        This can be accomplished with the dodge option as in
      </p>

      <p>
        <cd>
        <cline>colors = Makie.wong_colors()</cline>
        <cline>fig = barplot(vcat(x,x),vcat(h1,h2),</cline>
        <cline>  dodge = repeat(1:2,inner=4),</cline>
        <cline>  color=colors[repeat(1:2,inner=4)],</cline>
        <cline>  strokewidth = 0.5)</cline>
        </cd>
      </p>

      <p>
        resulting in
      </p>

      <figure xml:id="fig-simple-dodged-bar">
        <caption></caption>
        <image source="plots/plot-data/dodge01.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        Note that the <c>dodge</c> option determines the order of each group of bars for each <c>x</c> value.
        Although not shown, you can use more than two sets of bars for a group.
      </p>
    </subsection>


    <subsection>
      <title>Example of Realistic Barplot in Makie</title>

      <p>
        To plot every score (which is discrete), let's consider a bar plot in which the height of a bar at a given score is the number of games with that score.
        To generate this, we load in the <c>nba2024.csv</c> file.
        Note you will need to download/install <c>CSV</c> and <c>DataFrames</c>.
      </p>

      <p>
        <cd>
        <cline>using CSV, DataFrames</cline>
        <cline>nba_scores = CSV.read("nba.csv", DataFrame)</cline>
        </cd>
      </p>

      <p>
        and this lists about 15 rows of the file.
        The top of the file looks like:
      </p>

      <p>
        <cd>
        <cline>1319×5 DataFrame     1294 rows omitted</cline>
        <cline>  Row   DATE        HOME_TEAM              HOME_SCORE  VISITOR_NAME        VISITOR_SCORE</cline>
        <cline>        Date        String31               Int64       String31            Int64</cline>
        <cline>  1     2023-10-24  Denver Nuggets         119         Los Angeles Lakers  107</cline>
        <cline>  2     2023-10-24  Golden State Warriors  104         Phoenix Suns        108</cline>
        <cline>  3     2023-10-25  Orlando Magic          116         Houston Rockets     86</cline>
        </cd>
      </p>

      <p>
        We won't go into what a DataFrame is, but in short it is a common data structure for working with data that comes in columns with common types.
        These work well with spreadsheets.
        The details of a <c>DataFrame</c> is presented starting in <xref ref="ch-data"/>.
        To plot the number of home games with a given score (also called the score distribution), we use the <c>counts</c> function in the <c>StatsBase</c> package (so install it) and perform <c>using StatsBase</c>.
      </p>

      <p>
        <cd>
        <cline>home_dist = counts(nba_scores.HOME_SCORE,70:160)</cline>
        </cd>
      </p>

      <p>
        which returns a vector of the number of games with the score 70, 71, ..., 160.
        We can then plot the results with <c>barplot</c> using
      </p>

      <p>
        <cd>
        <cline>barplot(70:160,home_dist)</cline>
        </cd>
      </p>

      <p>
        which results in the plot
      </p>

      <figure xml:id="fig-nba-home">
        <caption></caption>
        <image source="plots/makie/nba_home.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        Another interesting plot is to place bars side by side for the home and visitor scores.
        This is a little but possible with the <c>barplot</c> command.
        We just need to include all of the data together and then including a vector of grouping.
        The following is the code to do this:
      </p>

      <p>
        <cd>
        <cline>colors = Makie.wong_colors()</cline>
        <cline>barplot(</cline>
        <cline>  repeat(70:160,2),</cline>
        <cline>  vcat(home_dist,visitor_dist),</cline>
        <cline>  dodge = repeat(1:2,inner=91),</cline>
        <cline>  color = repeat(collect(colors[1:2]),inner=91),</cline>
        <cline>  strokewidth=0.25</cline>
        <cline>)</cline>
        </cd>
      </p>

      <p>
        where this is one command but split onto lines for readability.
        The 2nd line is the horizontal axis which is just the same as the plot above except that we need to repeat it twice.
        The third line concatenates vertically (<c>vcat</c>) the two distributions.
        The fourth line explain how to group the data (<c>dodge</c> is used to include it side by side or <c>stack</c> is to stack it vertically).
        The color attribute (line 5) sets the color for each bar--again, this is needed to be a repeated vector.
        The result of this is
      </p>

      <figure xml:id="fig-nba-compare">
        <caption></caption>
        <image source="plots/plot-data/nba-compare.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        More examples of plotting data can be found in <xref ref="ch-data"/> and other chapters in <xref ref="part-data-analysis"/>, which uses larger datasets and investigates how to gain insights into data from visualization.
      </p>
    </subsection>
  </section>
</chapter>