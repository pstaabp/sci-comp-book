<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-plotting-data" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Plotting Data</title>

  <introduction>
    <p>
      This chapter covers plotting data using both Makie and Plots.jl.
    </p>
    </introduction>

  <section>
    <title>Plotting Data in Makie</title>

    <introduction>
      <p>
        <em>move to the data section</em>
      </p>

      <p>
        Many of the examples above have involved plotting functions.  This section gives some overview of how to think about data.  In particular, recall that data is generally either discrete (that is there are either a finite or countable number of possibilities) like categories or numerical data that can be counted or continuous like data that is measured with real numbers (inches of rain, heights of people, etc.)  It's important to understand the difference to understand plots.
      </p>
    </introduction>


    <subsection>
      <title>Plotting Continuous Data</title>

      <p>
        We have already seen examples of plotting continuous data with the CO₂ data above.  This data is the mean CO₂ level over each year and although the year seems like a discrete variable, time is actually continuous.  Because of this, a scatter plot is a good way to present this data.
      </p>
    </subsection>


    <subsection>
      <title>Plotting Discrete Data</title>

      <p>
        In contrast, let's look at discrete data.  I have done a lot of research recently using sports data and one project involved scoring in the National Basketball Association (NBA).  Consider a season and looking at the number of points every team has scored.   For the 2023-2024 season, if we consider the home and visiting teams, then here is the first few games:
      </p>

      <p>
        To plot every score (which is discrete), let's consider a bar plot in which the height of a bar at a given score is the number of games with that score.  To generate this, we load in the <c>nba2024.csv</c> file.  Note you will need to download/install <c>CSV</c> and <c>DataFrames</c>.
      </p>

      <p>
        <cd>
        <cline>using CSV, DataFrames</cline>
        <cline>nba_scores = CSV.read("nba.csv", DataFrame)</cline>
        </cd>
      </p>

      <p>
        and this lists about 15 rows of the file.  The top of the file looks like:
      </p>

      <p>
        <cd>
        <cline>1319×5 DataFrame     1294 rows omitted</cline>
        <cline>  Row   DATE        HOME_TEAM              HOME_SCORE  VISITOR_NAME        VISITOR_SCORE</cline>
        <cline>        Date        String31               Int64       String31            Int64</cline>
        <cline>  1     2023-10-24  Denver Nuggets         119         Los Angeles Lakers  107</cline>
        <cline>  2     2023-10-24  Golden State Warriors  104         Phoenix Suns        108</cline>
        <cline>  3     2023-10-25  Orlando Magic          116         Houston Rockets     86</cline>
        </cd>
      </p>

      <p>
        We won't go into what a DataFrame is, but in short it is a common data structure for working with data that comes in columns with common types.  These work well with spreadsheets.  The details of a <c>DataFrame</c> is presented starting in <xref ref="ch-data"/>. To plot the number of home games with a given score (also called the score distribution), we use the <c>counts</c> function in the <c>StatsBase</c> package (so install it) and perform <c>using StatsBase</c>.
      </p>

      <p>
        <cd>
        <cline>home_dist = counts(nba_scores.HOME_SCORE,70:160)</cline>
        </cd>
      </p>

      <p>
        which returns a vector of the number of games with the score 70, 71, ..., 160.  We can then plot the results with <c>barplot</c> using
      </p>

      <p>
        <cd>
        <cline>barplot(70:160,home_dist)</cline>
        </cd>
      </p>

      <p>
        which results in the plot
      </p>

      <figure xml:id="fig-nba-home">
        <caption></caption>
        <image source="plots/makie/nba_home.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        Another interesting plot is to place bars side by side for the home and visitor scores.  This is a little but possible with the <c>barplot</c> command.  We just need to include all of the data together and then including a vector of grouping.  The following is the code to do this:
      </p>

      <p>
        <cd>
        <cline>colors = Makie.wong_colors()</cline>
        <cline>barplot(</cline>
        <cline>  repeat(70:160,2), </cline>
        <cline>  vcat(home_dist,visitor_dist), </cline>
        <cline>  dodge = repeat(1:2,inner=91), </cline>
        <cline>  color = repeat([:orange, :darkgreen],inner=91)</cline>
        <cline>)</cline>
        </cd>
      </p>

      <p>
        where this is one command but split onto lines for readability.  The 2nd line is the horizontal axis which is just the same as the plot above except that we need to repeat it twice.  The third line concatenates vertically (<c>vcat</c>) the two distributions.  The fourth line explain how to group the data (<c>dodge</c> is used to include it side by side or <c>stack</c> is to stack it vertically). The color attribute (line 5) sets the color for each bar--again, this is needed to be a repeated vector.  The result of this is
      </p>

      <figure xml:id="fig-nba-compare">
        <caption></caption>
        <image source="plots/makie/nba-compare.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        An easier example of this is with the following code:
      </p>

      <p>
        <cd>
        <cline>colors =Makie.wong_colors()</cline>
        <cline></cline>
        <cline>h = [2, 3, 6, 8, 3, 5, 7, 9]</cline>
        <cline>x = [1, 1, 2, 2, 3, 3, 4, 4]</cline>
        <cline>v = repeat([1,2],4)</cline>
        <cline></cline>
        <cline>barplot(x, h, dodge = v, color = colors[v] )</cline>
        </cd>
      </p>

      <p>
        which results in
      </p>

      <figure xml:id="fig-simple-barplot">
        <caption></caption>
        <image source="plots/makie/simple-barplot.png" width="90%">
          <shortdescription>
            (for accessibility)
          </shortdescription>
        </image>
      </figure>

      <p>
        More examples of plotting data can be found in <xref ref="ch-data"/> and other chapters in <xref ref="part-data-analysis"/>, which uses larger datasets and investigates how to gain insights into data from visualization.
      </p>
    </subsection>
  </section>

</chapter>